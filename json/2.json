{"lessons-2":{
"a77dbc43c33f39daa4429b4f" : {"id":"a77dbc43c33f39daa4429b4f","title":"Boo who","videoUrl":"","content":"\nCheck if a value is classified as a boolean primitive. Return true or false.\nBoolean primitives are true and false.\nRemember to use <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> if you get stuck. Try to pair program. Write your own code.\n"},
"a9bd25c716030ec90084d8a1" : {"id":"a9bd25c716030ec90084d8a1","title":"Chunky Monkey","videoUrl":"","content":"\nWrite a function that splits an array (first argument) into groups the length of <code>size</code> (second argument) and returns them as a two-dimensional array.\nRemember to use <a href=\"http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514\" target=\"_blank\">Read-Search-Ask</a> if you get stuck. Write your own code.\n"},
"acda2fb1324d9b0fa741e6b5" : {"id":"acda2fb1324d9b0fa741e6b5","title":"Confirm the Ending","videoUrl":"","content":"\nCheck if a string (first argument, <code>str</code>) ends with the given target string (second argument, <code>target</code>).\nThis challenge <em>can</em> be solved with the <code>.endsWith()</code> method, which was introduced in ES2015. But for the purpose of this challenge, we would like you to use one of the JavaScript substring methods instead.\nRemember to use <a href=\"http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514\" target=\"_blank\">Read-Search-Ask</a> if you get stuck. Write your own code.\n"},
"56533eb9ac21ba0edf2244b3" : {"id":"56533eb9ac21ba0edf2244b3","title":"Convert Celsius to Fahrenheit","videoUrl":"","content":"\nThe algorithm to convert from Celsius to Fahrenheit is the temperature in Celsius times <code>9/5</code>, plus <code>32</code>.\nYou are given a variable <code>celsius</code> representing a temperature in Celsius. Use the variable <code>fahrenheit</code> already defined and assign it the Fahrenheit temperature equivalent to the given Celsius temperature. Use the algorithm mentioned above to help convert the Celsius temperature to Fahrenheit.\nDon't worry too much about the function and return statements as they will be covered in future challenges. For now, only use operators that you have already learned.\n"},
"a302f7aae1aa3152a5b413bc" : {"id":"a302f7aae1aa3152a5b413bc","title":"Factorialize a Number","videoUrl":"","content":"\nReturn the factorial of the provided integer.\nIf the integer is represented with the letter n, a factorial is the product of all positive integers less than or equal to n.\nFactorials are often represented with the shorthand notation <code>n!</code>\nFor example: <code>5! = 1 * 2 * 3 * 4 * 5 = 120</code>\nOnly integers greater than or equal to zero will be supplied to the function.\nRemember to use <a href=\"http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514\" target=\"_blank\">Read-Search-Ask</a> if you get stuck. Write your own code.\n"},
"adf08ec01beb4f99fc7a68f2" : {"id":"adf08ec01beb4f99fc7a68f2","title":"Falsy Bouncer","videoUrl":"","content":"\nRemove all falsy values from an array.\nFalsy values in JavaScript are <code>false</code>, <code>null</code>, <code>0</code>, <code>\"\"</code>, <code>undefined</code>, and <code>NaN</code>.\nHint: Try converting each value to a Boolean.\nRemember to use <a href=\"http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514\" target=\"_blank\">Read-Search-Ask</a> if you get stuck. Write your own code.\n"},
"a6e40f1041b06c996f7b2406" : {"id":"a6e40f1041b06c996f7b2406","title":"Finders Keepers","videoUrl":"","content":"\nCreate a function that looks through an array (first argument) and returns the first element in the array that passes a truth test (second argument). If no element passes the test, return undefined.\nRemember to use <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> if you get stuck. Try to pair program. Write your own code.\n"},
"a26cbbe9ad8655a977e1ceb5" : {"id":"a26cbbe9ad8655a977e1ceb5","title":"Find the Longest Word in a String","videoUrl":"","content":"\nReturn the length of the longest word in the provided sentence.\nYour response should be a number.\nRemember to use <a href=\"http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514\" target=\"_blank\">Read-Search-Ask</a> if you get stuck. Write your own code.\n"},
"af2170cad53daa0770fabdea" : {"id":"af2170cad53daa0770fabdea","title":"Mutations","videoUrl":"","content":"\nReturn true if the string in the first element of the array contains all of the letters of the string in the second element of the array.\nFor example, <code>[\"hello\", \"Hello\"]</code>, should return true because all of the letters in the second string are present in the first, ignoring case.\nThe arguments <code>[\"hello\", \"hey\"]</code> should return false because the string \"hello\" does not contain a \"y\".\nLastly, <code>[\"Alien\", \"line\"]</code>, should return true because all of the letters in \"line\" are present in \"Alien\".\nRemember to use <a href=\"http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514\" target=\"_blank\">Read-Search-Ask</a> if you get stuck. Write your own code.\n"},
"afcc8d540bea9ea2669306b6" : {"id":"afcc8d540bea9ea2669306b6","title":"Repeat a String Repeat a String","videoUrl":"","content":"\nRepeat a given string <code>str</code> (first argument) for <code>num</code> times (second argument). Return an empty string if <code>num</code> is not a positive number.\nRemember to use <a href=\"http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514\" target=\"_blank\">Read-Search-Ask</a> if you get stuck. Write your own code.\n"},
"a789b3483989747d63b0e427" : {"id":"a789b3483989747d63b0e427","title":"Return Largest Numbers in Arrays","videoUrl":"","content":"\nReturn an array consisting of the largest number from each provided sub-array. For simplicity, the provided array will contain exactly 4 sub-arrays.\nRemember, you can iterate through an array with a simple for loop, and access each member with array syntax <code>arr[i]</code>.\nRemember to use <a href=\"http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514\" target=\"_blank\">Read-Search-Ask</a> if you get stuck. Write your own code.\n"},
"a202eed8fc186c8434cb6d61" : {"id":"a202eed8fc186c8434cb6d61","title":"Reverse a String","videoUrl":"","content":"\nReverse the provided string.\nYou may need to turn the string into an array before you can reverse it.\nYour result must be a string.\nRemember to use <a href=\"http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514\" target=\"_blank\">Read-Search-Ask</a> if you get stuck. Write your own code.\n"},
"579e2a2c335b9d72dd32e05c" : {"id":"579e2a2c335b9d72dd32e05c","title":"Slice and Splice","videoUrl":"","content":"\nYou are given two arrays and an index.\nUse the array methods <code>slice</code> and <code>splice</code> to copy each element of the first array into the second array, in order.\nBegin inserting elements at index <code>n</code> of the second array.\nReturn the resulting array. The input arrays should remain the same after the function runs.\nRemember to use <a href=\"http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514\" target=\"_blank\">Read-Search-Ask</a> if you get stuck. Write your own code.\n"},
"ab6137d4e35944e21037b769" : {"id":"ab6137d4e35944e21037b769","title":"Title Case a Sentence","videoUrl":"","content":"\nReturn the provided string with the first letter of each word capitalized. Make sure the rest of the word is in lower case.\nFor the purpose of this exercise, you should also capitalize connecting words like \"the\" and \"of\".\nRemember to use <a href=\"http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514\" target=\"_blank\">Read-Search-Ask</a> if you get stuck. Write your own code.\n"},
"ac6993d51946422351508a41" : {"id":"ac6993d51946422351508a41","title":"Truncate a String","videoUrl":"","content":"\nTruncate a string (first argument) if it is longer than the given maximum string length (second argument). Return the truncated string with a <code>...</code> ending.\nRemember to use <a href=\"http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514\" target=\"_blank\">Read-Search-Ask</a> if you get stuck. Write your own code.\n"},
"a24c1a4622e3c05097f71d67" : {"id":"a24c1a4622e3c05097f71d67","title":"Where do I Belong","videoUrl":"","content":"\nReturn the lowest index at which a value (second argument) should be inserted into an array (first argument) once it has been sorted. The returned value should be a number.\nFor example, <code>getIndexToIns([1,2,3,4], 1.5)</code> should return <code>1</code> because it is greater than <code>1</code> (index 0), but less than <code>2</code> (index 1).\nLikewise, <code>getIndexToIns([20,3,5], 19)</code> should return <code>2</code> because once the array has been sorted it will look like <code>[3,5,20]</code> and <code>19</code> is less than <code>20</code> (index 2) and greater than <code>5</code> (index 1).\nRemember to use <a href=\"http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514\" target=\"_blank\">Read-Search-Ask</a> if you get stuck. Write your own code.\n"},
"5a661e0f1068aca922b3ef17" : {"id":"5a661e0f1068aca922b3ef17","title":"Access an Array's Contents Using Bracket Notation","videoUrl":"","content":"\nThe fundamental feature of any data structure is, of course, the ability to not only store data, but to be able to retrieve that data on command. So, now that we've learned how to create an array, let's begin to think about how we can access that array's information.\nWhen we define a simple array as seen below, there are 3 items in it:\n<blockquote>let ourArray = [\"a\", \"b\", \"c\"];</blockquote>\nIn an array, each array item has an <dfn>index</dfn>.  This index doubles as the position of that item in the array, and how you reference it. However, it is important to note, that JavaScript arrays are <dfn>zero-indexed</dfn>, meaning that the first element of an array is actually at the <em><strong>zeroth</strong></em> position, not the first.\nIn order to retrieve an element from an array we can enclose an index in brackets and append it to the end of an array, or more commonly, to a variable which references an array object. This is known as <dfn>bracket notation</dfn>.\nFor example, if we want to retrieve the <code>\"a\"</code> from <code>ourArray</code> and assign it to a variable, we can do so with the following code:\n<blockquote>let ourVariable = ourArray[0];<br>// ourVariable equals \"a\"</blockquote>\nIn addition to accessing the value associated with an index, you can also <em>set</em> an index to a value using the same notation:\n<blockquote>ourArray[1] = \"not b anymore\";<br>// ourArray now equals [\"a\", \"not b anymore\", \"c\"];</blockquote>\nUsing bracket notation, we have now reset the item at index 1 from <code>\"b\"</code>, to <code>\"not b anymore\"</code>.\n"},
"587d7b7c367417b2b2512b1a" : {"id":"587d7b7c367417b2b2512b1a","title":"Access Property Names with Bracket Notation","videoUrl":"","content":"\nIn the first object challenge we mentioned the use of bracket notation as a way to access property values using the evaluation of a variable. For instance, imagine that our <code>foods</code> object is being used in a program for a supermarket cash register. We have some function that sets the <code>selectedFood</code> and we want to check our <code>foods</code> object for the presence of that food. This might look like:\n<blockquote>let selectedFood = getCurrentFood(scannedItem);<br>let inventory = foods[selectedFood];</blockquote>\nThis code will evaluate the value stored in the <code>selectedFood</code> variable and return the value of that key in the <code>foods</code> object, or <code>undefined</code> if it is not present. Bracket notation is very useful because sometimes object properties are not known before runtime or we need to access them in a more dynamic way.\n"},
"587d78b2367417b2b2512b0e" : {"id":"587d78b2367417b2b2512b0e","title":"Add Items to an Array with push() and unshift()","videoUrl":"","content":"\nAn array's length, like the data types it can contain, is not fixed. Arrays can be defined with a length of any number of elements, and elements can be added or removed over time; in other words, arrays are <dfn>mutable</dfn>. In this challenge, we will look at two methods with which we can programmatically modify an array: <code>Array.push()</code> and <code>Array.unshift()</code>.\nBoth methods take one or more elements as parameters and add those elements to the array the method is being called on; the <code>push()</code> method adds elements to the end of an array, and <code>unshift()</code> adds elements to the beginning. Consider the following:\n<blockquote>let twentyThree = 'XXIII';<br>let romanNumerals = ['XXI', 'XXII'];<br><br>romanNumerals.unshift('XIX', 'XX');<br>// now equals ['XIX', 'XX', 'XXI', 'XXII']<br><br>romanNumerals.push(twentyThree);<br>// now equals ['XIX', 'XX', 'XXI', 'XXII', 'XXIII']\nNotice that we can also pass variables, which allows us even greater flexibility in dynamically modifying our array's data.\n"},
"587d78b3367417b2b2512b11" : {"id":"587d78b3367417b2b2512b11","title":"Add Items Using splice()","videoUrl":"","content":"\nRemember in the last challenge we mentioned that <code>splice()</code> can take up to three parameters? Well, we can go one step further with <code>splice()</code> &mdash; in addition to removing elements, we can use that third parameter, which represents one or more elements, to <em>add</em> them as well. This can be incredibly useful for quickly switching out an element, or a set of elements, for another. For instance, let's say you're storing a color scheme for a set of DOM elements in an array, and want to dynamically change a color based on some action:\n<blockquote>function colorChange(arr, index, newColor) {<br>&nbsp;&nbsp;arr.splice(index, 1, newColor);<br>&nbsp;&nbsp;return arr;<br>}<br><br>let colorScheme = ['#878787', '#a08794', '#bb7e8c', '#c9b6be', '#d1becf'];<br><br>colorScheme = colorChange(colorScheme, 2, '#332327');<br>// we have removed '#bb7e8c' and added '#332327' in its place<br>// colorScheme now equals ['#878787', '#a08794', '#332327', '#c9b6be', '#d1becf']</blockquote>\nThis function takes an array of hex values, an index at which to remove an element, and the new color to replace the removed element with. The return value is an array containing a newly modified color scheme! While this example is a bit oversimplified, we can see the value that utilizing <code>splice()</code> to its maximum potential can have.\n"},
"587d7b7c367417b2b2512b18" : {"id":"587d7b7c367417b2b2512b18","title":"Add Key-Value Pairs to JavaScript Objects","videoUrl":"","content":"\nAt their most basic, objects are just collections of <dfn>key-value pairs</dfn>, or in other words, pieces of data mapped to unique identifiers that we call <dfn>properties</dfn> or <dfn>keys</dfn>. Let's take a look at a very simple example:\n<blockquote>let FCC_User = {<br>&nbsp;&nbsp;username: 'awesome_coder',<br>&nbsp;&nbsp;followers: 572,<br>&nbsp;&nbsp;points: 1741,<br>&nbsp;&nbsp;completedProjects: 15<br>};</blockquote>\nThe above code defines an object called <code>FCC_User</code> that has four <dfn>properties</dfn>, each of which map to a specific value. If we wanted to know the number of <code>followers</code> <code>FCC_User</code> has, we can access that property by writing:\n<blockquote>let userData = FCC_User.followers;<br>// userData equals 572</blockquote>\nThis is called <dfn>dot notation</dfn>. Alternatively, we can also access the property with brackets, like so:\n<blockquote>let userData = FCC_User['followers']<br>// userData equals 572</blockquote>\nNotice that with <dfn>bracket notation</dfn>, we enclosed <code>followers</code> in quotes. This is because the brackets actually allow us to pass a variable in to be evaluated as a property name (hint: keep this in mind for later!). Had we passed <code>followers</code> in without the quotes, the JavaScript engine would have attempted to evaluate it as a variable, and a <code>ReferenceError: followers is not defined</code> would have been thrown.\n"},
"587d7b7b367417b2b2512b14" : {"id":"587d7b7b367417b2b2512b14","title":"Check For The Presence of an Element With indexOf()","videoUrl":"","content":"\nSince arrays can be changed, or <em>mutated</em>, at any time, there's no guarantee about where a particular piece of data will be on a given array, or if that element even still exists. Luckily, JavaScript provides us with another built-in method, <code>indexOf()</code>, that allows us to quickly and easily check for the presence of an element on an array. <code>indexOf()</code> takes an element as a parameter, and when called, it returns the position, or index, of that element, or <code>-1</code> if the element does not exist on the array.\nFor example:\n<blockquote>let fruits = ['apples', 'pears', 'oranges', 'peaches', 'pears'];<br><br>fruits.indexOf('dates') // returns -1<br>fruits.indexOf('oranges') // returns 2<br>fruits.indexOf('pears') // returns 1, the first index at which the element exists</blockquote>\n"},
"587d7b7d367417b2b2512b1c" : {"id":"587d7b7d367417b2b2512b1c","title":"Check if an Object has a Property","videoUrl":"","content":"\nNow we can add, modify, and remove keys from objects. But what if we just wanted to know if an object has a specific property? JavaScript provides us with two different ways to do this. One uses the <code>hasOwnProperty()</code> method and the other uses the <code>in</code> keyword. If we have an object <code>users</code> with a property of <code>Alan</code>, we could check for its presence in either of the following ways:\n<blockquote>users.hasOwnProperty('Alan');<br>'Alan' in users;<br>// both return true</blockquote>\n"},
"587d7b7b367417b2b2512b17" : {"id":"587d7b7b367417b2b2512b17","title":"Combine Arrays with the Spread Operator","videoUrl":"","content":"\nAnother huge advantage of the <dfn>spread</dfn> operator, is the ability to combine arrays, or to insert all the elements of one array into another, at any index. With more traditional syntaxes, we can concatenate arrays, but this only allows us to combine arrays at the end of one, and at the start of another. Spread syntax makes the following operation extremely simple:\n<blockquote>let thisArray = ['sage', 'rosemary', 'parsley', 'thyme'];<br><br>let thatArray = ['basil', 'cilantro', ...thisArray, 'coriander'];<br>// thatArray now equals ['basil', 'cilantro', 'sage', 'rosemary', 'parsley', 'thyme', 'coriander']</blockquote>\nUsing spread syntax, we have just achieved an operation that would have been more complex and more verbose had we used traditional methods.\n"},
"587d7b7b367417b2b2512b13" : {"id":"587d7b7b367417b2b2512b13","title":"Copy an Array with the Spread Operator","videoUrl":"","content":"\nWhile <code>slice()</code> allows us to be selective about what elements of an array to copy, among several other useful tasks, ES6's new <dfn>spread operator</dfn> allows us to easily copy <em>all</em> of an array's elements, in order, with a simple and highly readable syntax. The spread syntax simply looks like this: <code>...</code>\nIn practice, we can use the spread operator to copy an array like so:\n<blockquote>let thisArray = [true, true, undefined, false, null];<br>let thatArray = [...thisArray];<br>// thatArray equals [true, true, undefined, false, null]<br>// thisArray remains unchanged, and is identical to thatArray</blockquote>\n"},
"587d7b7a367417b2b2512b12" : {"id":"587d7b7a367417b2b2512b12","title":"Copy Array Items Using slice()","videoUrl":"","content":"\nThe next method we will cover is <code>slice()</code>. <code>slice()</code>, rather than modifying an array, copies, or <em>extracts</em>, a given number of elements to a new array, leaving the array it is called upon untouched. <code>slice()</code> takes only 2 parameters &mdash; the first is the index at which to begin extraction, and the second is the index at which to stop extraction (extraction will occur up to, but not including the element at this index). Consider this:\n<blockquote>let weatherConditions = ['rain', 'snow', 'sleet', 'hail', 'clear'];<br><br>let todaysWeather = weatherConditions.slice(1, 3);<br>// todaysWeather equals ['snow', 'sleet'];<br>// weatherConditions still equals ['rain', 'snow', 'sleet', 'hail', 'clear']<br></blockquote>\nIn effect, we have created a new array by extracting elements from an existing array.\n"},
"587d7b7b367417b2b2512b16" : {"id":"587d7b7b367417b2b2512b16","title":"Create complex multi-dimensional arrays","videoUrl":"","content":"\nAwesome! You have just learned a ton about arrays! This has been a fairly high level overview, and there is plenty more to learn about working with arrays, much of which you will see in later sections. But before moving on to looking at <dfn>Objects</dfn>, lets take one more look, and see how arrays can become a bit more complex than what we have seen in previous challenges.\nOne of the most powerful features when thinking of arrays as data structures, is that arrays can contain, or even be completely made up of other arrays. We have seen arrays that contain arrays in previous challenges, but fairly simple ones. However, arrays can contain an infinite depth of arrays that can contain other arrays, each with their own arbitrary levels of depth, and so on. In this way, an array can very quickly become very complex data structure, known as a <dfn>multi-dimensional</dfn>, or nested array. Consider the following example:\n<blockquote>let nestedArray = [ // top, or first level - the outer most array<br>&nbsp;&nbsp;['deep'], // an array within an array, 2 levels of depth<br>&nbsp;&nbsp;[<br>&nbsp;&nbsp;&nbsp;&nbsp;['deeper'], ['deeper'] // 2 arrays nested 3 levels deep<br>&nbsp;&nbsp;],<br>&nbsp;&nbsp;[<br>&nbsp;&nbsp;&nbsp;&nbsp;[<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;['deepest'], ['deepest'] // 2 arrays nested 4 levels deep<br>&nbsp;&nbsp;&nbsp;&nbsp;],<br>&nbsp;&nbsp;&nbsp;&nbsp;[<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;['deepest-est?'] // an array nested 5 levels deep<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;]<br>&nbsp;&nbsp;&nbsp;&nbsp;]<br>&nbsp;&nbsp;]<br>];</blockquote>\nWhile this example may seem convoluted, this level of complexity is not unheard of, or even unusual, when dealing with large amounts of data.\nHowever, we can still very easily access the deepest levels of an array this complex with bracket notation:\n<blockquote>console.log(nestedArray[2][1][0][0][0]);<br>// logs: deepest-est?</blockquote>\nAnd now that we know where that piece of data is, we can reset it if we need to:\n<blockquote>nestedArray[2][1][0][0][0] = 'deeper still';<br><br>console.log(nestedArray[2][1][0][0][0]);<br>// now logs: deeper still</blockquote>\n"},
"587d7b7d367417b2b2512b1e" : {"id":"587d7b7d367417b2b2512b1e","title":"Generate an Array of All Object Keys with Object.keys()","videoUrl":"","content":"\nWe can also generate an array which contains all the keys stored in an object using the <code>Object.keys()</code> method and passing in an object as the argument. This will return an array with strings representing each property in the object. Again, there will be no specific order to the entries in the array.\n"},
"587d7b7b367417b2b2512b15" : {"id":"587d7b7b367417b2b2512b15","title":"Iterate Through All an Array's Items Using For Loops","videoUrl":"","content":"\nSometimes when working with arrays, it is very handy to be able to iterate through each item to find one or more elements that we might need, or to manipulate an array based on which data items meet a certain set of criteria. JavaScript offers several built in methods that each iterate over arrays in slightly different ways to achieve different results (such as <code>every()</code>, <code>forEach()</code>, <code>map()</code>, etc.), however the technique which is most flexible and offers us the greatest amount of control is a simple <code>for</code> loop.\nConsider the following:\n<blockquote>function greaterThanTen(arr) {<br>&nbsp;&nbsp;let newArr = [];<br>&nbsp;&nbsp;for (let i = 0; i < arr.length; i++) {<br>&nbsp;&nbsp;&nbsp;&nbsp;if (arr[i] > 10) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newArr.push(arr[i]);<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;return newArr;<br>}<br><br>greaterThanTen([2, 12, 8, 14, 80, 0, 1]);<br>// returns [12, 14, 80]</blockquote>\nUsing a <code>for</code> loop, this function iterates through and accesses each element of the array, and subjects it to a simple test that we have created. In this way, we have easily and programmatically determined which data items are greater than <code>10</code>, and returned a new array containing those items.\n"},
"587d7b7d367417b2b2512b1d" : {"id":"587d7b7d367417b2b2512b1d","title":"' Iterate Through the Keys of an Object with a for...in Statement'","videoUrl":"","content":"\nSometimes you may need to iterate through all the keys within an object. This requires a specific syntax in JavaScript called a <dfn>for...in</dfn> statement. For our <code>users</code> object, this could look like:\n<blockquote>for (let user in users) {<br>&nbsp;&nbsp;console.log(user);<br>}<br><br>// logs:<br>Alan<br>Jeff<br>Sarah<br>Ryan</blockquote>\nIn this statement, we defined a variable <code>user</code>, and as you can see, this variable was reset during each iteration to each of the object's keys as the statement looped through the object, resulting in each user's name being printed to the console.\n<strong>NOTE:</strong><br>Objects do not maintain an ordering to stored keys like arrays do; thus a keys position on an object, or the relative order in which it appears, is irrelevant when referencing or accessing that key.\n"},
"587d7b7d367417b2b2512b1f" : {"id":"587d7b7d367417b2b2512b1f","title":"Modify an Array Stored in an Object","videoUrl":"","content":"\nNow you've seen all the basic operations for JavaScript objects. You can add, modify, and remove key-value pairs, check if keys exist, and iterate over all the keys in an object. As you continue learning JavaScript you will see even more versatile applications of objects. Additionally, the optional Advanced Data Structures lessons later in the curriculum also cover the ES6 <dfn>Map</dfn> and <dfn>Set</dfn> objects, both of which are similar to ordinary objects but provide some additional features. Now that you've learned the basics of arrays and objects, you're fully prepared to begin tackling more complex problems using JavaScript!\n"},
"587d7b7c367417b2b2512b19" : {"id":"587d7b7c367417b2b2512b19","title":"Modify an Object Nested Within an Object","videoUrl":"","content":"\nNow let's take a look at a slightly more complex object. Object properties can be nested to an arbitrary depth, and their values can be any type of data supported by JavaScript, including arrays and even other objects. Consider the following:\n<blockquote>let nestedObject = {<br>&nbsp;&nbsp;id: 28802695164,<br>&nbsp;&nbsp;date: 'December 31, 2016',<br>&nbsp;&nbsp;data: {<br>&nbsp;&nbsp;&nbsp;&nbsp;totalUsers: 99,<br>&nbsp;&nbsp;&nbsp;&nbsp;online: 80,<br>&nbsp;&nbsp;&nbsp;&nbsp;onlineStatus: {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;active: 67,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;away: 13<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;}<br>};</blockquote>\n<code>nestedObject</code> has three unique keys: <code>id</code>, whose value is a number, <code>date</code> whose value is a string, and <code>data</code>, whose value is an object which has yet another object nested within it. While structures can quickly become complex, we can still use the same notations to access the information we need.\n"},
"587d78b2367417b2b2512b0f" : {"id":"587d78b2367417b2b2512b0f","title":"Remove Items from an Array with pop() and shift()","videoUrl":"","content":"\nBoth <code>push()</code> and <code>unshift()</code> have corresponding methods that are nearly functional opposites: <code>pop()</code> and <code>shift()</code>. As you may have guessed by now, instead of adding, <code>pop()</code> <em>removes</em> an element from the end of an array, while <code>shift()</code> removes an element from the beginning. The key difference between <code>pop()</code> and <code>shift()</code> and their cousins <code>push()</code> and <code>unshift()</code>, is that neither method takes parameters, and each only allows an array to be modified by a single element at a time.\nLet's take a look:\n<blockquote>let greetings = ['whats up?', 'hello', 'see ya!'];<br><br>greetings.pop();<br>// now equals ['whats up?', 'hello']<br><br>greetings.shift();<br>// now equals ['hello']</blockquote>\nWe can also return the value of the removed element with either method like this:\n<blockquote>let popped = greetings.pop();<br>// returns 'hello'<br>// greetings now equals []</blockquote>\n"},
"587d78b2367417b2b2512b10" : {"id":"587d78b2367417b2b2512b10","title":"Remove Items Using splice()","videoUrl":"","content":"\nOk, so we've learned how to remove elements from the beginning and end of arrays using <code>shift()</code> and <code>pop()</code>, but what if we want to remove an element from somewhere in the middle? Or remove more than one element at once? Well, that's where <code>splice()</code> comes in. <code>splice()</code> allows us to do just that: <strong>remove any number of consecutive elements</strong> from anywhere in an array.\n<code>splice()</code> can take up to 3 parameters, but for now, we'll focus on just the first 2. The first two parameters of <code>splice()</code> are integers which represent indexes, or positions, of the array that <code>splice()</code> is being called upon. And remember, arrays are <em>zero-indexed</em>, so to indicate the first element of an array, we would use <code>0</code>. <code>splice()</code>'s first parameter represents the index on the array from which to begin removing elements, while the second parameter indicates the number of elements to delete. For example:\n<blockquote>let array = ['today', 'was', 'not', 'so', 'great'];<br><br>array.splice(2, 2);<br>// remove 2 elements beginning with the 3rd element<br>// array now equals ['today', 'was', 'great']</blockquote>\n<code>splice()</code> not only modifies the array it's being called on, but it also returns a new array containing the value of the removed elements:\n<blockquote>let array = ['I', 'am', 'feeling', 'really', 'happy'];<br><br>let newArray = array.splice(3, 2);<br>// newArray equals ['really', 'happy']</blockquote>\n"},
"587d7b7e367417b2b2512b20" : {"id":"587d7b7e367417b2b2512b20","title":"Use an Array to Store a Collection of Data","videoUrl":"","content":"\nThe below is an example of the simplest implementation of an array data structure. This is known as a <dfn>one-dimensional array</dfn>, meaning it only has one level, or that it does not have any other arrays nested within it. Notice it contains <dfn>booleans</dfn>, <dfn>strings</dfn>, and <dfn>numbers</dfn>, among other valid JavaScript data types:\n<blockquote>let simpleArray = ['one', 2, 'threeâ, true, false, undefined, null];<br>console.log(simpleArray.length);<br>// logs 7</blockquote>\nAll array's have a length property, which as shown above, can be very easily accessed with the syntax <code>Array.length</code>.\nA more complex implementation of an array can be seen below. This is known as a <dfn>multi-dimensional array</dfn>, or an array that contains other arrays. Notice that this array also contains JavaScript <dfn>objects</dfn>, which we will examine very closely in our next section, but for now, all you need to know is that arrays are also capable of storing complex objects.\n<blockquote>let complexArray = [<br>&nbsp;&nbsp;[<br>&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;one: 1,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;two: 2<br>&nbsp;&nbsp;&nbsp;&nbsp;},<br>&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;three: 3,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;four: 4<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;],<br>&nbsp;&nbsp;[<br>&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a: \"a\",<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b: \"b\"<br>&nbsp;&nbsp;&nbsp;&nbsp;},<br>&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c: \"c\",<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d: âdâ<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;]<br>];</blockquote>\n"},
"587d7b7c367417b2b2512b1b" : {"id":"587d7b7c367417b2b2512b1b","title":"Use the delete Keyword to Remove Object Properties","videoUrl":"","content":"\nNow you know what objects are and their basic features and advantages. In short, they are key-value stores which provide a flexible, intuitive way to structure data, <strong><em>and</em></strong>, they provide very fast lookup time. Throughout the rest of these challenges, we will describe several common operations you can perform on objects so you can become comfortable applying these useful data structures in your programs.\nIn earlier challenges, we have both added to and modified an object's key-value pairs. Here we will see how we can <em>remove</em> a key-value pair from an object.\nLet's revisit our <code>foods</code> object example one last time. If we wanted to remove the <code>apples</code> key, we can remove it by using the <code>delete</code> keyword like this:\n<blockquote>delete foods.apples;</blockquote>\n"},
"56bbb991ad1ed5201cd392ca" : {"id":"56bbb991ad1ed5201cd392ca","title":"Access Array Data with Indexes","videoUrl":"","content":"\nWe can access the data inside arrays using <code>indexes</code>.\nArray indexes are written in the same bracket notation that strings use, except that instead of specifying a character, they are specifying an entry in the array. Like strings, arrays use <dfn>zero-based</dfn> indexing, so the first element in an array is element <code>0</code>.\n<br />\n<strong>Example</strong>\n<blockquote>var array = [50,60,70];<br>array[0]; // equals 50<br>var data = array[1];  // equals 60</blockquote>\n<strong>Note</strong><br>There shouldn't be any spaces between the array name and the square brackets, like <code>array [0]</code>. Although JavaScript is able to process this correctly, this may confuse other programmers reading your code.\n"},
"56533eb9ac21ba0edf2244cd" : {"id":"56533eb9ac21ba0edf2244cd","title":"Accessing Nested Arrays","videoUrl":"","content":"\nAs we have seen in earlier examples, objects can contain both nested objects and nested arrays. Similar to accessing nested objects, Array bracket notation can be chained to access nested arrays.\nHere is an example of how to access a nested array:\n<blockquote>var ourPets = [<br>&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;animalType: \"cat\",<br>&nbsp;&nbsp;&nbsp;&nbsp;names: [<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"Meowzer\",<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"Fluffy\",<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"Kit-Cat\"<br>&nbsp;&nbsp;&nbsp;&nbsp;]<br>&nbsp;&nbsp;},<br>&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;animalType: \"dog\",<br>&nbsp;&nbsp;&nbsp;&nbsp;names: [<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"Spot\",<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"Bowser\",<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"Frankie\"<br>&nbsp;&nbsp;&nbsp;&nbsp;]<br>&nbsp;&nbsp;}<br>];<br>ourPets[0].names[1]; // \"Fluffy\"<br>ourPets[1].names[0]; // \"Spot\"</blockquote>\n"},
"56533eb9ac21ba0edf2244cc" : {"id":"56533eb9ac21ba0edf2244cc","title":"Accessing Nested Objects","videoUrl":"","content":"\nThe sub-properties of objects can be accessed by chaining together the dot or bracket notation.\nHere is a nested object:\n<blockquote>var ourStorage = {<br>&nbsp;&nbsp;\"desk\": {<br>&nbsp;&nbsp;&nbsp;&nbsp;\"drawer\": \"stapler\"<br>&nbsp;&nbsp;},<br>&nbsp;&nbsp;\"cabinet\": {<br>&nbsp;&nbsp;&nbsp;&nbsp;\"top drawer\": { <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"folder1\": \"a file\",<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"folder2\": \"secrets\"<br>&nbsp;&nbsp;&nbsp;&nbsp;},<br>&nbsp;&nbsp;&nbsp;&nbsp;\"bottom drawer\": \"soda\"<br>&nbsp;&nbsp;}<br>};<br>ourStorage.cabinet[\"top drawer\"].folder2;  // \"secrets\"<br>ourStorage.desk.drawer; // \"stapler\"</blockquote>\n"},
"56533eb9ac21ba0edf2244c8" : {"id":"56533eb9ac21ba0edf2244c8","title":"Accessing Object Properties with Bracket Notation","videoUrl":"","content":"\nThe second way to access the properties of an object is bracket notation (<code>[]</code>). If the property of the object you are trying to access has a space in its name, you will need to use bracket notation.\nHowever, you can still use bracket notation on object properties without spaces.\nHere is a sample of using bracket notation to read an object's property:\n<blockquote>var myObj = {<br>&nbsp;&nbsp;\"Space Name\": \"Kirk\",<br>&nbsp;&nbsp;\"More Space\": \"Spock\",<br>&nbsp;&nbsp;\"NoSpace\": \"USS Enterprise\"<br>};<br>myObj[\"Space Name\"]; // Kirk<br>myObj['More Space']; // Spock<br>myObj[\"NoSpace\"];    // USS Enterprise</blockquote>\nNote that property names with spaces in them must be in quotes (single or double).\n"},
"56533eb9ac21ba0edf2244c7" : {"id":"56533eb9ac21ba0edf2244c7","title":"Accessing Object Properties with Dot Notation","videoUrl":"","content":"\nThere are two ways to access the properties of an object: dot notation (<code>.</code>) and bracket notation (<code>[]</code>), similar to an array.\nDot notation is what you use when you know the name of the property you're trying to access ahead of time.\nHere is a sample of using dot notation (<code>.</code>) to read an object's property:\n<blockquote>var myObj = {<br>&nbsp;&nbsp;prop1: \"val1\",<br>&nbsp;&nbsp;prop2: \"val2\"<br>};<br>var prop1val = myObj.prop1; // val1<br>var prop2val = myObj.prop2; // val2</blockquote>\n"},
"56533eb9ac21ba0edf2244c9" : {"id":"56533eb9ac21ba0edf2244c9","title":"Accessing Object Properties with Variables","videoUrl":"","content":"\nAnother use of bracket notation on objects is to access a property which is stored as the value of a variable. This can be very useful for iterating through an object's properties or when accessing a lookup table.\nHere is an example of using a variable to access a property:\n<blockquote>var dogs = {<br>&nbsp;&nbsp;Fido: \"Mutt\",\n  Hunter: \"Doberman\",\n  Snoopie: \"Beagle\"<br>};<br>var myDog = \"Hunter\";<br>var myBreed = dogs[myDog];<br>console.log(myBreed); // \"Doberman\"</blockquote>\nAnother way you can use this concept is when the property's name is collected dynamically during the program execution, as follows:\n<blockquote>var someObj = {<br>&nbsp;&nbsp;propName: \"John\"<br>};<br>function propPrefix(str) {<br>&nbsp;&nbsp;var s = \"prop\";<br>&nbsp;&nbsp;return s + str;<br>}<br>var someProp = propPrefix(\"Name\"); // someProp now holds the value 'propName'<br>console.log(someObj[someProp]); // \"John\"</blockquote>\nNote that we do <em>not</em> use quotes around the variable name when using it to access the property because we are using the <em>value</em> of the variable, not the <em>name</em>.\n"},
"56592a60ddddeae28f7aa8e1" : {"id":"56592a60ddddeae28f7aa8e1","title":"Access Multi-Dimensional Arrays With Indexes","videoUrl":"","content":"\nOne way to think of a <dfn>multi-dimensional</dfn> array, is as an <em>array of arrays</em>. When you use brackets to access your array, the first set of brackets refers to the entries in the outer-most (the first level) array, and each additional pair of brackets refers to the next level of entries inside.\n<strong>Example</strong>\n<blockquote>var arr = [<br>&nbsp;&nbsp;[1,2,3],<br>&nbsp;&nbsp;[4,5,6],<br>&nbsp;&nbsp;[7,8,9],<br>&nbsp;&nbsp;[[10,11,12], 13, 14]<br>];<br>arr[3]; // equals [[10,11,12], 13, 14]<br>arr[3][0]; // equals [10,11,12]<br>arr[3][0][1]; // equals 11</blockquote>\n<strong>Note</strong><br>There shouldn't be any spaces between the array name and the square brackets, like <code>array [0][0]</code> and even this <code>array [0] [0]</code> is not allowed. Although JavaScript is able to process this correctly, this may confuse other programmers reading your code.\n"},
"56533eb9ac21ba0edf2244de" : {"id":"56533eb9ac21ba0edf2244de","title":"Adding a Default Option in Switch Statements","videoUrl":"","content":"\nIn a <code>switch</code> statement you may not be able to specify all possible values as <code>case</code> statements. Instead, you can add the <code>default</code> statement which will be executed if no matching <code>case</code> statements are found. Think of it like the final <code>else</code> statement in an <code>if/else</code> chain.\nA <code>default</code> statement should be the last case.\n<blockquote>switch (num) {<br>&nbsp;&nbsp;case value1:<br>&nbsp;&nbsp;&nbsp;&nbsp;statement1;<br>&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;case value2:<br>&nbsp;&nbsp;&nbsp;&nbsp;statement2;<br>&nbsp;&nbsp;&nbsp;&nbsp;break;<br>...<br>&nbsp;&nbsp;default:<br>&nbsp;&nbsp;&nbsp;&nbsp;defaultStatement;<br>&nbsp;&nbsp;&nbsp;&nbsp;break;<br>}</blockquote>\n"},
"56bbb991ad1ed5201cd392d2" : {"id":"56bbb991ad1ed5201cd392d2","title":"Add New Properties to a JavaScript Object","videoUrl":"","content":"\nYou can add new properties to existing JavaScript objects the same way you would modify them.\nHere's how we would add a <code>\"bark\"</code> property to <code>ourDog</code>:\n<code>ourDog.bark = \"bow-wow\";</code>\nor\n<code>ourDog[\"bark\"] = \"bow-wow\";</code>\nNow when we evaluate <code>ourDog.bark</code>, we'll get his bark, \"bow-wow\".\n"},
"cf1111c1c11feddfaeb3bdef" : {"id":"cf1111c1c11feddfaeb3bdef","title":"Add Two Numbers with JavaScript","videoUrl":"","content":"\n<code>Number</code> is a data type in JavaScript which represents numeric data.\nNow let's try to add two numbers using JavaScript.\nJavaScript uses the <code>+</code> symbol as addition operation when placed between two numbers.\n<strong>Example</strong>\n<blockquote>myVar = 5 + 10; // assigned 15</blockquote>\n"},
"56533eb9ac21ba0edf2244ed" : {"id":"56533eb9ac21ba0edf2244ed","title":"Appending Variables to Strings","videoUrl":"","content":"\nJust as we can build a string over multiple lines out of string <dfn>literals</dfn>, we can also append variables to a string using the plus equals (<code>+=</code>) operator.\n"},
"56533eb9ac21ba0edf2244c3" : {"id":"56533eb9ac21ba0edf2244c3","title":"Assignment with a Returned Value","videoUrl":"","content":"\nIf you'll recall from our discussion of <a href=\"javascript-algorithms-and-data-structures/basic-javascript/storing-values-with-the-assignment-operator\" target=\"_blank\">Storing Values with the Assignment Operator</a>, everything to the right of the equal sign is resolved before the value is assigned. This means we can take the return value of a function and assign it to a variable.\nAssume we have pre-defined a function <code>sum</code> which adds two numbers together, then:\n<code>ourSum = sum(5, 12);</code>\nwill call <code>sum</code> function, which returns a value of <code>17</code> and assigns it to <code>ourSum</code> variable.\n"},
"56bbb991ad1ed5201cd392d0" : {"id":"56bbb991ad1ed5201cd392d0","title":"Build JavaScript Objects","videoUrl":"","content":"\nYou may have heard the term <code>object</code> before.\nObjects are similar to <code>arrays</code>, except that instead of using indexes to access and modify their data, you access the data in objects through what are called <code>properties</code>.\nObjects are useful for storing data in a structured way, and can represent real world objects, like a cat.\nHere's a sample cat object:\n<blockquote>var cat = {<br>&nbsp;&nbsp;\"name\": \"Whiskers\",<br>&nbsp;&nbsp;\"legs\": 4,<br>&nbsp;&nbsp;\"tails\": 1,<br>&nbsp;&nbsp;\"enemies\": [\"Water\", \"Dogs\"]<br>};</blockquote>\nIn this example, all the properties are stored as strings, such as - <code>\"name\"</code>, <code>\"legs\"</code>, and <code>\"tails\"</code>. However, you can also use numbers as properties. You can even omit the quotes for single-word string properties, as follows:\n<blockquote>var anotherObject = {<br>&nbsp;&nbsp;make: \"Ford\",<br>&nbsp;&nbsp;5: \"five\",<br>&nbsp;&nbsp;\"model\": \"focus\"<br>};</blockquote>\nHowever, if your object has any non-string properties, JavaScript will automatically typecast them as strings.\n"},
"56533eb9ac21ba0edf2244dc" : {"id":"56533eb9ac21ba0edf2244dc","title":"Chaining If Else Statements","videoUrl":"","content":"\n<code>if/else</code> statements can be chained together for complex logic. Here is <dfn>pseudocode</dfn> of multiple chained <code>if</code> / <code>else if</code> statements:\n<blockquote>if (<em>condition1</em>) {<br>&nbsp;&nbsp;<em>statement1</em><br>} else if (<em>condition2</em>) {<br>&nbsp;&nbsp;<em>statement2</em><br>} else if (<em>condition3</em>) {<br>&nbsp;&nbsp;<em>statement3</em><br>. . .<br>} else {<br>&nbsp;&nbsp;<em>statementN</em><br>}</blockquote>\n"},
"bd7123c9c441eddfaeb4bdef" : {"id":"bd7123c9c441eddfaeb4bdef","title":"Comment Your JavaScript Code","videoUrl":"","content":"\nComments are lines of code that JavaScript will intentionally ignore. Comments are a great way to leave notes to yourself and to other people who will later need to figure out what that code does.\nThere are two ways to write comments in JavaScript:\nUsing <code>//</code> will tell JavaScript to ignore the remainder of the text on the current line:\n<blockquote>// This is an in-line comment.</blockquote>\nYou can make a multi-line comment beginning with <code>/*</code> and ending with <code>*/</code>:\n<blockquote>/* This is a<br>multi-line comment */</blockquote>\n<strong>Best Practice</strong><br>As you write code, you should regularly add comments to clarify the function of parts of your code. Good commenting can help communicate the intent of your code&mdash;both for others <em>and</em> for your future self.\n"},
"56533eb9ac21ba0edf2244d8" : {"id":"56533eb9ac21ba0edf2244d8","title":"Comparisons with the Logical And Operator","videoUrl":"","content":"\nSometimes you will need to test more than one thing at a time. The <dfn>logical and</dfn> operator (<code>&&</code>) returns <code>true</code> if and only if the <dfn>operands</dfn> to the left and right of it are true.\nThe same effect could be achieved by nesting an if statement inside another if:\n<blockquote>if (num > 5) {<br>&nbsp;&nbsp;if (num < 10) {<br>&nbsp;&nbsp;&nbsp;&nbsp;return \"Yes\";<br>&nbsp;&nbsp;}<br>}<br>return \"No\";</blockquote>\nwill only return \"Yes\" if <code>num</code> is greater than <code>5</code> and less than <code>10</code>. The same logic can be written as:\n<blockquote>if (num > 5 && num < 10) {<br>&nbsp;&nbsp;return \"Yes\";<br>}<br>return \"No\";</blockquote>\n"},
"56533eb9ac21ba0edf2244d9" : {"id":"56533eb9ac21ba0edf2244d9","title":"Comparisons with the Logical Or Operator","videoUrl":"","content":"\nThe <dfn>logical or</dfn> operator (<code>||</code>) returns <code>true</code> if either of the <dfn>operands</dfn> is <code>true</code>. Otherwise, it returns <code>false</code>.\nThe <dfn>logical or</dfn> operator is composed of two pipe symbols (<code>|</code>). This can typically be found between your Backspace and Enter keys.\nThe pattern below should look familiar from prior waypoints:\n<blockquote>if (num > 10) {<br>&nbsp;&nbsp;return \"No\";<br>}<br>if (num < 5) {<br>&nbsp;&nbsp;return \"No\";<br>}<br>return \"Yes\";</blockquote>\nwill return \"Yes\" only if <code>num</code> is between <code>5</code> and <code>10</code> (5 and 10 included). The same logic can be written as:\n<blockquote>if (num > 10 || num < 5) {<br>&nbsp;&nbsp;return \"No\";<br>}<br>return \"Yes\";</blockquote>\n"},
"56533eb9ac21ba0edf2244d0" : {"id":"56533eb9ac21ba0edf2244d0","title":"Comparison with the Equality Operator","videoUrl":"","content":"\nThere are many <dfn>Comparison Operators</dfn> in JavaScript. All of these operators return a boolean <code>true</code> or <code>false</code> value.\nThe most basic operator is the equality operator <code>==</code>. The equality operator compares two values and returns <code>true</code> if they're equivalent or <code>false</code> if they are not. Note that equality is different from assignment (<code>=</code>), which assigns the value at the right of the operator to a variable in the left.\n<blockquote>function equalityTest(myVal) {<br>&nbsp;&nbsp;if (myVal == 10) {<br>&nbsp;&nbsp;&nbsp;&nbsp; return \"Equal\";<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;return \"Not Equal\";<br>}</blockquote>\nIf <code>myVal</code> is equal to <code>10</code>, the equality operator returns <code>true</code>, so the code in the curly braces will execute, and the function will return <code>\"Equal\"</code>. Otherwise, the function will return <code>\"Not Equal\"</code>.\nIn order for JavaScript to compare two different <code>data types</code> (for example, <code>numbers</code> and <code>strings</code>), it must convert one type to another. This is known as \"Type Coercion\". Once it does, however, it can compare terms as follows:\n<blockquote>1   ==  1    // true<br>1   ==  2    // false<br>1   == '1'   // true<br>\"3\"  ==  3    // true</blockquote>\n"},
"56533eb9ac21ba0edf2244d4" : {"id":"56533eb9ac21ba0edf2244d4","title":"Comparison with the Greater Than Operator","videoUrl":"","content":"\nThe greater than operator (<code>&gt;</code>) compares the values of two numbers. If the number to the left is greater than the number to the right, it returns <code>true</code>. Otherwise, it returns <code>false</code>.\nLike the equality operator, greater than operator will convert data types of values while comparing.\n<strong>Examples</strong>\n<blockquote> 5 > 3   // true<br> 7 > '3' // true<br> 2 > 3   // false<br>'1' > 9  // false</blockquote>\n"},
"56533eb9ac21ba0edf2244d5" : {"id":"56533eb9ac21ba0edf2244d5","title":"Comparison with the Greater Than Or Equal To Operator","videoUrl":"","content":"\nThe <code>greater than or equal to</code> operator (<code>&gt;=</code>) compares the values of two numbers. If the number to the left is greater than or equal to the number to the right, it returns <code>true</code>. Otherwise, it returns <code>false</code>.\nLike the equality operator, <code>greater than or equal to</code> operator will convert data types while comparing.\n<strong>Examples</strong>\n<blockquote> 6  >=  6  // true<br> 7  >= '3' // true<br> 2  >=  3  // false<br>'7' >=  9  // false</blockquote>\n"},
"56533eb9ac21ba0edf2244d2" : {"id":"56533eb9ac21ba0edf2244d2","title":"Comparison with the Inequality Operator","videoUrl":"","content":"\nThe inequality operator (<code>!=</code>) is the opposite of the equality operator. It means \"Not Equal\" and returns <code>false</code> where equality would return <code>true</code> and <em>vice versa</em>. Like the equality operator, the inequality operator will convert data types of values while comparing.\n<strong>Examples</strong>\n<blockquote>1 != 2      // true<br>1 != \"1\"    // false<br>1 != '1'    // false<br>1 != true   // false<br>0 != false  // false</blockquote>\n"},
"56533eb9ac21ba0edf2244d6" : {"id":"56533eb9ac21ba0edf2244d6","title":"Comparison with the Less Than Operator","videoUrl":"","content":"\nThe <dfn>less than</dfn> operator (<code>&lt;</code>) compares the values of two numbers. If the number to the left is less than the number to the right, it returns <code>true</code>. Otherwise, it returns <code>false</code>. Like the equality operator, <dfn>less than</dfn> operator converts data types while comparing.\n<strong>Examples</strong>\n<blockquote>2 &lt; 5  // true<br>'3' &lt; 7  // true<br>5 &lt; 5  // false<br>3 &lt; 2  // false<br>'8' &lt; 4  // false</blockquote>\n"},
"56533eb9ac21ba0edf2244d7" : {"id":"56533eb9ac21ba0edf2244d7","title":"Comparison with the Less Than Or Equal To Operator","videoUrl":"","content":"\nThe <code>less than or equal to</code> operator (<code>&lt;=</code>) compares the values of two numbers. If the number to the left is less than or equal to the number to the right, it returns <code>true</code>. If the number on the left is greater than the number on the right, it returns <code>false</code>. Like the equality operator, <code>less than or equal to</code> converts data types.\n<strong>Examples</strong>\n<blockquote>4 &lt;= 5  // true<br>'7' &lt;= 7  // true<br>5 &lt;= 5  // true<br>3 &lt;= 2  // false<br>'8' &lt;= 4  // false</blockquote>\n"},
"56533eb9ac21ba0edf2244d1" : {"id":"56533eb9ac21ba0edf2244d1","title":"Comparison with the Strict Equality Operator","videoUrl":"","content":"\nStrict equality (<code>===</code>) is the counterpart to the equality operator (<code>==</code>). However, unlike the equality operator, which attempts to convert both values being compared to a common type, the strict equality operator does not perform a type conversion.\nIf the values being compared have different types, they are considered unequal, and the strict equality operator will return false.\n<strong>Examples</strong>\n<blockquote>3 === 3   // true<br>3 === '3' // false</blockquote>\nIn the second example, <code>3</code> is a <code>Number</code> type and <code>'3'</code> is a <code>String</code> type.\n"},
"56533eb9ac21ba0edf2244d3" : {"id":"56533eb9ac21ba0edf2244d3","title":"Comparison with the Strict Inequality Operator","videoUrl":"","content":"\nThe strict inequality operator (<code>!==</code>) is the logical opposite of the strict equality operator. It means \"Strictly Not Equal\" and returns <code>false</code> where strict equality would return <code>true</code> and <em>vice versa</em>. Strict inequality will not convert data types.\n<strong>Examples</strong>\n<blockquote>3 !== 3   // false<br>3 !== '3' // true<br>4 !== 3   // true</blockquote>\n"},
"56533eb9ac21ba0edf2244af" : {"id":"56533eb9ac21ba0edf2244af","title":"Compound Assignment With Augmented Addition","videoUrl":"","content":"\nIn programming, it is common to use assignments to modify the contents of a variable. Remember that everything to the right of the equals sign is evaluated first, so we can say:\n<code>myVar = myVar + 5;</code>\nto add <code>5</code> to <code>myVar</code>. Since this is such a common pattern, there are operators which do both a mathematical operation and assignment in one step.\nOne such operator is the <code>+=</code> operator.\n<blockquote>var myVar = 1;<br>myVar += 5;<br>console.log(myVar); // Returns 6</blockquote>\n"},
"56533eb9ac21ba0edf2244b2" : {"id":"56533eb9ac21ba0edf2244b2","title":"Compound Assignment With Augmented Division","videoUrl":"","content":"\nThe <code>/=</code> operator divides a variable by another number.\n<code>myVar = myVar / 5;</code>\nWill divide <code>myVar</code> by <code>5</code>. This can be rewritten as:\n<code>myVar /= 5;</code>\n"},
"56533eb9ac21ba0edf2244b1" : {"id":"56533eb9ac21ba0edf2244b1","title":"Compound Assignment With Augmented Multiplication","videoUrl":"","content":"\nThe <code>*=</code> operator multiplies a variable by a number.\n<code>myVar = myVar * 5;</code>\nwill multiply <code>myVar</code> by <code>5</code>. This can be rewritten as:\n<code>myVar *= 5;</code>\n"},
"56533eb9ac21ba0edf2244b0" : {"id":"56533eb9ac21ba0edf2244b0","title":"Compound Assignment With Augmented Subtraction","videoUrl":"","content":"\nLike the <code>+=</code> operator, <code>-=</code> subtracts a number from a variable.\n<code>myVar = myVar - 5;</code>\nwill subtract <code>5</code> from <code>myVar</code>. This can be rewritten as:\n<code>myVar -= 5;</code>\n"},
"56533eb9ac21ba0edf2244b7" : {"id":"56533eb9ac21ba0edf2244b7","title":"Concatenating Strings with Plus Operator","videoUrl":"","content":"\nIn JavaScript, when the <code>+</code> operator is used with a <code>String</code> value, it is called the <dfn>concatenation</dfn> operator. You can build a new string out of other strings by <dfn>concatenating</dfn> them together.\n<strong>Example</strong>\n<blockquote>'My name is Alan,' + ' I concatenate.'</blockquote>\n<strong>Note</strong><br>Watch out for spaces. Concatenation does not add spaces between concatenated strings, so you'll need to add them yourself.\n"},
"56533eb9ac21ba0edf2244b8" : {"id":"56533eb9ac21ba0edf2244b8","title":"Concatenating Strings with the Plus Equals Operator","videoUrl":"","content":"\nWe can also use the <code>+=</code> operator to <dfn>concatenate</dfn> a string onto the end of an existing string variable. This can be very helpful to break a long string over several lines.\n<strong>Note</strong><br>Watch out for spaces. Concatenation does not add spaces between concatenated strings, so you'll need to add them yourself.\n"},
"56533eb9ac21ba0edf2244b9" : {"id":"56533eb9ac21ba0edf2244b9","title":"Constructing Strings with Variables","videoUrl":"","content":"\nSometimes you will need to build a string, <a href=\"https://en.wikipedia.org/wiki/Mad_Libs\" target=\"_blank\">Mad Libs</a> style. By using the concatenation operator (<code>+</code>), you can insert one or more variables into a string you're building.\n"},
"56105e7b514f539506016a5e" : {"id":"56105e7b514f539506016a5e","title":"Count Backwards With a For Loop","videoUrl":"","content":"\nA for loop can also count backwards, so long as we can define the right conditions.\nIn order to count backwards by twos, we'll need to change our <code>initialization</code>, <code>condition</code>, and <code>final-expression</code>.\nWe'll start at <code>i = 10</code> and loop while <code>i &#62; 0</code>. We'll decrement <code>i</code> by 2 each loop with <code>i -= 2</code>.\n<blockquote>var ourArray = [];<br>for (var i=10; i &#62; 0; i-=2) {<br>&nbsp;&nbsp;ourArray.push(i);<br>}</blockquote>\n<code>ourArray</code> will now contain <code>[10,8,6,4,2]</code>.\nLet's change our <code>initialization</code> and <code>final-expression</code> so we can count backward by twos by odd numbers.\n"},
"565bbe00e9cc8ac0725390f4" : {"id":"565bbe00e9cc8ac0725390f4","title":"Counting Cards","videoUrl":"","content":"\nIn the casino game Blackjack, a player can gain an advantage over the house by keeping track of the relative number of high and low cards remaining in the deck. This is called <a href='https://en.wikipedia.org/wiki/Card_counting' target='_blank'>Card Counting</a>.\nHaving more high cards remaining in the deck favors the player. Each card is assigned a value according to the table below. When the count is positive, the player should bet high. When the count is zero or negative, the player should bet low.\n<table class=\"table table-striped\"><thead><tr><th>Count Change</th><th>Cards</th></tr></thead><tbody><tr><td>+1</td><td>2, 3, 4, 5, 6</td></tr><tr><td>0</td><td>7, 8, 9</td></tr><tr><td>-1</td><td>10, 'J', 'Q', 'K', 'A'</td></tr></tbody></table>\nYou will write a card counting function. It will receive a <code>card</code> parameter, which can be a number or a string, and increment or decrement the global <code>count</code> variable according to the card's value (see table). The function will then return a string with the current count and the string <code>Bet</code> if the count is positive, or <code>Hold</code> if the count is zero or negative. The current count and the player's decision (<code>Bet</code> or <code>Hold</code>) should be separated by a single space.\n<strong>Example Output</strong><br><code>-3 Hold</code><br><code>5 Bet</code>\n<strong>Hint</strong><br>Do NOT reset <code>count</code> to 0 when value is 7, 8, or 9.<br>Do NOT return an array.<br>Do NOT include quotes (single or double) in the output.\n"},
"cf1391c1c11feddfaeb4bdef" : {"id":"cf1391c1c11feddfaeb4bdef","title":"Create Decimal Numbers with JavaScript","videoUrl":"","content":"\nWe can store decimal numbers in variables too. Decimal numbers are sometimes referred to as <dfn>floating point</dfn> numbers or <dfn>floats</dfn>.\n<strong>Note</strong><br>Not all real numbers can accurately be represented in <dfn>floating point</dfn>. This can lead to rounding errors. <a href=\"https://en.wikipedia.org/wiki/Floating_point#Accuracy_problems\" target=\"_blank\">Details Here</a>.\n"},
"bd7123c9c443eddfaeb5bdef" : {"id":"bd7123c9c443eddfaeb5bdef","title":"Declare JavaScript Variables","videoUrl":"","content":"\nIn computer science, <dfn>data</dfn> is anything that is meaningful to the computer. JavaScript provides seven different <dfn>data types</dfn> which are <code>undefined</code>, <code>null</code>, <code>boolean</code>, <code>string</code>, <code>symbol</code>, <code>number</code>, and <code>object</code>.\nFor example, computers distinguish between numbers, such as the number <code>12</code>, and <code>strings</code>, such as <code>\"12\"</code>, <code>\"dog\"</code>, or <code>\"123 cats\"</code>, which are collections of characters. Computers can perform mathematical operations on a number, but not on a string.\n<dfn>Variables</dfn> allow computers to store and manipulate data in a dynamic fashion. They do this by using a \"label\" to point to the data rather than using the data itself. Any of the seven data types may be stored in a variable.\n<code>Variables</code> are similar to the x and y variables you use in mathematics, which means they're a simple name to represent the data we want to refer to. Computer <code>variables</code> differ from mathematical variables in that they can store different values at different times.\nWe tell JavaScript to create or <dfn>declare</dfn> a variable by putting the keyword <code>var</code> in front of it, like so:\n<blockquote>var ourName;</blockquote>\ncreates a <code>variable</code> called <code>ourName</code>. In JavaScript we end statements with semicolons.\n<code>Variable</code> names can be made up of numbers, letters, and <code>$</code> or <code>_</code>, but may not contain spaces or start with a number.\n"},
"bd7123c9c444eddfaeb5bdef" : {"id":"bd7123c9c444eddfaeb5bdef","title":"Declare String Variables","videoUrl":"","content":"\nPreviously we have used the code\n<code>var myName = \"your name\";</code>\n<code>\"your name\"</code> is called a <dfn>string</dfn> <dfn>literal</dfn>. It is a string because it is a series of zero or more characters enclosed in single or double quotes.\n"},
"56533eb9ac21ba0edf2244ad" : {"id":"56533eb9ac21ba0edf2244ad","title":"Decrement a Number with JavaScript","videoUrl":"","content":"\nYou can easily <dfn>decrement</dfn> or decrease a variable by one with the <code>--</code> operator.\n<code>i--;</code>\nis the equivalent of\n<code>i = i - 1;</code>\n<strong>Note</strong><br>The entire line becomes <code>i--;</code>, eliminating the need for the equal sign.\n"},
"56bbb991ad1ed5201cd392d3" : {"id":"56bbb991ad1ed5201cd392d3","title":"Delete Properties from a JavaScript Object","videoUrl":"","content":"\nWe can also delete properties from objects like this:\n<code>delete ourDog.bark;</code>\n"},
"bd7993c9ca9feddfaeb7bdef" : {"id":"bd7993c9ca9feddfaeb7bdef","title":"Divide One Decimal by Another with JavaScript","videoUrl":"","content":"\nNow let's divide one decimal by another.\n"},
"cf1111c1c11feddfaeb6bdef" : {"id":"cf1111c1c11feddfaeb6bdef","title":"Divide One Number by Another with JavaScript","videoUrl":"","content":"\nWe can also divide one number by another.\nJavaScript uses the <code>/</code> symbol for division.\n\n<strong>Example</strong>\n<blockquote>myVar = 16 / 2; // assigned 8</blockquote>\n\n"},
"56533eb9ac21ba0edf2244b6" : {"id":"56533eb9ac21ba0edf2244b6","title":"Escape Sequences in Strings","videoUrl":"","content":"\nQuotes are not the only characters that can be <dfn>escaped</dfn> inside a string. There are two reasons to use escaping characters: First is to allow you to use characters you might not otherwise be able to type out, such as a backspace. Second is to allow you to represent multiple quotes in a string without JavaScript misinterpreting what you mean. We learned this in the previous challenge.\n<table class=\"table table-striped\"><thead><tr><th>Code</th><th>Output</th></tr></thead><tbody><tr><td><code>\\'</code></td><td>single quote</td></tr><tr><td><code>\\\"</code></td><td>double quote</td></tr><tr><td><code>\\\\</code></td><td>backslash</td></tr><tr><td><code>\\n</code></td><td>newline</td></tr><tr><td><code>\\r</code></td><td>carriage return</td></tr><tr><td><code>\\t</code></td><td>tab</td></tr><tr><td><code>\\b</code></td><td>backspace</td></tr><tr><td><code>\\f</code></td><td>form feed</td></tr></tbody></table>\n<em>Note that the backslash itself must be escaped in order to display as a backslash.</em>\n"},
"56533eb9ac21ba0edf2244b5" : {"id":"56533eb9ac21ba0edf2244b5","title":"Escaping Literal Quotes in Strings","videoUrl":"","content":"\nWhen you are defining a string you must start and end with a single or double quote. What happens when you need a literal quote: <code>\"</code> or <code>'</code> inside of your string?\nIn JavaScript, you can <dfn>escape</dfn> a quote from considering it as an end of string quote by placing a <dfn>backslash</dfn> (<code>\\</code>) in front of the quote.\n<code>var sampleStr = \"Alan said, \\\"Peter is learning JavaScript\\\".\";</code>\nThis signals to JavaScript that the following quote is not the end of the string, but should instead appear inside the string. So if you were to print this to the console, you would get:\n<code>Alan said, \"Peter is learning JavaScript\".</code>\n"},
"56533eb9ac21ba0edf2244ae" : {"id":"56533eb9ac21ba0edf2244ae","title":"Finding a Remainder in JavaScript","videoUrl":"","content":"\nThe <dfn>remainder</dfn> operator <code>%</code> gives the remainder of the division of two numbers.\n<strong>Example</strong>\n<blockquote>5 % 2 = 1 because<br>Math.floor(5 / 2) = 2 (Quotient)<br>2 * 2 = 4<br>5 - 4 = 1 (Remainder)</blockquote>\n<strong>Usage</strong><br>In mathematics, a number can be checked to be even or odd by checking the remainder of the division of the number by <code>2</code>.\n<blockquote>17 % 2 = 1 (17 is Odd)<br>48 % 2 = 0 (48 is Even)</blockquote>\n<strong>Note</strong><br>The <dfn>remainder</dfn> operator is sometimes incorrectly referred to as  the \"modulus\" operator. It is very similar to modulus, but does not work properly with negative numbers.\n"},
"bd7123c9c448eddfaeb5bdef" : {"id":"bd7123c9c448eddfaeb5bdef","title":"Find the Length of a String","videoUrl":"","content":"\nYou can find the length of a <code>String</code> value by writing <code>.length</code> after the string variable or string literal.\n<code>\"Alan Peter\".length; // 10</code>\nFor example, if we created a variable <code>var firstName = \"Charles\"</code>, we could find out how long the string <code>\"Charles\"</code> is by using the <code>firstName.length</code> property.\n"},
"cf1111c1c11feddfaeb9bdef" : {"id":"cf1111c1c11feddfaeb9bdef","title":"Generate Random Fractions with JavaScript","videoUrl":"","content":"\nRandom numbers are useful for creating random behavior.\nJavaScript has a <code>Math.random()</code> function that generates a random decimal number between <code>0</code> (inclusive) and not quite up to <code>1</code> (exclusive). Thus <code>Math.random()</code> can return a <code>0</code> but never quite return a <code>1</code>\n<strong>Note</strong><br>Like <a href='storing-values-with-the-assignment-operator' target='_blank'>Storing Values with the Equal Operator</a>, all function calls will be resolved before the <code>return</code> executes, so we can <code>return</code> the value of the <code>Math.random()</code> function.\n"},
"cf1111c1c12feddfaeb2bdef" : {"id":"cf1111c1c12feddfaeb2bdef","title":"Generate Random Whole Numbers within a Range","videoUrl":"","content":"\nInstead of generating a random number between zero and a given number like we did before, we can generate a random number that falls within a range of two specific numbers.\nTo do this, we'll define a minimum number <code>min</code> and a maximum number <code>max</code>.\nHere's the formula we'll use. Take a moment to read it and try to understand what this code is doing:\n<code>Math.floor(Math.random() * (max - min + 1)) + min</code>\n"},
"cf1111c1c12feddfaeb1bdef" : {"id":"cf1111c1c12feddfaeb1bdef","title":"Generate Random Whole Numbers with JavaScript","videoUrl":"","content":"\nIt's great that we can generate random decimal numbers, but it's even more useful if we use it to generate random whole numbers.\n<ol><li>Use <code>Math.random()</code> to generate a random decimal.</li><li>Multiply that random decimal by <code>20</code>.</li><li>Use another function, <code>Math.floor()</code> to round the number down to its nearest whole number.</li></ol>\nRemember that <code>Math.random()</code> can never quite return a <code>1</code> and, because we're rounding down, it's impossible to actually get <code>20</code>. This technique will give us a whole number between <code>0</code> and <code>19</code>.\nPutting everything together, this is what our code looks like:\n<code>Math.floor(Math.random() * 20);</code>\nWe are calling <code>Math.random()</code>, multiplying the result by 20, then passing the value to <code>Math.floor()</code> function to round the value down to the nearest whole number.\n"},
"56533eb9ac21ba0edf2244be" : {"id":"56533eb9ac21ba0edf2244be","title":"Global Scope and Functions","videoUrl":"","content":"\nIn JavaScript, <dfn>scope</dfn> refers to the visibility of variables. Variables which are defined outside of a function block have <dfn>Global</dfn> scope. This means, they can be seen everywhere in your JavaScript code.\nVariables which are used without the <code>var</code> keyword are automatically created in the <code>global</code> scope. This can create unintended consequences elsewhere in your code or when running a function again. You should always declare your variables with <code>var</code>.\n"},
"56533eb9ac21ba0edf2244c0" : {"id":"56533eb9ac21ba0edf2244c0","title":"Global vs. Local Scope in Functions","videoUrl":"","content":"\nIt is possible to have both <dfn>local</dfn> and <dfn>global</dfn> variables with the same name. When you do this, the <code>local</code> variable takes precedence over the <code>global</code> variable.\nIn this example:\n<blockquote>var someVar = \"Hat\";<br>function myFun() {<br>&nbsp;&nbsp;var someVar = \"Head\";<br>&nbsp;&nbsp;return someVar;<br>}</blockquote>\nThe function <code>myFun</code> will return <code>\"Head\"</code> because the <code>local</code> version of the variable is present.\n"},
"5664820f61c48e80c9fa476c" : {"id":"5664820f61c48e80c9fa476c","title":"Golf Code","videoUrl":"","content":"\nIn the game of <a href=\"https://en.wikipedia.org/wiki/Golf\" target=\"_blank\">golf</a> each hole has a <code>par</code> meaning the average number of <code>strokes</code> a golfer is expected to make in order to sink the ball in a hole to complete the play. Depending on how far above or below <code>par</code> your <code>strokes</code> are, there is a different nickname.\nYour function will be passed <code>par</code> and <code>strokes</code> arguments. Return the correct string according to this table which lists the strokes in order of priority; top (highest) to bottom (lowest):\n<table class=\"table table-striped\"><thead><tr><th>Strokes</th><th>Return</th></tr></thead><tbody><tr><td>1</td><td>\"Hole-in-one!\"</td></tr><tr><td>&lt;= par - 2</td><td>\"Eagle\"</td></tr><tr><td>par - 1</td><td>\"Birdie\"</td></tr><tr><td>par</td><td>\"Par\"</td></tr><tr><td>par + 1</td><td>\"Bogey\"</td></tr><tr><td>par + 2</td><td>\"Double Bogey\"</td></tr><tr><td>&gt;= par + 3</td><td>\"Go Home!\"</td></tr></tbody></table>\n<code>par</code> and <code>strokes</code> will always be numeric and positive. We have added an array of all the names for your convenience.\n"},
"56533eb9ac21ba0edf2244ac" : {"id":"56533eb9ac21ba0edf2244ac","title":"Increment a Number with JavaScript","videoUrl":"","content":"\nYou can easily <dfn>increment</dfn> or add one to a variable with the <code>++</code> operator.\n<code>i++;</code>\nis the equivalent of\n<code>i = i + 1;</code>\n<strong>Note</strong><br>The entire line becomes <code>i++;</code>, eliminating the need for the equal sign.\n"},
"56533eb9ac21ba0edf2244a9" : {"id":"56533eb9ac21ba0edf2244a9","title":"Initializing Variables with the Assignment Operator","videoUrl":"","content":"\nIt is common to <dfn>initialize</dfn> a variable to an initial value in the same line as it is declared.\n<code>var myVar = 0;</code>\nCreates a new variable called <code>myVar</code> and assigns it an initial value of <code>0</code>.\n"},
"56533eb9ac21ba0edf2244db" : {"id":"56533eb9ac21ba0edf2244db","title":"Introducing Else If Statements","videoUrl":"","content":"\nIf you have multiple conditions that need to be addressed, you can chain <code>if</code> statements together with <code>else if</code> statements.\n<blockquote>if (num > 15) {<br>&nbsp;&nbsp;return \"Bigger than 15\";<br>} else if (num < 5) {<br>&nbsp;&nbsp;return \"Smaller than 5\";<br>} else {<br>&nbsp;&nbsp;return \"Between 5 and 15\";<br>}</blockquote>\n"},
"56533eb9ac21ba0edf2244da" : {"id":"56533eb9ac21ba0edf2244da","title":"Introducing Else Statements","videoUrl":"","content":"\nWhen a condition for an <code>if</code> statement is true, the block of code following it is executed. What about when that condition is false?  Normally nothing would happen. With an <code>else</code> statement, an alternate block of code can be executed.\n<blockquote>if (num > 10) {<br>&nbsp;&nbsp;return \"Bigger than 10\";<br>} else {<br>&nbsp;&nbsp;return \"10 or Less\";<br>}</blockquote>\n"},
"56104e9e514f539506016a5c" : {"id":"56104e9e514f539506016a5c","title":"Iterate Odd Numbers With a For Loop","videoUrl":"","content":"\nFor loops don't have to iterate one at a time. By changing our <code>final-expression</code>, we can count by even numbers.\nWe'll start at <code>i = 0</code> and loop while <code>i &#60; 10</code>. We'll increment <code>i</code> by 2 each loop with <code>i += 2</code>.\n<blockquote>var ourArray = [];<br>for (var i = 0; i &#60; 10; i += 2) {<br>&nbsp;&nbsp;ourArray.push(i);<br>}</blockquote>\n<code>ourArray</code> will now contain <code>[0,2,4,6,8]</code>.\nLet's change our <code>initialization</code> so we can count by odd numbers.\n"},
"5675e877dbd60be8ad28edc6" : {"id":"5675e877dbd60be8ad28edc6","title":"Iterate Through an Array with a For Loop","videoUrl":"","content":"\nA common task in JavaScript is to iterate through the contents of an array. One way to do that is with a <code>for</code> loop. This code will output each element of the array <code>arr</code> to the console:\n<blockquote>var arr = [10,9,8,7,6];<br>for (var i = 0; i < arr.length; i++) {<br>&nbsp;&nbsp; console.log(arr[i]);<br>}</blockquote>\nRemember that Arrays have zero-based numbering, which means the last index of the array is length - 1. Our <dfn>condition</dfn> for this loop is <code>i < arr.length</code>, which stops when <code>i</code> is at length - 1.\n"},
"5a2efd662fb457916e1fe604" : {"id":"5a2efd662fb457916e1fe604","title":"Iterate with JavaScript Do...While Loops","videoUrl":"","content":"\nYou can run the same code multiple times by using a loop.\nThe next type of loop you will learn is called a \"<code>do...while</code>\" loop because it first will \"<code>do</code>\" one pass of the code inside the loop no matter what, and then it runs \"<code>while</code>\" a specified condition is true and stops once that condition is no longer true. Let's look at an example.\n<blockquote>var ourArray = [];<br>var i = 0;<br>do {<br>&nbsp;&nbsp;ourArray.push(i);<br>&nbsp;&nbsp;i++;<br>} while (i < 5);</blockquote>\nThis behaves just as you would expect with any other type of loop, and the resulting array will look like <code>[0, 1, 2, 3, 4]</code>. However, what makes the <code>do...while</code> different from other loops is how it behaves when the condition fails on the first check. Let's see this in action.\nHere is a regular while loop that will run the code in the loop as long as <code>i < 5</code>.\n<blockquote>var ourArray = []; <br>var i = 5;<br>while (i < 5) {<br>&nbsp;&nbsp;ourArray.push(i);<br>&nbsp;&nbsp;i++;<br>}</blockquote>\nNotice that we initialize the value of <code>i</code> to be 5. When we execute the next line, we notice that <code>i</code> is not less than 5. So we do not execute the code inside the loop. The result is that <code>ourArray</code> will end up with nothing added to it, so it will still look like this <code>[]</code> when all the code in the example above finishes running.\nNow, take a look at a <code>do...while</code> loop.\n<blockquote>var ourArray = []; <br>var i = 5;<br>do {<br>&nbsp;&nbsp;ourArray.push(i);<br>&nbsp;&nbsp;i++;<br>} while (i < 5);</blockquote>\nIn this case, we initialize the value of <code>i</code> as 5, just like we did with the while loop. When we get to the next line, there is no check for the value of <code>i</code>, so we go to the code inside the curly braces and execute it. We will add one element to the array and increment <code>i</code> before we get to the condition check. Then, when we get to checking if <code>i < 5</code> see that <code>i</code> is now 6, which fails the conditional check. So we exit the loop and are done. At the end of the above example, the value of <code>ourArray</code> is <code>[5]</code>.\nEssentially, a <code>do...while</code> loop ensures that the code inside the loop will run at least once.\nLet's try getting a <code>do...while</code> loop to work by pushing values to an array.\n"},
"cf1111c1c11feddfaeb5bdef" : {"id":"cf1111c1c11feddfaeb5bdef","title":"Iterate with JavaScript For Loops","videoUrl":"","content":"\nYou can run the same code multiple times by using a loop.\nThe most common type of JavaScript loop is called a \"<code>for loop</code>\" because it runs \"for\" a specific number of times.\nFor loops are declared with three optional expressions separated by semicolons:\n<code>for ([initialization]; [condition]; [final-expression])</code>\nThe <code>initialization</code> statement is executed one time only before the loop starts. It is typically used to define and setup your loop variable.\nThe <code>condition</code> statement is evaluated at the beginning of every loop iteration and will continue as long as it evaluates to <code>true</code>. When <code>condition</code> is <code>false</code> at the start of the iteration, the loop will stop executing. This means if <code>condition</code> starts as <code>false</code>, your loop will never execute.\nThe <code>final-expression</code> is executed at the end of each loop iteration, prior to the next <code>condition</code> check and is usually used to increment or decrement your loop counter.\nIn the following example we initialize with <code>i = 0</code> and iterate while our condition <code>i &#60; 5</code> is true. We'll increment <code>i</code> by <code>1</code> in each loop iteration with <code>i++</code> as our <code>final-expression</code>.\n<blockquote>var ourArray = [];<br>for (var i = 0; i &#60; 5; i++) {<br>&nbsp;&nbsp;ourArray.push(i);<br>}</blockquote>\n<code>ourArray</code> will now contain <code>[0,1,2,3,4]</code>.\n"},
"cf1111c1c11feddfaeb1bdef" : {"id":"cf1111c1c11feddfaeb1bdef","title":"Iterate with JavaScript While Loops","videoUrl":"","content":"\nYou can run the same code multiple times by using a loop.\nThe first type of loop we will learn is called a \"<code>while</code>\" loop because it runs \"while\" a specified condition is true and stops once that condition is no longer true.\n<blockquote>var ourArray = [];<br>var i = 0;<br>while(i &#60; 5) {<br>&nbsp;&nbsp;ourArray.push(i);<br>&nbsp;&nbsp;i++;<br>}</blockquote>\nLet's try getting a while loop to work by pushing values to an array.\n"},
"56533eb9ac21ba0edf2244bf" : {"id":"56533eb9ac21ba0edf2244bf","title":"Local Scope and Functions","videoUrl":"","content":"\nVariables which are declared within a function, as well as the function parameters have <dfn>local</dfn> scope. That means, they are only visible within that function.\nHere is a function <code>myTest</code> with a local variable called <code>loc</code>.\n<blockquote>function myTest() {<br>&nbsp;&nbsp;var loc = \"foo\";<br>&nbsp;&nbsp;console.log(loc);<br>}<br>myTest(); // logs \"foo\"<br>console.log(loc); // loc is not defined</blockquote>\n<code>loc</code> is not defined outside of the function.\n"},
"5690307fddb111c6084545d7" : {"id":"5690307fddb111c6084545d7","title":"Logical Order in If Else Statements","videoUrl":"","content":"\nOrder is important in <code>if</code>, <code>else if</code> statements.\nThe function is executed from top to bottom so you will want to be careful of what statement comes first.\nTake these two functions as an example.\nHere's the first:\n<blockquote>function foo(x) {<br>&nbsp;&nbsp;if (x < 1) {<br>&nbsp;&nbsp;&nbsp;&nbsp;return \"Less than one\";<br>&nbsp;&nbsp;} else if (x < 2) {<br>&nbsp;&nbsp;&nbsp;&nbsp;return \"Less than two\";<br>&nbsp;&nbsp;} else {<br>&nbsp;&nbsp;&nbsp;&nbsp;return \"Greater than or equal to two\";<br>&nbsp;&nbsp;}<br>}</blockquote>\nAnd the second just switches the order of the statements:\n<blockquote>function bar(x) {<br>&nbsp;&nbsp;if (x < 2) {<br>&nbsp;&nbsp;&nbsp;&nbsp;return \"Less than two\";<br>&nbsp;&nbsp;} else if (x < 1) {<br>&nbsp;&nbsp;&nbsp;&nbsp;return \"Less than one\";<br>&nbsp;&nbsp;} else {<br>&nbsp;&nbsp;&nbsp;&nbsp;return \"Greater than or equal to two\";<br>&nbsp;&nbsp;}<br>}</blockquote>\nWhile these two functions look nearly identical if we pass a number to both we get different outputs.\n<blockquote>foo(0) // \"Less than one\"<br>bar(0) // \"Less than two\"</blockquote>\n"},
"56bbb991ad1ed5201cd392cc" : {"id":"56bbb991ad1ed5201cd392cc","title":"Manipulate Arrays With pop()","videoUrl":"","content":"\nAnother way to change the data in an array is with the <code>.pop()</code> function.\n<code>.pop()</code> is used to \"pop\" a value off of the end of an array. We can store this \"popped off\" value by assigning it to a variable. In other words, <code>.pop()</code> removes the last element from an array and returns that element.\nAny type of entry can be \"popped\" off of an array - numbers, strings, even nested arrays.\n<blockquote><code>var threeArr = [1, 4, 6];<br> var oneDown = threeArr.pop();<br> console.log(oneDown); // Returns 6<br> console.log(threeArr); // Returns [1, 4]</code></blockquote>\n"},
"56bbb991ad1ed5201cd392cb" : {"id":"56bbb991ad1ed5201cd392cb","title":"Manipulate Arrays With push()","videoUrl":"","content":"\nAn easy way to append data to the end of an array is via the <code>push()</code> function.\n<code>.push()</code> takes one or more <dfn>parameters</dfn> and \"pushes\" them onto the end of the array.\n<blockquote>var arr = [1,2,3];<br>arr.push(4);<br>// arr is now [1,2,3,4]</blockquote>\n"},
"56bbb991ad1ed5201cd392cd" : {"id":"56bbb991ad1ed5201cd392cd","title":"Manipulate Arrays With shift()","videoUrl":"","content":"\n<code>pop()</code> always removes the last element of an array. What if you want to remove the first?\nThat's where <code>.shift()</code> comes in. It works just like <code>.pop()</code>, except it removes the first element instead of the last.\n"},
"56bbb991ad1ed5201cd392ce" : {"id":"56bbb991ad1ed5201cd392ce","title":"Manipulate Arrays With unshift()","videoUrl":"","content":"\nNot only can you <code>shift</code> elements off of the beginning of an array, you can also <code>unshift</code> elements to the beginning of an array i.e. add elements in front of the array.\n<code>.unshift()</code> works exactly like <code>.push()</code>, but instead of adding the element at the end of the array, <code>unshift()</code> adds the element at the beginning of the array.\n"},
"56533eb9ac21ba0edf2244cb" : {"id":"56533eb9ac21ba0edf2244cb","title":"Manipulating Complex Objects","videoUrl":"","content":"\nSometimes you may want to store data in a flexible <dfn>Data Structure</dfn>. A JavaScript object is one way to handle flexible data. They allow for arbitrary combinations of <dfn>strings</dfn>, <dfn>numbers</dfn>, <dfn>booleans</dfn>, <dfn>arrays</dfn>, <dfn>functions</dfn>, and <dfn>objects</dfn>.\nHere's an example of a complex data structure:\n<blockquote>var ourMusic = [<br>&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;\"artist\": \"Daft Punk\",<br>&nbsp;&nbsp;&nbsp;&nbsp;\"title\": \"Homework\",<br>&nbsp;&nbsp;&nbsp;&nbsp;\"release_year\": 1997,<br>&nbsp;&nbsp;&nbsp;&nbsp;\"formats\": [ <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"CD\", <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"Cassette\", <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"LP\"<br>&nbsp;&nbsp;&nbsp;&nbsp;],<br>&nbsp;&nbsp;&nbsp;&nbsp;\"gold\": true<br>&nbsp;&nbsp;}<br>];</blockquote>\nThis is an array which contains one object inside. The object has various pieces of <dfn>metadata</dfn> about an album. It also has a nested <code>\"formats\"</code> array. If you want to add more album records, you can do this by adding records to the top level array.\nObjects hold data in a property, which has a key-value format. In the example above, <code>\"artist\": \"Daft Punk\"</code> is a property that has a key of <code>\"artist\"</code> and a value of <code>\"Daft Punk\"</code>.\n<a href='http://www.json.org/' target=_blank>JavaScript Object Notation</a> or <code>JSON</code> is a related data interchange format used to store data.\n<blockquote>{<br>&nbsp;&nbsp;\"artist\": \"Daft Punk\",<br>&nbsp;&nbsp;\"title\": \"Homework\",<br>&nbsp;&nbsp;\"release_year\": 1997,<br>&nbsp;&nbsp;\"formats\": [ <br>&nbsp;&nbsp;&nbsp;&nbsp;\"CD\",<br>&nbsp;&nbsp;&nbsp;&nbsp;\"Cassette\",<br>&nbsp;&nbsp;&nbsp;&nbsp;\"LP\"<br>&nbsp;&nbsp;],<br>&nbsp;&nbsp;\"gold\": true<br>}</blockquote>\n<strong>Note</strong><br>You will need to place a comma after every object in the array, unless it is the last object in the array.\n"},
"cf1111c1c11feddfaeb8bdef" : {"id":"cf1111c1c11feddfaeb8bdef","title":"Modify Array Data With Indexes","videoUrl":"","content":"\nUnlike strings, the entries of arrays are <dfn>mutable</dfn> and can be changed freely.\n<strong>Example</strong>\n<blockquote>var ourArray = [50,40,30];<br>ourArray[0] = 15; // equals [15,40,30]</blockquote>\n<strong>Note</strong><br>There shouldn't be any spaces between the array name and the square brackets, like <code>array [0]</code>. Although JavaScript is able to process this correctly, this may confuse other programmers reading your code.\n"},
"56533eb9ac21ba0edf2244df" : {"id":"56533eb9ac21ba0edf2244df","title":"Multiple Identical Options in Switch Statements","videoUrl":"","content":"\nIf the <code>break</code> statement is omitted from a <code>switch</code> statement's <code>case</code>, the following <code>case</code> statement(s) are executed until a <code>break</code> is encountered. If you have multiple inputs with the same output, you can represent them in a <code>switch</code> statement like this:\n<blockquote>switch(val) {<br>&nbsp;&nbsp;case 1:<br>&nbsp;&nbsp;case 2:<br>&nbsp;&nbsp;case 3:<br>&nbsp;&nbsp;&nbsp;&nbsp;result = \"1, 2, or 3\";<br>&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;case 4:<br>&nbsp;&nbsp;&nbsp;&nbsp;result = \"4 alone\";<br>}</blockquote>\nCases for 1, 2, and 3 will all produce the same result.\n"},
"bd7993c9c69feddfaeb7bdef" : {"id":"bd7993c9c69feddfaeb7bdef","title":"Multiply Two Decimals with JavaScript","videoUrl":"","content":"\nIn JavaScript, you can also perform calculations with decimal numbers, just like whole numbers.\nLet's multiply two decimals together to get their product.\n"},
"cf1231c1c11feddfaeb5bdef" : {"id":"cf1231c1c11feddfaeb5bdef","title":"Multiply Two Numbers with JavaScript","videoUrl":"","content":"\nWe can also multiply one number by another.\nJavaScript uses the <code>*</code> symbol for multiplication of two numbers.\n\n<strong>Example</strong>\n<blockquote>myVar = 13 * 13; // assigned 169</blockquote>\n\n"},
"56533eb9ac21ba0edf2244e1" : {"id":"56533eb9ac21ba0edf2244e1","title":"Nesting For Loops","videoUrl":"","content":"\nIf you have a multi-dimensional array, you can use the same logic as the prior waypoint to loop through both the array and any sub-arrays. Here is an example:\n<blockquote>var arr = [<br>&nbsp;&nbsp;[1,2], [3,4], [5,6]<br>];<br>for (var i=0; i &lt; arr.length; i++) {<br>&nbsp;&nbsp;for (var j=0; j &lt; arr[i].length; j++) {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(arr[i][j]);<br>&nbsp;&nbsp;}<br>}</blockquote>\nThis outputs each sub-element in <code>arr</code> one at a time. Note that for the inner loop, we are checking the <code>.length</code> of <code>arr[i]</code>, since <code>arr[i]</code> is itself an array.\n"},
"cf1111c1c11feddfaeb7bdef" : {"id":"cf1111c1c11feddfaeb7bdef","title":"Nest one Array within Another Array","videoUrl":"","content":"\nYou can also nest arrays within other arrays, like this: <code>[[\"Bulls\", 23], [\"White Sox\", 45]]</code>. This is also called a <dfn>Multi-dimensional Array<dfn>.\n"},
"56533eb9ac21ba0edf2244bd" : {"id":"56533eb9ac21ba0edf2244bd","title":"Passing Values to Functions with Arguments","videoUrl":"","content":"\n<dfn>Parameters</dfn> are variables that act as placeholders for the values that are to be input to a function when it is called. When a function is defined, it is typically defined along with one or more parameters. The actual values that are input (or <dfn>\"passed\"</dfn>) into a function when it is called are known as <dfn>arguments</dfn>.\nHere is a function with two parameters, <code>param1</code> and <code>param2</code>:\n<blockquote>function testFun(param1, param2) {<br>&nbsp;&nbsp;console.log(param1, param2);<br>}</blockquote>\nThen we can call <code>testFun</code>:\n<code>testFun(\"Hello\", \"World\");</code>\nWe have passed two arguments, <code>\"Hello\"</code> and <code>\"World\"</code>. Inside the function, <code>param1</code> will equal \"Hello\" and <code>param2</code> will equal \"World\". Note that you could call <code>testFun</code> again with different arguments and the parameters would take on the value of the new arguments.\n"},
"599a789b454f2bbd91a3ff4d" : {"id":"599a789b454f2bbd91a3ff4d","title":"Practice comparing different values","videoUrl":"","content":"\nIn the last two challenges, we learned about the equality operator (<code>==</code>) and the strict equality operator (<code>===</code>). Let's do a quick review and practice using these operators some more.\nIf the values being compared are not of the same type, the equality operator will perform a type conversion, and then evaluate the values. However, the strict equality operator will compare both the data type and value as-is, without converting one type to the other.\n<strong>Examples</strong>\n<blockquote>3 == '3'  // returns true because JavaScript performs type conversion from string to number<br>3 === '3' // returns false because the types are different and type conversion is not performed</blockquote>\n<strong>Note</strong><br>In JavaScript, you can determine the type of a variable or a value with the <code>typeof</code> operator, as follows:\n<blockquote>typeof 3   // returns 'number'<br>typeof '3' // returns 'string'</blockquote>\n"},
"5688e62ea601b2482ff8422b" : {"id":"5688e62ea601b2482ff8422b","title":"Profile Lookup","videoUrl":"","content":"\nWe have an array of objects representing different people in our contacts lists.\nA <code>lookUpProfile</code> function that takes <code>name</code> and a property (<code>prop</code>) as arguments has been pre-written for you.\nThe function should check if <code>name</code> is an actual contact's <code>firstName</code> and the given property (<code>prop</code>) is a property of that contact.\nIf both are true, then return the \"value\" of that property.\nIf <code>name</code> does not correspond to any contacts then return <code>\"No such contact\"</code>\nIf <code>prop</code> does not correspond to any valid properties of a contact found to match <code>name</code> then return <code>\"No such property\"</code>\n"},
"56533eb9ac21ba0edf2244b4" : {"id":"56533eb9ac21ba0edf2244b4","title":"Quoting Strings with Single Quotes","videoUrl":"","content":"\n<dfn>String</dfn> values in JavaScript may be written with single or double quotes, as long as you start and end with the same type of quote. Unlike some other programming languages, single and double quotes work the same in JavaScript.\n<blockquote>doubleQuoteStr = \"This is a string\"; <br/>singleQuoteStr = 'This is also a string';</blockquote>\nThe reason why you might want to use one type of quote over the other is if you want to use both in a string. This might happen if you want to save a conversation in a string and have the conversation in quotes. Another use for it would be saving an <code>&#60;a&#62;</code> tag with various attributes in quotes, all within a string.\n<blockquote>conversation = 'Finn exclaims to Jake, \"Algebraic!\"';</blockquote>\nHowever, this becomes a problem if you need to use the outermost quotes within it. Remember, a string has the same kind of quote at the beginning and end. But if you have that same quote somewhere in the middle, the string will stop early and throw an error.\n<blockquote>goodStr = 'Jake asks Finn, \"Hey, let\\'s go on an adventure?\"'; <br/>badStr = 'Finn responds, \"Let's go!\"'; // Throws an error</blockquote>\nIn the <dfn>goodStr</dfn> above, you can use both quotes safely by using the backslash <code>\\</code> as an escape character.\n<strong>Note</strong><br/>The backslash <code>\\</code> should not be confused with the forward slash <code>/</code>. They do not do the same thing.\n"},
"56533eb9ac21ba0edf2244cf" : {"id":"56533eb9ac21ba0edf2244cf","title":"Record Collection","videoUrl":"","content":"\nYou are given a JSON object representing a part of your musical album collection. Each album has several properties and a unique id number as its key. Not all albums have complete information.\nWrite a function which takes an album's <code>id</code> (like <code>2548</code>), a property <code>prop</code> (like <code>\"artist\"</code> or <code>\"tracks\"</code>), and a <code>value</code> (like <code>\"Addicted to Love\"</code>) to modify the data in this collection.\nIf <code>prop</code> isn't <code>\"tracks\"</code> and <code>value</code> isn't empty (<code>\"\"</code>), update or set the <code>value</code> for that record album's property.\nYour function must always return the entire collection object.\nThere are several rules for handling incomplete data:\nIf <code>prop</code> is <code>\"tracks\"</code> but the album doesn't have a <code>\"tracks\"</code> property, create an empty array before adding the new value to the album's corresponding property.\nIf <code>prop</code> is <code>\"tracks\"</code> and <code>value</code> isn't empty (<code>\"\"</code>), push the <code>value</code> onto the end of the album's existing <code>tracks</code> array.\nIf <code>value</code> is empty (<code>\"\"</code>), delete the given <code>prop</code> property from the album.\n<strong>Hints</strong><br>Use <code>bracket notation</code> when <a href=\"javascript-algorithms-and-data-structures/basic-javascript/accessing-object-properties-with-variables\" target=\"_blank\">accessing object properties with variables</a>.\nPush is an array method you can read about on <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push\" target=\"_blank\">Mozilla Developer Network</a>.\nYou may refer back to <a href=\"javascript-algorithms-and-data-structures/basic-javascript/manipulating-complex-objects\" target=\"_blank\">Manipulating Complex Objects</a> Introducing JavaScript Object Notation (JSON) for a refresher.\n"},
"56533eb9ac21ba0edf2244e0" : {"id":"56533eb9ac21ba0edf2244e0","title":"Replacing If Else Chains with Switch","videoUrl":"","content":"\nIf you have many options to choose from, a <code>switch</code> statement can be easier to write than many chained <code>if</code>/<code>else if</code> statements. The following:\n<blockquote>if (val === 1) {<br>&nbsp;&nbsp;answer = \"a\";<br>} else if (val === 2) {<br>&nbsp;&nbsp;answer = \"b\";<br>} else {<br>&nbsp;&nbsp;answer = \"c\";<br>}</blockquote>\ncan be replaced with:\n<blockquote>switch(val) {<br>&nbsp;&nbsp;case 1:<br>&nbsp;&nbsp;&nbsp;&nbsp;answer = \"a\";<br>&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;case 2:<br>&nbsp;&nbsp;&nbsp;&nbsp;answer = \"b\";<br>&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;default:<br>&nbsp;&nbsp;&nbsp;&nbsp;answer = \"c\";<br>}</blockquote>\n"},
"56533eb9ac21ba0edf2244c2" : {"id":"56533eb9ac21ba0edf2244c2","title":"Return a Value from a Function with Return","videoUrl":"","content":"\nWe can pass values into a function with <dfn>arguments</dfn>. You can use a <code>return</code> statement to send a value back out of a function.\n<strong>Example</strong>\n<blockquote>function plusThree(num) {<br>&nbsp;&nbsp;return num + 3;<br>}<br>var answer = plusThree(5); // 8</blockquote>\n<code>plusThree</code> takes an <dfn>argument</dfn> for <code>num</code> and returns a value equal to <code>num + 3</code>.\n"},
"56533eb9ac21ba0edf2244c4" : {"id":"56533eb9ac21ba0edf2244c4","title":"Return Early Pattern for Functions","videoUrl":"","content":"\nWhen a <code>return</code> statement is reached, the execution of the current function stops and control returns to the calling location.\n<strong>Example</strong>\n<blockquote>function myFun() {<br>&nbsp;&nbsp;console.log(\"Hello\");<br>&nbsp;&nbsp;return \"World\";<br>&nbsp;&nbsp;console.log(\"byebye\")<br>}<br>myFun();</blockquote>\nThe above outputs \"Hello\" to the console, returns \"World\", but <code>\"byebye\"</code> is never output, because the function exits at the <code>return</code> statement.\n"},
"5679ceb97cbaa8c51670a16b" : {"id":"5679ceb97cbaa8c51670a16b","title":"Returning Boolean Values from Functions","videoUrl":"","content":"\nYou may recall from <a href=\"waypoint-comparison-with-the-equality-operator\" target=\"_blank\">Comparison with the Equality Operator</a> that all comparison operators return a boolean <code>true</code> or <code>false</code> value.\nSometimes people use an if/else statement to do a comparison, like this:\n<blockquote>function isEqual(a,b) {<br>&nbsp;&nbsp;if (a === b) {<br>&nbsp;&nbsp;&nbsp;&nbsp;return true;<br>&nbsp;&nbsp;} else {<br>&nbsp;&nbsp;&nbsp;&nbsp;return false;<br>&nbsp;&nbsp;}<br>}</blockquote>\nBut there's a better way to do this. Since <code>===</code> returns <code>true</code> or <code>false</code>, we can return the result of the comparison:\n<blockquote>function isEqual(a,b) {<br>&nbsp;&nbsp;return a === b;<br>}</blockquote>\n"},
"56533eb9ac21ba0edf2244dd" : {"id":"56533eb9ac21ba0edf2244dd","title":"Selecting from Many Options with Switch Statements","videoUrl":"","content":"\nIf you have many options to choose from, use a <code>switch</code> statement. A <code>switch</code> statement tests a value and can have many <code>case</code> statements which define various possible values. Statements are executed from the first matched <code>case</code> value until a <code>break</code> is encountered.\nHere is a <dfn>pseudocode</dfn> example:\n<blockquote>switch(num) {<br>&nbsp;&nbsp;case value1:<br>&nbsp;&nbsp;&nbsp;&nbsp;statement1;<br>&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;case value2:<br>&nbsp;&nbsp;&nbsp;&nbsp;statement2;<br>&nbsp;&nbsp;&nbsp;&nbsp;break;<br>...<br>&nbsp;&nbsp;case valueN:<br>&nbsp;&nbsp;&nbsp;&nbsp;statementN;<br>&nbsp;&nbsp;&nbsp;&nbsp;break;<br>}</blockquote>\n<code>case</code> values are tested with strict equality (<code>===</code>). The <code>break</code> tells JavaScript to stop executing statements. If the <code>break</code> is omitted, the next statement will be executed.\n"},
"56533eb9ac21ba0edf2244bc" : {"id":"56533eb9ac21ba0edf2244bc","title":"Shopping List","videoUrl":"","content":"\nCreate a shopping list in the variable <code>myList</code>. The list should be a multi-dimensional array containing several sub-arrays.\nThe first element in each sub-array should contain a string with the name of the item. The second element should be a number representing the quantity i.e.\n<code>[\"Chocolate Bar\", 15]</code>\nThere should be at least 5 sub-arrays in the list.\n"},
"56533eb9ac21ba0edf2244c6" : {"id":"56533eb9ac21ba0edf2244c6","title":"Stand in Line","videoUrl":"","content":"\nIn Computer Science a <dfn>queue</dfn> is an abstract <dfn>Data Structure</dfn> where items are kept in order. New items can be added at the back of the <code>queue</code> and old items are taken off from the front of the <code>queue</code>.\nWrite a function <code>nextInLine</code> which takes an array (<code>arr</code>) and a number (<code>item</code>) as arguments.\nAdd the number to the end of the array, then remove the first element of the array.\nThe <code>nextInLine</code> function should then return the element that was removed.\n"},
"bd7993c9c69feddfaeb8bdef" : {"id":"bd7993c9c69feddfaeb8bdef","title":"Store Multiple Values in one Variable using JavaScript Arrays","videoUrl":"","content":"\nWith JavaScript <code>array</code> variables, we can store several pieces of data in one place.\nYou start an array declaration with an opening square bracket, end it with a closing square bracket, and put a comma between each entry, like this:\n<code>var sandwich = [\"peanut butter\", \"jelly\", \"bread\"]</code>.\n"},
"56533eb9ac21ba0edf2244a8" : {"id":"56533eb9ac21ba0edf2244a8","title":"Storing Values with the Assignment Operator","videoUrl":"","content":"\nIn JavaScript, you can store a value in a variable with the <dfn>assignment</dfn> operator.\n<code>myVariable = 5;</code>\nThis assigns the <code>Number</code> value <code>5</code> to <code>myVariable</code>.\nAssignment always goes from right to left. Everything to the right of the <code>=</code> operator is resolved before the value is assigned to the variable to the left of the operator.\n<blockquote>myVar = 5;<br>myNum = myVar;</blockquote>\nThis assigns <code>5</code> to <code>myVar</code> and then resolves <code>myVar</code> to <code>5</code>  again and assigns it to <code>myNum</code>.\n"},
"cf1111c1c11feddfaeb4bdef" : {"id":"cf1111c1c11feddfaeb4bdef","title":"Subtract One Number from Another with JavaScript","videoUrl":"","content":"\nWe can also subtract one number from another.\nJavaScript uses the <code>-</code> symbol for subtraction.\n\n<strong>Example</strong>\n<blockquote>myVar = 12 - 6; // assigned 6</blockquote>\n\n"},
"567af2437cbaa8c51670a16c" : {"id":"567af2437cbaa8c51670a16c","title":"Testing Objects for Properties","videoUrl":"","content":"\nSometimes it is useful to check if the property of a given object exists or not. We can use the <code>.hasOwnProperty(propname)</code> method of objects to determine if that object has the given property name. <code>.hasOwnProperty()</code> returns <code>true</code> or <code>false</code> if the property is found or not.\n<strong>Example</strong>\n<blockquote>var myObj = {<br>&nbsp;&nbsp;top: \"hat\",<br>&nbsp;&nbsp;bottom: \"pants\"<br>};<br>myObj.hasOwnProperty(\"top\");    // true<br>myObj.hasOwnProperty(\"middle\"); // false</blockquote>\n"},
"bd7123c9c441eddfaeb5bdef" : {"id":"bd7123c9c441eddfaeb5bdef","title":"Understanding Boolean Values","videoUrl":"","content":"\nAnother data type is the <dfn>Boolean</dfn>. <code>Booleans</code> may only be one of two values: <code>true</code> or <code>false</code>. They are basically little on-off switches, where <code>true</code> is \"on\" and <code>false</code> is \"off.\"  These two states are mutually exclusive.\n<strong>Note</strong><br><code>Boolean</code> values are never written with quotes. The <code>strings</code> <code>\"true\"</code> and <code>\"false\"</code> are not <code>Boolean</code> and have no special meaning in JavaScript.\n"},
"56533eb9ac21ba0edf2244ab" : {"id":"56533eb9ac21ba0edf2244ab","title":"Understanding Case Sensitivity in Variables","videoUrl":"","content":"\nIn JavaScript all variables and function names are case sensitive. This means that capitalization matters.\n<code>MYVAR</code> is not the same as <code>MyVar</code> nor <code>myvar</code>. It is possible to have multiple distinct variables with the same name but different casing. It is strongly recommended that for the sake of clarity, you <em>do not</em> use this language feature.\n<h4>Best Practice</h4>\nWrite variable names in JavaScript in <dfn>camelCase</dfn>. In <dfn>camelCase</dfn>, multi-word variable names have the first word in lowercase and the first letter of each subsequent word is capitalized.\n<strong>Examples:</strong>\n<blockquote>var someVariable;<br>var anotherVariableName;<br>var thisVariableNameIsSoLong;</blockquote>\n"},
"598e8944f009e646fc236146" : {"id":"598e8944f009e646fc236146","title":"Understanding Undefined Value returned from a Function","videoUrl":"","content":"\nA function can include the <code>return</code> statement but it does not have to. In the case that the function doesn't have a <code>return</code> statement, when you call it, the function processes the inner code but the returned value is <code>undefined</code>.\n<strong>Example</strong>\n<blockquote>var sum = 0;<br>function addSum(num) {<br>&nbsp;&nbsp;sum = sum + num;<br>}<br>var returnedValue = addSum(3); // sum will be modified but returned value is undefined</blockquote>\n<code>addSum</code> is a function without a <code>return</code> statement. The function will change the global <code>sum</code> variable but the returned value of the function is <code>undefined</code>\n"},
"56533eb9ac21ba0edf2244aa" : {"id":"56533eb9ac21ba0edf2244aa","title":"Understanding Uninitialized Variables","videoUrl":"","content":"\nWhen JavaScript variables are declared, they have an initial value of <code>undefined</code>. If you do a mathematical operation on an <code>undefined</code> variable your result will be <code>NaN</code> which means <dfn>\"Not a Number\"</dfn>. If you concatenate a string with an <code>undefined</code> variable, you will get a literal <dfn>string</dfn> of <code>\"undefined\"</code>.\n"},
"56533eb9ac21ba0edf2244ba" : {"id":"56533eb9ac21ba0edf2244ba","title":"Understand String Immutability","videoUrl":"","content":"\nIn JavaScript, <code>String</code> values are <dfn>immutable</dfn>, which means that they cannot be altered once created.\nFor example, the following code:\n<blockquote>var myStr = \"Bob\";<br>myStr[0] = \"J\";</blockquote>\ncannot change the value of <code>myStr</code> to \"Job\", because the contents of <code>myStr</code> cannot be altered. Note that this does <em>not</em> mean that <code>myStr</code> cannot be changed, just that the individual characters of a <dfn>string literal</dfn> cannot be changed. The only way to change <code>myStr</code> would be to assign it with a new string, like this:\n<blockquote>var myStr = \"Bob\";<br>myStr = \"Job\";</blockquote>\n"},
"56bbb991ad1ed5201cd392d1" : {"id":"56bbb991ad1ed5201cd392d1","title":"Updating Object Properties","videoUrl":"","content":"\nAfter you've created a JavaScript object, you can update its properties at any time just like you would update any other variable. You can use either dot or bracket notation to update.\nFor example, let's look at <code>ourDog</code>:\n<blockquote>var ourDog = {<br>&nbsp;&nbsp;\"name\": \"Camper\",<br>&nbsp;&nbsp;\"legs\": 4,<br>&nbsp;&nbsp;\"tails\": 1,<br>&nbsp;&nbsp;\"friends\": [\"everything!\"]<br>};</blockquote>\nSince he's a particularly happy dog, let's change his name to \"Happy Camper\". Here's how we update his object's name property:\n<code>ourDog.name = \"Happy Camper\";</code> or\n<code>ourDog[\"name\"] = \"Happy Camper\";</code>\nNow when we evaluate <code>ourDog.name</code>, instead of getting \"Camper\", we'll get his new name, \"Happy Camper\".\n"},
"bd7123c9c549eddfaeb5bdef" : {"id":"bd7123c9c549eddfaeb5bdef","title":"Use Bracket Notation to Find the First Character in a String","videoUrl":"","content":"\n<code>Bracket notation</code> is a way to get a character at a specific <code>index</code> within a string.\nMost modern programming languages, like JavaScript, don't start counting at 1 like humans do. They start at 0. This is referred to as <dfn>Zero-based</dfn> indexing.\nFor example, the character at index 0 in the word \"Charles\" is \"C\". So if <code>var firstName = \"Charles\"</code>, you can get the value of the first letter of the string by using <code>firstName[0]</code>.\n"},
"bd7123c9c451eddfaeb5bdef" : {"id":"bd7123c9c451eddfaeb5bdef","title":"Use Bracket Notation to Find the Last Character in a String","videoUrl":"","content":"\nIn order to get the last letter of a string, you can subtract one from the string's length.\nFor example, if <code>var firstName = \"Charles\"</code>, you can get the value of the last letter of the string by using <code>firstName[firstName.length - 1]</code>.\n"},
"bd7123c9c450eddfaeb5bdef" : {"id":"bd7123c9c450eddfaeb5bdef","title":"Use Bracket Notation to Find the Nth Character in a String","videoUrl":"","content":"\nYou can also use <dfn>bracket notation</dfn> to get the character at other positions within a string.\nRemember that computers start counting at <code>0</code>, so the first character is actually the zeroth character.\n"},
"bd7123c9c452eddfaeb5bdef" : {"id":"bd7123c9c452eddfaeb5bdef","title":"Use Bracket Notation to Find the Nth-to-Last Character in a String","videoUrl":"","content":"\nYou can use the same principle we just used to retrieve the last character in a string to retrieve the Nth-to-last character.\nFor example, you can get the value of the third-to-last letter of the <code>var firstName = \"Charles\"</code> string by using <code>firstName[firstName.length - 3]</code>\n"},
"cf1111c1c12feddfaeb3bdef" : {"id":"cf1111c1c12feddfaeb3bdef","title":"Use Conditional Logic with If Statements","videoUrl":"","content":"\n<code>If</code> statements are used to make decisions in code. The keyword <code>if</code> tells JavaScript to execute the code in the curly braces under certain conditions, defined in the parentheses. These conditions are known as <code>Boolean</code> conditions and they may only be <code>true</code> or <code>false</code>.\nWhen the condition evaluates to <code>true</code>, the program executes the statement inside the curly braces. When the Boolean condition evaluates to <code>false</code>, the statement inside the curly braces will not execute.\n<strong>Pseudocode</strong>\n<blockquote>if (<i>condition is true</i>) {<br>&nbsp;&nbsp;<i>statement is executed</i><br>}</blockquote>\n<strong>Example</strong>\n<blockquote>function test (myCondition) {<br>&nbsp;&nbsp;if (myCondition) {<br>&nbsp;&nbsp;&nbsp;&nbsp; return \"It was true\";<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;return \"It was false\";<br>}<br>test(true);  // returns \"It was true\"<br>test(false); // returns \"It was false\"</blockquote>\nWhen <code>test</code> is called with a value of <code>true</code>, the <code>if</code> statement evaluates <code>myCondition</code> to see if it is <code>true</code> or not. Since it is <code>true</code>, the function returns <code>\"It was true\"</code>. When we call <code>test</code> with a value of <code>false</code>, <code>myCondition</code> is <em>not</em> <code>true</code> and the statement in the curly braces is not executed and the function returns <code>\"It was false\"</code>.\n"},
"587d7b7e367417b2b2512b21" : {"id":"587d7b7e367417b2b2512b21","title":"Use Multiple Conditional (Ternary) Operators","videoUrl":"","content":"\nIn the previous challenge, you used a single <code>conditional operator</code>. You can also chain them together to check for multiple conditions.\nThe following function uses if, else if, and else statements to check multiple conditions:\n<blockquote>function findGreaterOrEqual(a, b) {<br>&nbsp;&nbsp;if(a === b) {<br>&nbsp;&nbsp;&nbsp;&nbsp;return \"a and b are equal\";<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;else if(a > b) {<br>&nbsp;&nbsp;&nbsp;&nbsp;return \"a is greater\";<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;else {<br>&nbsp;&nbsp;&nbsp;&nbsp;return \"b is greater\";<br>&nbsp;&nbsp;}<br>}</blockquote>\nThe above function can be re-written using multiple <code>conditional operators</code>:\n<blockquote>function findGreaterOrEqual(a, b) {<br>&nbsp;&nbsp;return (a === b) ? \"a and b are equal\" : (a > b) ? \"a is greater\" : \"b is greater\";<br>}</blockquote>\n"},
"587d7b7e367417b2b2512b24" : {"id":"587d7b7e367417b2b2512b24","title":"Use the Conditional (Ternary) Operator","videoUrl":"","content":"\nThe <dfn>conditional operator</dfn>, also called the <dfn>ternary operator</dfn>, can be used as a one line if-else expression.\nThe syntax is:\n<code>condition ? statement-if-true : statement-if-false;</code>\nThe following function uses an if-else statement to check a condition:\n<blockquote>function findGreater(a, b) {<br>&nbsp;&nbsp;if(a > b) {<br>&nbsp;&nbsp;&nbsp;&nbsp;return \"a is greater\";<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;else {<br>&nbsp;&nbsp;&nbsp;&nbsp;return \"b is greater\";<br>&nbsp;&nbsp;}<br>}</blockquote>\nThis can be re-written using the <code>conditional operator</code>:\n<blockquote>function findGreater(a, b) {<br>&nbsp;&nbsp;return a > b ? \"a is greater\" : \"b is greater\";<br>}</blockquote>\n"},
"587d7b7e367417b2b2512b23" : {"id":"587d7b7e367417b2b2512b23","title":"Use the parseInt Function","videoUrl":"","content":"\nThe <code>parseInt()</code> function parses a string and returns an integer. Here's an example:\n<code>var a = parseInt(\"007\");</code>\nThe above function converts the string \"007\" to an integer 7. If the first character in the string can't be converted into a number, then it returns <code>NaN</code>.\n"},
"587d7b7e367417b2b2512b22" : {"id":"587d7b7e367417b2b2512b22","title":"Use the parseInt Function with a Radix","videoUrl":"","content":"\nThe <code>parseInt()</code> function parses a string and returns an integer. It takes a second argument for the radix, which specifies the base of the number in the string. The radix can be an integer between 2 and 36.\nThe function call looks like:\n<code>parseInt(string, radix);</code>\nAnd here's an example:\n<code>var a = parseInt(\"11\", 2);</code>\nThe radix variable says that \"11\" is in the binary system, or base 2. This example converts the string \"11\" to an integer 3.\n"},
"56533eb9ac21ba0edf2244ca" : {"id":"56533eb9ac21ba0edf2244ca","title":"Using Objects for Lookups","videoUrl":"","content":"\nObjects can be thought of as a key/value storage, like a dictionary. If you have tabular data, you can use an object to \"lookup\" values rather than a <code>switch</code> statement or an <code>if/else</code> chain. This is most useful when you know that your input data is limited to a certain range.\nHere is an example of a simple reverse alphabet lookup:\n<blockquote>var alpha = {<br>&nbsp;&nbsp;1:\"Z\",<br>&nbsp;&nbsp;2:\"Y\",<br>&nbsp;&nbsp;3:\"X\",<br>&nbsp;&nbsp;4:\"W\",<br>&nbsp;&nbsp;...<br>&nbsp;&nbsp;24:\"C\",<br>&nbsp;&nbsp;25:\"B\",<br>&nbsp;&nbsp;26:\"A\"<br>};<br>alpha[2]; // \"Y\"<br>alpha[24]; // \"C\"<br><br>var value = 2;<br>alpha[value]; // \"Y\"</blockquote>\n"},
"56533eb9ac21ba0edf2244bb" : {"id":"56533eb9ac21ba0edf2244bb","title":"Word Blanks","videoUrl":"","content":"\nWe will now use our knowledge of strings to build a \"<a href='https://en.wikipedia.org/wiki/Mad_Libs' target='_blank'>Mad Libs</a>\" style word game we're calling \"Word Blanks\". You will create an (optionally humorous) \"Fill in the Blanks\" style sentence.\nIn a \"Mad Libs\" game, you are provided sentences with some missing words, like nouns, verbs, adjectives and adverbs. You then fill in the missing pieces with words of your choice in a way that the completed sentence makes sense.\nConsider this sentence - \"It was really <strong>____</strong>, and we <strong>____</strong> ourselves <strong>____</strong>\". This sentence has three missing pieces- an adjective, a verb and an adverb, and we can add words of our choice to complete it. We can then assign the completed sentence to a variable as follows:\n<blockquote>var sentence = \"It was really\" + \"hot\" + \", and we\" + \"laughed\" + \"ourselves\" + \"silly.\";</blockquote>\n"},
"56bbb991ad1ed5201cd392cf" : {"id":"56bbb991ad1ed5201cd392cf","title":"Write Reusable JavaScript with Functions","videoUrl":"","content":"\nIn JavaScript, we can divide up our code into reusable parts called <dfn>functions</dfn>.\nHere's an example of a function:\n<blockquote>function functionName() {<br>&nbsp;&nbsp;console.log(\"Hello World\");<br>}</blockquote>\nYou can call or <dfn>invoke</dfn> this function by using its name followed by parentheses, like this:\n<code>functionName();</code>\nEach time the function is called it will print out the message <code>\"Hello World\"</code> on the dev console. All of the code between the curly braces will be executed every time the function is called.\n"},
"587d7b85367417b2b2512b3a" : {"id":"587d7b85367417b2b2512b3a","title":"Catch Arguments Passed in the Wrong Order When Calling a Function","videoUrl":"","content":"\nContinuing the discussion on calling functions, the next bug to watch out for is when a function's arguments are supplied in the incorrect order. If the arguments are different types, such as a function expecting an array and an integer, this will likely throw a runtime error. If the arguments are the same type (all integers, for example), then the logic of the code won't make sense. Make sure to supply all required arguments, in the proper order to avoid these issues.\n"},
"587d7b85367417b2b2512b39" : {"id":"587d7b85367417b2b2512b39","title":"Catch Missing Open and Closing Parenthesis After a Function Call","videoUrl":"","content":"\nWhen a function or method doesn't take any arguments, you may forget to include the (empty) opening and closing parentheses when calling it. Often times the result of a function call is saved in a variable for other use in your code. This error can be detected by logging variable values (or their types) to the console and seeing that one is set to a function reference, instead of the expected value the function returns.\nThe variables in the following example are different:\n<blockquote>function myFunction() {<br>&nbsp;&nbsp;return \"You rock!\";<br>}<br>let varOne = myFunction; // set to equal a function<br>let varTwo = myFunction(); // set to equal the string \"You rock!\"</blockquote>\n"},
"587d7b84367417b2b2512b35" : {"id":"587d7b84367417b2b2512b35","title":"Catch Misspelled Variable and Function Names","videoUrl":"","content":"\nThe <code>console.log()</code> and <code>typeof</code> methods are the two primary ways to check intermediate values and types of program output. Now it's time to get into the common forms that bugs take. One syntax-level issue that fast typers can commiserate with is the humble spelling error.\nTransposed, missing, or mis-capitalized characters in a variable or function name will have the browser looking for an object that doesn't exist - and complain in the form of a reference error. JavaScript variable and function names are case-sensitive.\n"},
"587d7b84367417b2b2512b37" : {"id":"587d7b84367417b2b2512b37","title":"Catch Mixed Usage of Single and Double Quotes","videoUrl":"","content":"\nJavaScript allows the use of both single ('') and double (\"\") quotes to declare a string. Deciding which one to use generally comes down to personal preference, with some exceptions.\nHaving two choices is great when a string has contractions or another piece of text that's in quotes. Just be careful that you don't close the string too early, which causes a syntax error.\nHere are some examples of mixing quotes:\n<blockquote>// These are correct:<br>const grouchoContraction = \"I've had a perfectly wonderful evening, but this wasn't it.\";<br>const quoteInString = \"Groucho Marx once said 'Quote me as saying I was mis-quoted.'\";<br>// This is incorrect:<br>const uhOhGroucho = 'I've had a perfectly wonderful evening, but this wasn't it.';</blockquote>\nOf course, it is okay to use only one style of quotes. You can escape the quotes inside the string by using the backslash (\\) escape character:\n<blockquote>// Correct use of same quotes:<br>const allSameQuotes = 'I\\'ve had a perfectly wonderful evening, but this wasn\\'t it.';</blockquote>\n"},
"587d7b86367417b2b2512b3b" : {"id":"587d7b86367417b2b2512b3b","title":"Catch Off By One Errors When Using Indexing","videoUrl":"","content":"\n<code>Off by one errors</code> (sometimes called OBOE) crop up when you're trying to target a specific index of a string or array (to slice or access a segment), or when looping over the indices of them. JavaScript indexing starts at zero, not one, which means the last index is always one less than the length of the item. If you try to access an index equal to the length, the program may throw an \"index out of range\" reference error or print <code>undefined</code>.\nWhen you use string or array methods that take index ranges as arguments, it helps to read the documentation and understand if they are inclusive (the item at the given index is part of what's returned) or not. Here are some examples of off by one errors:\n<blockquote>let alphabet = \"abcdefghijklmnopqrstuvwxyz\";<br>let len = alphabet.length;<br>for (let i = 0; i <= len; i++) {<br>&nbsp;&nbsp;// loops one too many times at the end<br>&nbsp;&nbsp;console.log(alphabet[i]);<br>}<br>for (let j = 1; j < len; j++) {<br>&nbsp;&nbsp;// loops one too few times and misses the first character at index 0<br>&nbsp;&nbsp;console.log(alphabet[j]);<br>}<br>for (let k = 0; k < len; k++) {<br>&nbsp;&nbsp;// Goldilocks approves - this is just right<br>&nbsp;&nbsp;console.log(alphabet[k]);<br>}</blockquote>\n"},
"587d7b84367417b2b2512b36" : {"id":"587d7b84367417b2b2512b36","title":"'Catch Unclosed Parentheses, Brackets, Braces and Quotes'","videoUrl":"","content":"\nAnother syntax error to be aware of is that all opening parentheses, brackets, curly braces, and quotes have a closing pair. Forgetting a piece tends to happen when you're editing existing code and inserting items with one of the pair types. Also, take care when nesting code blocks into others, such as adding a callback function as an argument to a method.\nOne way to avoid this mistake is as soon as the opening character is typed, immediately include the closing match, then move the cursor back between them and continue coding. Fortunately, most modern code editors generate the second half of the pair automatically.\n"},
"587d7b85367417b2b2512b38" : {"id":"587d7b85367417b2b2512b38","title":"Catch Use of Assignment Operator Instead of Equality Operator","videoUrl":"","content":"\nBranching programs, i.e. ones that do different things if certain conditions are met, rely on <code>if</code>, <code>else if</code>, and <code>else</code> statements in JavaScript. The condition sometimes takes the form of testing whether a result is equal to a value.\nThis logic is spoken (in English, at least) as \"if x equals y, then ...\" which can literally translate into code using the <code>=</code>, or assignment operator. This leads to unexpected control flow in your program.\nAs covered in previous challenges, the assignment operator (<code>=</code>) in JavaScript assigns a value to a variable name. And the <code>==</code> and <code>===</code> operators check for equality (the triple <code>===</code> tests for strict equality, meaning both value and type are the same).\nThe code below assigns <code>x</code> to be 2, which evaluates as <code>true</code>. Almost every value on its own in JavaScript evaluates to <code>true</code>, except what are known as the \"falsy\" values: <code>false</code>, <code>0</code>, <code>\"\"</code> (an empty string), <code>NaN</code>, <code>undefined</code>, and <code>null</code>.\n<blockquote>let x = 1;<br>let y = 2;<br>if (x = y) {<br>&nbsp;&nbsp;// this code block will run for any value of y (unless y were originally set as a falsy)<br>} else {<br>&nbsp;&nbsp;// this code block is what should run (but won't) in this example<br>}</blockquote>\n"},
"587d7b86367417b2b2512b3d" : {"id":"587d7b86367417b2b2512b3d","title":"Prevent Infinite Loops with a Valid Terminal Condition","videoUrl":"","content":"\nThe final topic is the dreaded infinite loop. Loops are great tools when you need your program to run a code block a certain number of times or until a condition is met, but they need a terminal condition that ends the looping. Infinite loops are likely to freeze or crash the browser, and cause general program execution mayhem, which no one wants.\nThere was an example of an infinite loop in the introduction to this section - it had no terminal condition to break out of the <code>while</code> loop inside <code>loopy()</code>. Do NOT call this function!\n<blockquote>function loopy() {<br>&nbsp;&nbsp;while(true) {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(\"Hello, world!\");<br>&nbsp;&nbsp;}<br>}</blockquote>\nIt's the programmer's job to ensure that the terminal condition, which tells the program when to break out of the loop code, is eventually reached. One error is incrementing or decrementing a counter variable in the wrong direction from the terminal condition. Another one is accidentally resetting a counter or index variable within the loop code, instead of incrementing or decrementing it.\n"},
"587d7b83367417b2b2512b37" : {"id":"587d7b83367417b2b2512b37","title":"Understanding the Differences between the freeCodeCamp and Browser Console","videoUrl":"","content":"\nYou may have noticed that some freeCodeCamp JavaScript challenges include their own console.  This console behaves a little differently than the browser console you used in the last challenge.\nThe following challenge is meant to highlight some of the differences between the freeCodeCamp console and the browser console.\nFirst, the browser console.  When you load and run an ordinary JavaScript file in your browser the <code>console.log()</code> statements will print exactly what you tell them to print to the browser console the exact number of times you requested. In your in-browser text editor the process is slightly different and can be confusing at first.\nValues passed to <code>console.log()</code> in the text editor block run each set of tests as well as one more time for any function calls that you have in your code.\nThis lends itself to some interesting behavior and might trip you up in the beginning, because a logged value that you expect to see only once may print out many more times depending on the number of tests and the values being passed to those tests.\nIf you would like to see only your single output and not have to worry about running through the test cycles, you can use <code>console.clear()</code>.\n"},
"587d7b86367417b2b2512b3c" : {"id":"587d7b86367417b2b2512b3c","title":"Use Caution When Reinitializing Variables Inside a Loop","videoUrl":"","content":"\nSometimes it's necessary to save information, increment counters, or re-set variables within a loop. A potential issue is when variables either should be reinitialized, and aren't, or vice versa. This is particularly dangerous if you accidentally reset the variable being used for the terminal condition, causing an infinite loop.\nPrinting variable values with each cycle of your loop by using <code>console.log()</code> can uncover buggy behavior related to resetting, or failing to reset a variable.\n"},
"587d7b83367417b2b2512b33" : {"id":"587d7b83367417b2b2512b33","title":"Use the JavaScript Console to Check the Value of a Variable","videoUrl":"","content":"\nBoth Chrome and Firefox have excellent JavaScript consoles, also known as DevTools, for debugging your JavaScript.\nYou can find Developer tools in your Chrome's menu or Web Console in Firefox's menu. If you're using a different browser, or a mobile phone, we strongly recommend switching to desktop Firefox or Chrome.\nThe <code>console.log()</code> method, which \"prints\" the output of what's within its parentheses to the console, will likely be the most helpful debugging tool. Placing it at strategic points in your code can show you the intermediate values of variables. It's good practice to have an idea of what the output should be before looking at what it is. Having check points to see the status of your calculations throughout your code will help narrow down where the problem is.\nHere's an example to print 'Hello world!' to the console:\n<code>console.log('Hello world!');</code>\n"},
"587d7b84367417b2b2512b34" : {"id":"587d7b84367417b2b2512b34","title":"Use typeof to Check the Type of a Variable","videoUrl":"","content":"\nYou can use <code>typeof</code> to check the data structure, or type, of a variable. This is useful in debugging when working with multiple data types. If you think you're adding two numbers, but one is actually a string, the results can be unexpected. Type errors can lurk in calculations or function calls. Be careful especially when you're accessing and working with external data in the form of a JavaScript Object Notation (JSON) object.\nHere are some examples using <code>typeof</code>:\n<blockquote>console.log(typeof \"\"); // outputs \"string\"<br>console.log(typeof 0); // outputs \"number\"<br>console.log(typeof []); // outputs \"object\"<br>console.log(typeof {}); // outputs \"object\"</blockquote>\nJavaScript recognizes six primitive (immutable) data types: <code>Boolean</code>, <code>Null</code>, <code>Undefined</code>, <code>Number</code>, <code>String</code>, and <code>Symbol</code> (new with ES6) and one type for mutable items: <code>Object</code>. Note that in JavaScript, arrays are technically a type of object.\n"},
"587d7b87367417b2b2512b40" : {"id":"587d7b87367417b2b2512b40","title":"Compare Scopes of the var and let Keywords","videoUrl":"","content":"\nWhen you declare a variable with the <code>var</code> keyword, it is declared globally, or locally if declared inside a function.\nThe <code>let</code> keyword behaves similarly, but with some extra features. When you declare a variable with the <code>let</code> keyword inside a block, statement, or expression, its scope is limited to that block, statement, or expression.\nFor example:\n<blockquote>var numArray = [];<br>for (var i = 0; i < 3; i++) {<br>&nbsp;&nbsp;numArray.push(i);<br>}<br>console.log(numArray);<br>// returns [0, 1, 2]<br>console.log(i);<br>// returns 3</blockquote>\nWith the <code>var</code> keyword, <code>i</code> is declared globally. So when <code>i++</code> is executed, it updates the global variable. This code is similar to the following:\n<blockquote>var numArray = [];<br>var i;<br>for (i = 0; i < 3; i++) {<br>&nbsp;&nbsp;numArray.push(i);<br>}<br>console.log(numArray);<br>// returns [0, 1, 2]<br>console.log(i);<br>// returns 3</blockquote>\nThis behavior will cause problems if you were to create a function and store it for later use inside a for loop that uses the <code>i</code> variable. This is because the stored function will always refer to the value of the updated global <code>i</code> variable.\n<blockquote>var printNumTwo;<br>for (var i = 0; i < 3; i++) {<br>&nbsp;&nbsp;if(i === 2){<br>&nbsp;&nbsp;&nbsp;&nbsp;printNumTwo = function() {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return i;<br>&nbsp;&nbsp;&nbsp;&nbsp;};<br>&nbsp;&nbsp;}<br>}<br>console.log(printNumTwo());<br>// returns 3</blockquote>\nAs you can see, <code>printNumTwo()</code> prints 3 and not 2. This is because the value assigned to <code>i</code> was updated and the <code>printNumTwo()</code> returns the global <code>i</code> and not the value <code>i</code> had when the function was created in the for loop. The <code>let</code> keyword does not follow this behavior:\n<blockquote>'use strict';<br>let printNumTwo;<br>for (let i = 0; i < 3; i++) {<br>&nbsp;&nbsp;if (i === 2) {<br>&nbsp;&nbsp;&nbsp;&nbsp;printNumTwo = function() {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return i;<br>&nbsp;&nbsp;&nbsp;&nbsp;};<br>&nbsp;&nbsp;}<br>}<br>console.log(printNumTwo());<br>// returns 2<br>console.log(i);<br>// returns \"i is not defined\"</blockquote>\n<code>i</code> is not defined because it was not declared in the global scope. It is only declared within the for loop statement. <code>printNumTwo()</code> returned the correct value because three different <code>i</code> variables with unique values (0, 1, and 2) were created by the <code>let</code> keyword within the loop statement.\n"},
"587d7b8c367417b2b2512b58" : {"id":"587d7b8c367417b2b2512b58","title":"Create an Export Fallback with export default","videoUrl":"","content":"\nIn the <code>export</code> lesson, you learned about the syntax referred to as a <dfn>named export</dfn>. This allowed you to make multiple functions and variables available for use in other files.\nThere is another <code>export</code> syntax you need to know, known as <dfn>export default</dfn>. Usually you will use this syntax if only one value is being exported from a file. It is also used to create a fallback value for a file or module.\nHere is a quick example of <code>export default</code>:\n<blockquote>export default function add(x,y) {<br>&nbsp;&nbsp;return x + y;<br>}</blockquote>\nNote: Since <code>export default</code> is used to declare a fallback value for a module or file, you can only have one value be a default export in each module or file. Additionally, you cannot use <code>export default</code> with <code>var</code>, <code>let</code>, or <code>const</code>\n"},
"587d7b8a367417b2b2512b4e" : {"id":"587d7b8a367417b2b2512b4e","title":"Create Strings using Template Literals","videoUrl":"","content":"\nA new feature of ES6 is the <dfn>template literal</dfn>. This is a special type of string that makes creating complex strings easier.\nTemplate literals allow you to create multi-line strings and to use string interpolation features to create strings.\nConsider the code below:\n<blockquote>const person = {<br>&nbsp;&nbsp;name: \"Zodiac Hasbro\",<br>&nbsp;&nbsp;age: 56<br>};<br><br>// Template literal with multi-line and string interpolation<br>const greeting = `Hello, my name is ${person.name}!<br>I am ${person.age} years old.`;<br><br>console.log(greeting); // prints<br>// Hello, my name is Zodiac Hasbro!<br>// I am 56 years old.<br></blockquote>\nA lot of things happened there.\nFirstly, the example uses backticks (<code>`</code>), not quotes (<code>'</code> or <code>\"</code>), to wrap the string.\nSecondly, notice that the string is multi-line, both in the code and the output. This saves inserting <code>\\n</code> within strings.\nThe <code>${variable}</code> syntax used above is a placeholder. Basically, you won't have to use concatenation with the <code>+</code> operator anymore. To add variables to strings, you just drop the variable in a template string and wrap it with <code>${</code> and <code>}</code>. Similarly, you can include other expressions in your string literal, for example <code>${a + b}</code>.\nThis new way of creating strings gives you more flexibility to create robust strings.\n"},
"587d7b87367417b2b2512b41" : {"id":"587d7b87367417b2b2512b41","title":"Declare a Read-Only Variable with the const Keyword","videoUrl":"","content":"\nThe keyword <code>let</code> is not the only new way to declare variables. In ES6, you can also declare variables using the <code>const</code> keyword.\n<code>const</code> has all the awesome features that <code>let</code> has, with the added bonus that variables declared using <code>const</code> are read-only. They are a constant value, which means that once a variable is assigned with <code>const</code>, it cannot be reassigned.\n<blockquote>\"use strict\"<br>const FAV_PET = \"Cats\";<br>FAV_PET = \"Dogs\"; // returns error</blockquote>\nAs you can see, trying to reassign a variable declared with <code>const</code> will throw an error. You should always name variables you don't want to reassign using the <code>const</code> keyword. This helps when you accidentally attempt to reassign a variable that is meant to stay constant. A common practice when naming constants is to use all uppercase letters, with words separated by an underscore.\n"},
"587d7b87367417b2b2512b3f" : {"id":"587d7b87367417b2b2512b3f","title":"Explore Differences Between the var and let Keywords","videoUrl":"","content":"\nOne of the biggest problems with declaring variables with the <code>var</code> keyword is that you can overwrite variable declarations without an error.\n<blockquote>var camper = 'James';<br>var camper = 'David';<br>console.log(camper);<br>// logs 'David'</blockquote>\nAs you can see in the code above, the <code>camper</code> variable is originally declared as <code>James</code> and then overridden to be <code>David</code>.\nIn a small application, you might not run into this type of problem, but when your code becomes larger, you might accidentally overwrite a variable that you did not intend to overwrite.\nBecause this behavior does not throw an error, searching and fixing bugs becomes more difficult.<br>\nA new keyword called <code>let</code> was introduced in ES6 to solve this potential issue with the <code>var</code> keyword.\nIf you were to replace <code>var</code> with <code>let</code> in the variable declarations of the code above, the result would be an error.\n<blockquote>let camper = 'James';<br>let camper = 'David'; // throws an error</blockquote>\nThis error can be seen in the console of your browser.\nSo unlike <code>var</code>, when using <code>let</code>, a variable with the same name can only be declared once.\nNote the <code>\"use strict\"</code>. This enables Strict Mode, which catches common coding mistakes and \"unsafe\" actions. For instance:\n<blockquote>\"use strict\";<br>x = 3.14; // throws an error because x is not declared</blockquote>\n"},
"587d7b8d367417b2b2512b59" : {"id":"587d7b8d367417b2b2512b59","title":"Import a Default Export","videoUrl":"","content":"\nIn the last challenge, you learned about <code>export default</code> and its uses. It is important to note that, to import a default export, you need to use a different <code>import</code> syntax.\nIn the following example, we have a function, <code>add</code>, that is the default export of a file, <code>\"math_functions\"</code>. Here is how to import it:\n<blockquote>import add from \"math_functions\";<br>add(5,4); //Will return 9</blockquote>\nThe syntax differs in one key place - the imported value, <code>add</code>, is not surrounded by curly braces, <code>{}</code>. Unlike exported values, the primary method of importing a default export is to simply write the value's name after <code>import</code>.\n"},
"587d7b87367417b2b2512b42" : {"id":"587d7b87367417b2b2512b42","title":"Mutate an Array Declared with const","videoUrl":"","content":"\nThe <code>const</code> declaration has many use cases in modern JavaScript.\nSome developers prefer to assign all their variables using <code>const</code> by default, unless they know they will need to reassign the value. Only in that case, they use <code>let</code>.\nHowever, it is important to understand that objects (including arrays and functions) assigned to a variable using <code>const</code> are still mutable. Using the <code>const</code> declaration only prevents reassignment of the variable identifier.\n<blockquote>\"use strict\";<br>const s = [5, 6, 7];<br>s = [1, 2, 3]; // throws error, trying to assign a const<br>s[2] = 45; // works just as it would with an array declared with var or let<br>console.log(s); // returns [5, 6, 45]</blockquote>\nAs you can see, you can mutate the object <code>[5, 6, 7]</code> itself and the variable <code>s</code> will still point to the altered array <code>[5, 6, 45]</code>. Like all arrays, the array elements in <code>s</code> are mutable, but because <code>const</code> was used, you cannot use the variable identifier <code>s</code> to point to a different array using the assignment operator.\n"},
"598f48a36c8c40764b4e52b3" : {"id":"598f48a36c8c40764b4e52b3","title":"Prevent Object Mutation","videoUrl":"","content":"\nAs seen in the previous challenge, <code>const</code> declaration alone doesn't really protect your data from mutation. To ensure your data doesn't change, JavaScript provides a function <code>Object.freeze</code> to prevent data mutation.\nOnce the object is frozen, you can no longer add, update, or delete properties from it. Any attempt at changing the object will be rejected without an error.\n<blockquote>let obj = {<br>&nbsp;&nbsp;name:\"FreeCodeCamp\",<br>&nbsp;&nbsp;review:\"Awesome\"<br>};<br>Object.freeze(obj);<br>obj.review = \"bad\"; //will be ignored. Mutation not allowed<br>obj.newProp = \"Test\"; // will be ignored. Mutation not allowed<br>console.log(obj); <br>// { name: \"FreeCodeCamp\", review:\"Awesome\"}</blockquote>\n"},
"587d7b88367417b2b2512b46" : {"id":"587d7b88367417b2b2512b46","title":"Set Default Parameters for Your Functions","videoUrl":"","content":"\nIn order to help us create more flexible functions, ES6 introduces <dfn>default parameters</dfn> for functions.\nCheck out this code:\n<blockquote>function greeting(name = \"Anonymous\") {<br>&nbsp;&nbsp;return \"Hello \" + name;<br>}<br>console.log(greeting(\"John\")); // Hello John<br>console.log(greeting()); // Hello Anonymous</blockquote>\nThe default parameter kicks in when the argument is not specified (it is undefined). As you can see in the example above, the parameter <code>name</code> will receive its default value <code>\"Anonymous\"</code> when you do not provide a value for the parameter. You can add default values for as many parameters as you want.\n"},
"587d7b8c367417b2b2512b55" : {"id":"587d7b8c367417b2b2512b55","title":"Understand the Differences Between import and require","videoUrl":"","content":"\nIn the past, the function <code>require()</code> would be used to import the functions and code in external files and modules. While handy, this presents a problem: some files and modules are rather large, and you may only need certain code from those external resources.\nES6 gives us a very handy tool known as <dfn>import</dfn>. With it, we can choose which parts of a module or file to load into a given file, saving time and memory.\nConsider the following example. Imagine that <code>math_array_functions</code> has about 20 functions, but I only need one, <code>countItems</code>, in my current file. The old <code>require()</code> approach would force me to bring in all 20 functions. With this new <code>import</code> syntax, I can bring in just the desired function, like so:\n<blockquote>import { countItems } from \"math_array_functions\"</blockquote>\nA description of the above code:\n<blockquote>import { function } from \"file_path_goes_here\"<br>// We can also import variables the same way!</blockquote>\nThere are a few ways to write an <code>import</code> statement, but the above is a very common use-case.\n<strong>Note</strong><br>The whitespace surrounding the function inside the curly braces is a best practice - it makes it easier to read the <code>import</code> statement.\n<strong>Note</strong><br>The lessons in this section handle non-browser features. <code>import</code>, and the statements we introduce in the rest of these lessons, won't work on a browser directly. However, we can use various tools to create code out of this to make it work in browser.\n<strong>Note</strong><br>In most cases, the file path requires a <code>./</code> before it; otherwise, node will look in the <code>node_modules</code> directory first trying to load it as a dependency.\n"},
"587d7b87367417b2b2512b43" : {"id":"587d7b87367417b2b2512b43","title":"Use Arrow Functions to Write Concise Anonymous Functions","videoUrl":"","content":"\nIn JavaScript, we often don't need to name our functions, especially when passing a function as an argument to another function. Instead, we create inline functions. We don't need to name these functions because we do not reuse them anywhere else.\nTo achieve this, we often use the following syntax:\n<blockquote>const myFunc = function() {<br>&nbsp;&nbsp;const myVar = \"value\";<br>&nbsp;&nbsp;return myVar;<br>}</blockquote>\nES6 provides us with the syntactic sugar to not have to write anonymous functions this way. Instead, you can use <strong>arrow function syntax</strong>:\n<blockquote>const myFunc = () => {<br>&nbsp;&nbsp;const myVar = \"value\";<br>&nbsp;&nbsp;return myVar;<br>}</blockquote>\nWhen there is no function body, and only a return value, arrow function syntax allows you to omit the keyword <code>return</code> as well as the brackets surrounding the code. This helps simplify smaller functions into one-line statements:\n<blockquote>const myFunc = () => \"value\"</blockquote>\nThis code will still return <code>value</code> by default.\n"},
"587d7b8b367417b2b2512b53" : {"id":"587d7b8b367417b2b2512b53","title":"Use class Syntax to Define a Constructor Function","videoUrl":"","content":"\nES6 provides a new syntax to help create objects, using the keyword <dfn>class</dfn>.\nThis is to be noted, that the <code>class</code> syntax is just a syntax, and not a full-fledged class based implementation of object oriented paradigm, unlike in languages like Java, or Python, or Ruby etc.\nIn ES5, we usually define a constructor function, and use the <code>new</code> keyword to instantiate an object.\n<blockquote>var SpaceShuttle = function(targetPlanet){<br>&nbsp;&nbsp;this.targetPlanet = targetPlanet;<br>}<br>var zeus = new SpaceShuttle('Jupiter');</blockquote>\nThe class syntax simply replaces the constructor function creation:\n<blockquote>class SpaceShuttle {<br>&nbsp;&nbsp;constructor(targetPlanet){<br>&nbsp;&nbsp;&nbsp;&nbsp;this.targetPlanet = targetPlanet;<br>&nbsp;&nbsp;}<br>}<br>const zeus = new SpaceShuttle('Jupiter');</blockquote>\nNotice that the <code>class</code> keyword declares a new function, and a constructor was added, which would be invoked when <code>new</code> is called - to create a new object.<br>\n<strong>Note</strong><br>\nUpperCamelCase should be used by convention for ES6 class names, as in <code>SpaceShuttle</code> used above.\n"},
"587d7b89367417b2b2512b4b" : {"id":"587d7b89367417b2b2512b4b","title":"Use Destructuring Assignment to Assign Variables from Arrays","videoUrl":"","content":"\nES6 makes destructuring arrays as easy as destructuring objects.\nOne key difference between the spread operator and array destructuring is that the spread operator unpacks all contents of an array into a comma-separated list. Consequently, you cannot pick or choose which elements you want to assign to variables.\nDestructuring an array lets us do exactly that:\n<blockquote>const [a, b] = [1, 2, 3, 4, 5, 6];<br>console.log(a, b); // 1, 2</blockquote>\nThe variable <code>a</code> is assigned the first value of the array, and <code>b</code> is assigned the second value of the array.\nWe can also access the value at any index in an array with destructuring by using commas to reach the desired index:\n<blockquote>const [a, b,,, c] = [1, 2, 3, 4, 5, 6];<br>console.log(a, b, c); // 1, 2, 5 </blockquote>\n"},
"587d7b89367417b2b2512b4a" : {"id":"587d7b89367417b2b2512b4a","title":"Use Destructuring Assignment to Assign Variables from Nested Objects","videoUrl":"","content":"\nWe can similarly destructure <em>nested</em> objects into variables.\nConsider the following code:\n<blockquote>const a = {<br>&nbsp;&nbsp;start: { x: 5, y: 6},<br>&nbsp;&nbsp;end: { x: 6, y: -9 }<br>};<br>const { start : { x: startX, y: startY }} = a;<br>console.log(startX, startY); // 5, 6</blockquote>\nIn the example above, the variable <code>start</code> is assigned the value of <code>a.start</code>, which is also an object.\n"},
"587d7b89367417b2b2512b49" : {"id":"587d7b89367417b2b2512b49","title":"Use Destructuring Assignment to Assign Variables from Objects","videoUrl":"","content":"\nWe saw earlier how spread operator can effectively spread, or unpack, the contents of the array.\nWe can do something similar with objects as well. <dfn>Destructuring assignment</dfn> is special syntax for neatly assigning values taken directly from an object to variables.\nConsider the following ES5 code:\n<blockquote>var voxel = {x: 3.6, y: 7.4, z: 6.54 };<br>var x = voxel.x; // x = 3.6<br>var y = voxel.y; // y = 7.4<br>var z = voxel.z; // z = 6.54</blockquote>\nHere's the same assignment statement with ES6 destructuring syntax:\n<blockquote>const { x, y, z } = voxel; // x = 3.6, y = 7.4, z = 6.54</blockquote>\nIf instead you want to store the values of <code>voxel.x</code> into <code>a</code>, <code>voxel.y</code> into <code>b</code>, and <code>voxel.z</code> into <code>c</code>, you have that freedom as well.\n<blockquote>const { x : a, y : b, z : c } = voxel // a = 3.6, b = 7.4, c = 6.54</blockquote>\nYou may read it as \"get the field <code>x</code> and copy the value into <code>a</code>,\" and so on.\n"},
"587d7b8a367417b2b2512b4d" : {"id":"587d7b8a367417b2b2512b4d","title":"Use Destructuring Assignment to Pass an Object as a Function's Parameters","videoUrl":"","content":"\nIn some cases, you can destructure the object in a function argument itself.\nConsider the code below:\n<blockquote>const profileUpdate = (profileData) => {<br>&nbsp;&nbsp;const { name, age, nationality, location } = profileData;<br>&nbsp;&nbsp;// do something with these variables<br>}</blockquote>\nThis effectively destructures the object sent into the function. This can also be done in-place:\n<blockquote>const profileUpdate = ({ name, age, nationality, location }) => {<br>&nbsp;&nbsp;/* do something with these fields */<br>}</blockquote>\nThis removes some extra lines and makes our code look neat.\nThis has the added benefit of not having to manipulate an entire object in a function; only the fields that are needed are copied inside the function.\n"},
"587d7b8a367417b2b2512b4c" : {"id":"587d7b8a367417b2b2512b4c","title":"Use Destructuring Assignment with the Rest Operator to Reassign Array Elements","videoUrl":"","content":"\nIn some situations involving array destructuring, we might want to collect the rest of the elements into a separate array.\nThe result is similar to <code>Array.prototype.slice()</code>, as shown below:\n<blockquote>const [a, b, ...arr] = [1, 2, 3, 4, 5, 7];<br>console.log(a, b); // 1, 2<br>console.log(arr); // [3, 4, 5, 7]</blockquote>\nVariables <code>a</code> and <code>b</code> take the first and second values from the array. After that, because of rest operator's presence, <code>arr</code> gets rest of the values in the form of an array.\nThe rest element only works correctly as the last variable in the list. As in, you cannot use the rest operator to catch a subarray that leaves out last element of the original array.\n"},
"587d7b8c367417b2b2512b56" : {"id":"587d7b8c367417b2b2512b56","title":"Use export to Reuse a Code Block","videoUrl":"","content":"\nIn the previous challenge, you learned about <code>import</code> and how it can be leveraged to import small amounts of code from large files. In order for this to work, though, we must utilize one of the statements that goes with <code>import</code>, known as <dfn>export</dfn>. When we want some code - a function, or a variable - to be usable in another file, we must export it in order to import it into another file. Like <code>import</code>, <code>export</code> is a non-browser feature.\nThe following is what we refer to as a <dfn>named export</dfn>. With this, we can import any code we export into another file with the <code>import</code> syntax you learned in the last lesson. Here's an example:\n<blockquote>const capitalizeString = (string) => {<br>&nbsp;&nbsp;return string.charAt(0).toUpperCase() + string.slice(1);<br>}<br>export { capitalizeString } //How to export functions.<br>export const foo = \"bar\"; //How to export variables.</blockquote>\nAlternatively, if you would like to compact all your <code>export</code> statements into one line, you can take this approach:\n<blockquote>const capitalizeString = (string) => {<br>&nbsp;&nbsp;return string.charAt(0).toUpperCase() + string.slice(1);<br>}<br>const foo = \"bar\";<br>export { capitalizeString, foo }</blockquote>\nEither approach is perfectly acceptable.\n"},
"587d7b8c367417b2b2512b54" : {"id":"587d7b8c367417b2b2512b54","title":"Use getters and setters to Control Access to an Object","videoUrl":"","content":"\nYou can obtain values from an object, and set a value of a property within an object.\nThese are classically called <dfn>getters</dfn> and <dfn>setters</dfn>.\nGetter functions are meant to simply return (get) the value of an object's private variable to the user without the user directly accessing the private variable.\nSetter functions are meant to modify (set) the value of an object's private variable based on the value passed into the setter function. This change could involve calculations, or even overwriting the previous value completely.<br><br>\n<blockquote>class Book {<br>&nbsp;&nbsp;constructor(author) {<br>&nbsp;&nbsp;&nbsp;&nbsp;this._author = author;<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;// getter<br>&nbsp;&nbsp;get writer(){<br>&nbsp;&nbsp;&nbsp;&nbsp;return this._author;<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;// setter<br>&nbsp;&nbsp;set writer(updatedAuthor){<br>&nbsp;&nbsp;&nbsp;&nbsp;this._author = updatedAuthor;<br>&nbsp;&nbsp;}<br>}<br>const lol = new Book('anonymous');<br>console.log(lol.writer);&nbsp;&nbsp;// anonymous<br>lol.writer = 'wut';<br>console.log(lol.writer);&nbsp;&nbsp;// wut</blockquote>\nNotice the syntax we are using to invoke the getter and setter - as if they are not even functions.\nGetters and setters are important, because they hide internal implementation details.\n<br><br>\n<strong>Note:</strong><br>It is a convention to precede the name of a private variable with an underscore (<code>_</code>). The practice itself does not make a variable private.\n"},
"587d7b88367417b2b2512b47" : {"id":"587d7b88367417b2b2512b47","title":"Use the Rest Operator with Function Parameters","videoUrl":"","content":"\nIn order to help us create more flexible functions, ES6 introduces the <dfn>rest operator</dfn> for function parameters. With the rest operator, you can create functions that take a variable number of arguments. These arguments are stored in an array that can be accessed later from inside the function.\nCheck out this code:\n<blockquote>function howMany(...args) {<br>&nbsp;&nbsp;return \"You have passed \" + args.length + \" arguments.\";<br>}<br>console.log(howMany(0, 1, 2)); // You have passed 3 arguments<br>console.log(howMany(\"string\", null, [1, 2, 3], { })); // You have passed 4 arguments.</blockquote>\nThe rest operator eliminates the need to check the <code>args</code> array and allows us to apply <code>map()</code>, <code>filter()</code> and <code>reduce()</code> on the parameters array.\n"},
"587d7b89367417b2b2512b48" : {"id":"587d7b89367417b2b2512b48","title":"Use the Spread Operator to Evaluate Arrays In-Place","videoUrl":"","content":"\nES6 introduces the <dfn>spread operator</dfn>, which allows us to expand arrays and other expressions in places where multiple parameters or elements are expected.\nThe ES5 code below uses <code>apply()</code> to compute the maximum value in an array:\n<blockquote>var arr = [6, 89, 3, 45];<br>var maximus = Math.max.apply(null, arr); // returns 89</blockquote>\nWe had to use <code>Math.max.apply(null, arr)</code> because <code>Math.max(arr)</code> returns <code>NaN</code>. <code>Math.max()</code> expects comma-separated arguments, but not an array.\nThe spread operator makes this syntax much better to read and maintain.\n<blockquote>const arr = [6, 89, 3, 45];<br>const maximus = Math.max(...arr); // returns 89</blockquote>\n<code>...arr</code> returns an unpacked array. In other words, it <em>spreads</em> the array.\nHowever, the spread operator only works in-place, like in an argument to a function or in an array literal. The following code will not work:\n<blockquote>const spreaded = ...arr; // will throw a syntax error</blockquote>\n"},
"587d7b8c367417b2b2512b57" : {"id":"587d7b8c367417b2b2512b57","title":"Use * to Import Everything from a File","videoUrl":"","content":"\nSuppose you have a file that you wish to import all of its contents into the current file. This can be done with the <dfn>import *</dfn> syntax.\nHere's an example where the contents of a file named <code>\"math_functions\"</code> are imported into a file in the same directory:\n<blockquote>import * as myMathModule from \"math_functions\";<br>myMathModule.add(2,3);<br>myMathModule.subtract(5,3);</blockquote>\nAnd breaking down that code:\n<blockquote>import * as object_with_name_of_your_choice from \"file_path_goes_here\"<br>object_with_name_of_your_choice.imported_function</blockquote>\nYou may use any name following the <code>import * as </code>portion of the statement. In order to utilize this method, it requires an object that receives the imported values. From here, you will use the dot notation to call your imported values.\n"},
"587d7b88367417b2b2512b44" : {"id":"587d7b88367417b2b2512b44","title":"Write Arrow Functions with Parameters","videoUrl":"","content":"\nJust like a regular function, you can pass arguments into an arrow function.\n<blockquote>// doubles input value and returns it<br>const doubler = (item) => item * 2;</blockquote>\nIf an arrow function has a single argument, the parentheses enclosing the argument may be omitted.\n<blockquote>// the same function, without the argument parentheses<br>const doubler = item => item * 2;</blockquote>\nIt is possible to pass more than one argument into an arrow function.\n<blockquote>// multiplies the first input value by the second and returns it<br>const multiplier = (item, multi) => item * multi;</blockquote>\n"},
"587d7b8b367417b2b2512b50" : {"id":"587d7b8b367417b2b2512b50","title":"Write Concise Declarative Functions with ES6","videoUrl":"","content":"\nWhen defining functions within objects in ES5, we have to use the keyword <code>function</code> as follows:\n<blockquote>const person = {<br>&nbsp;&nbsp;name: \"Taylor\",<br>&nbsp;&nbsp;sayHello: function() {<br>&nbsp;&nbsp;&nbsp;&nbsp;return `Hello! My name is ${this.name}.`;<br>&nbsp;&nbsp;}<br>};</blockquote>\nWith ES6, You can remove the <code>function</code> keyword and colon altogether when defining functions in objects. Here's an example of this syntax:\n<blockquote>const person = {<br>&nbsp;&nbsp;name: \"Taylor\",<br>&nbsp;&nbsp;sayHello() {<br>&nbsp;&nbsp;&nbsp;&nbsp;return `Hello! My name is ${this.name}.`;<br>&nbsp;&nbsp;}<br>};</blockquote>\n"},
"587d7b8a367417b2b2512b4f" : {"id":"587d7b8a367417b2b2512b4f","title":"Write Concise Object Literal Declarations Using Simple Fields","videoUrl":"","content":"\nES6 adds some nice support for easily defining object literals.\nConsider the following code:\n<blockquote>const getMousePosition = (x, y) => ({<br>&nbsp;&nbsp;x: x,<br>&nbsp;&nbsp;y: y<br>});</blockquote>\n<code>getMousePosition</code> is a simple function that returns an object containing two fields.\nES6 provides the syntactic sugar to eliminate the redundancy of having to write <code>x: x</code>. You can simply write <code>x</code> once, and it will be converted to<code>x: x</code> (or something equivalent) under the hood.\nHere is the same function from above rewritten to use this new syntax:\n<blockquote>const getMousePosition = (x, y) => ({ x, y });</blockquote>\n"},
"587d7b88367417b2b2512b45" : {"id":"587d7b88367417b2b2512b45","title":"Write Higher Order Arrow Functions","videoUrl":"","content":"\nIt's time we see how powerful arrow functions are when processing data.\nArrow functions work really well with higher order functions, such as <code>map()</code>, <code>filter()</code>, and <code>reduce()</code>, that take other functions as arguments for processing collections of data.\nRead the following code:\n<blockquote>FBPosts.filter(function(post) {<br>&nbsp;&nbsp;return post.thumbnail !== null && post.shares > 100 && post.likes > 500;<br>})</blockquote>\nWe have written this with <code>filter()</code> to at least make it somewhat readable. Now compare it to the following code which uses arrow function syntax instead:\n<blockquote>FBPosts.filter((post) => post.thumbnail !== null && post.shares > 100 && post.likes > 500)</blockquote>\nThis code is more succinct and accomplishes the same task with fewer lines of code.\n"},
"587d7da9367417b2b2512b67" : {"id":"587d7da9367417b2b2512b67","title":"Add Elements to the End of an Array Using concat Instead of push","videoUrl":"","content":"\nFunctional programming is all about creating and using non-mutating functions.\nThe last challenge introduced the <code>concat</code> method as a way to combine arrays into a new one without mutating the original arrays. Compare <code>concat</code> to the <code>push</code> method. <code>Push</code> adds an item to the end of the same array it is called on, which mutates that array. Here's an example:\n<blockquote>var arr = [1, 2, 3];<br>arr.push([4, 5, 6]);<br>// arr is changed to [1, 2, 3, [4, 5, 6]]<br>// Not the functional programming way</blockquote>\n<code>Concat</code> offers a way to add new items to the end of an array without any mutating side effects.\n"},
"587d7dab367417b2b2512b6d" : {"id":"587d7dab367417b2b2512b6d","title":"Apply Functional Programming to Convert Strings to URL Slugs","videoUrl":"","content":"\nThe last several challenges covered a number of useful array and string methods that follow functional programming principles. We've also learned about <code>reduce</code>, which is a powerful method used to reduce problems to simpler forms. From computing averages to sorting, any array operation can be achieved by applying it. Recall that <code>map</code> and <code>filter</code> are special cases of <code>reduce</code>.\nLet's combine what we've learned to solve a practical problem.\nMany content management sites (CMS) have the titles of a post added to part of the URL for simple bookmarking purposes. For example, if you write a Medium post titled \"Stop Using Reduce\", it's likely the URL would have some form of the title string in it (\".../stop-using-reduce\"). You may have already noticed this on the freeCodeCamp site.\n"},
"587d7b8e367417b2b2512b5e" : {"id":"587d7b8e367417b2b2512b5e","title":"Avoid Mutations and Side Effects Using Functional Programming","videoUrl":"","content":"\nIf you haven't already figured it out, the issue in the previous challenge was with the <code>splice</code> call in the <code>tabClose()</code> function. Unfortunately, <code>splice</code> changes the original array it is called on, so the second call to it used a modified array, and gave unexpected results.\nThis is a small example of a much larger pattern - you call a function on a variable, array, or an object, and the function changes the variable or something in the object.\nOne of the core principles of functional programming is to not change things. Changes lead to bugs. It's easier to prevent bugs knowing that your functions don't change anything, including the function arguments or any global variable.\nThe previous example didn't have any complicated operations but the <code>splice</code> method changed the original array, and resulted in a bug.\nRecall that in functional programming, changing or altering things is called <code>mutation</code>, and the outcome is called a <code>side effect</code>. A function, ideally, should be a <code>pure function</code>, meaning that it does not cause any side effects.\nLet's try to master this discipline and not alter any variable or object in our code.\n"},
"587d7daa367417b2b2512b6c" : {"id":"587d7daa367417b2b2512b6c","title":"Combine an Array into a String Using the join Method","videoUrl":"","content":"\nThe <code>join</code> method is used to join the elements of an array together to create a string. It takes an argument for the delimiter that is used to separate the array elements in the string.\nHere's an example:\n<blockquote>var arr = [\"Hello\", \"World\"];<br>var str = arr.join(\" \");<br>// Sets str to \"Hello World\"</blockquote>\n"},
"587d7da9367417b2b2512b66" : {"id":"587d7da9367417b2b2512b66","title":"Combine Two Arrays Using the concat Method","videoUrl":"","content":"\n<code>Concatenation</code> means to join items end to end. JavaScript offers the <code>concat</code> method for both strings and arrays that work in the same way. For arrays, the method is called on one, then another array is provided as the argument to <code>concat</code>, which is added to the end of the first array. It returns a new array and does not mutate either of the original arrays. Here's an example:\n<blockquote>[1, 2, 3].concat([4, 5, 6]);<br>// Returns a new array [1, 2, 3, 4, 5, 6]</blockquote>\n"},
"587d7b8f367417b2b2512b62" : {"id":"587d7b8f367417b2b2512b62","title":"Implement map on a Prototype","videoUrl":"","content":"\nAs you have seen from applying <code>Array.prototype.map()</code>, or simply <code>map()</code> earlier, the <code>map</code> method returns an array of the same length as the one it was called on. It also doesn't alter the original array, as long as its callback function doesn't.\nIn other words, <code>map</code> is a pure function, and its output depends solely on its inputs. Plus, it takes another function as its argument.\nIt would teach us a lot about <code>map</code> to try to implement a version of it that behaves exactly like the <code>Array.prototype.map()</code> with a <code>for</code> loop or <code>Array.prototype.forEach()</code>.\nNote: A pure function is allowed to alter local variables defined within its scope, although, it's preferable to avoid that as well.\n"},
"587d7b8f367417b2b2512b64" : {"id":"587d7b8f367417b2b2512b64","title":"Implement the filter Method on a Prototype","videoUrl":"","content":"\nIt would teach us a lot about the <code>filter</code> method if we try to implement a version of it that behaves exactly like <code>Array.prototype.filter()</code>. It can use either a <code>for</code> loop or <code>Array.prototype.forEach()</code>.\nNote: A pure function is allowed to alter local variables defined within its scope, although, it's preferable to avoid that as well.\n"},
"587d7dab367417b2b2512b70" : {"id":"587d7dab367417b2b2512b70","title":"Introduction to Currying and Partial Application","videoUrl":"","content":"\nThe <code>arity</code> of a function is the number of arguments it requires. <code>Currying</code> a function means to convert a function of N <code>arity</code> into N functions of <code>arity</code> 1.\nIn other words, it restructures a function so it takes one argument, then returns another function that takes the next argument, and so on.\nHere's an example:\n<blockquote>//Un-curried function<br>function unCurried(x, y) {<br>&nbsp;&nbsp;return x + y;<br>}<br><br>//Curried function<br>function curried(x) {<br>&nbsp;&nbsp;return function(y) {<br>&nbsp;&nbsp;&nbsp;&nbsp;return x + y;<br>&nbsp;&nbsp;}<br>}\n<br>//Alternative using ES6\n<br>const curried = x => y => x + y\n<br>\n<br>curried(1)(2) // Returns 3</blockquote>\nThis is useful in your program if you can't supply all the arguments to a function at one time. You can save each function call into a variable, which will hold the returned function reference that takes the next argument when it's available. Here's an example using the <code>curried</code> function in the example above:\n<blockquote>// Call a curried function in parts:<br>var funcForY = curried(1);<br>console.log(funcForY(2)); // Prints 3</blockquote>\nSimilarly, <code>partial application</code> can be described as applying a few arguments to a function at a time and returning another function that is applied to more arguments.\nHere's an example:\n<blockquote>//Impartial function<br>function impartial(x, y, z) {<br>&nbsp;&nbsp;return x + y + z;<br>}<br>var partialFn = impartial.bind(this, 1, 2);<br>partialFn(10); // Returns 13</blockquote>\n"},
"587d7b8d367417b2b2512b5b" : {"id":"587d7b8d367417b2b2512b5b","title":"Learn About Functional Programming","videoUrl":"","content":"\nFunctional programming is a style of programming where solutions are simple, isolated functions, without any side effects outside of the function scope.\n<code>INPUT -> PROCESS -> OUTPUT</code>\nFunctional programming is about:\n1) Isolated functions - there is no dependence on the state of the program, which includes global variables that are subject to change\n2) Pure functions - the same input always gives the same output\n3) Functions with limited side effects - any changes, or mutations, to the state of the program outside the function are carefully controlled\n"},
"587d7b8e367417b2b2512b5f" : {"id":"587d7b8e367417b2b2512b5f","title":"Pass Arguments to Avoid External Dependence in a Function","videoUrl":"","content":"\nThe last challenge was a step closer to functional programming principles, but there is still something missing.\nWe didn't alter the global variable value, but the function <code>incrementer</code> would not work without the global variable <code>fixedValue</code> being there.\nAnother principle of functional programming is to always declare your dependencies explicitly. This means if a function depends on a variable or object being present, then pass that variable or object directly into the function as an argument.\nThere are several good consequences from this principle. The function is easier to test, you know exactly what input it takes, and it won't depend on anything else in your program.\nThis can give you more confidence when you alter, remove, or add new code. You would know what you can or cannot change and you can see where the potential traps are.\nFinally, the function would always produce the same output for the same set of inputs, no matter what part of the code executes it.\n"},
"587d7b8f367417b2b2512b60" : {"id":"587d7b8f367417b2b2512b60","title":"Refactor Global Variables Out of Functions","videoUrl":"","content":"\nSo far, we have seen two distinct principles for functional programming:\n1) Don't alter a variable or object - create new variables and objects and return them if need be from a function.\n2) Declare function arguments - any computation inside a function depends only on the arguments, and not on any global object or variable.\nAdding one to a number is not very exciting, but we can apply these principles when working with arrays or more complex objects.\n"},
"9d7123c8c441eeafaeb5bdef" : {"id":"9d7123c8c441eeafaeb5bdef","title":"Remove Elements from an Array Using slice Instead of splice","videoUrl":"","content":"\nA common pattern while working with arrays is when you want to remove items and keep the rest of the array. JavaScript offers the <code>splice</code> method for this, which takes arguments for the index of where to start removing items, then the number of items to remove. If the second argument is not provided, the default is to remove items through the end. However, the <code>splice</code> method mutates the original array it is called on. Here's an example:\n<blockquote>var cities = [\"Chicago\", \"Delhi\", \"Islamabad\", \"London\", \"Berlin\"];<br>cities.splice(3, 1); // Returns \"London\" and deletes it from the cities array<br>// cities is now [\"Chicago\", \"Delhi\", \"Islamabad\", \"Berlin\"]</blockquote>\nAs we saw in the last challenge, the <code>slice</code> method does not mutate the original array, but returns a new one which can be saved into a variable. Recall that the <code>slice</code> method takes two arguments for the indices to begin and end the slice (the end is non-inclusive), and returns those items in a new array. Using the <code>slice</code> method instead of <code>splice</code> helps to avoid any array-mutating side effects.\n"},
"587d7da9367417b2b2512b6a" : {"id":"587d7da9367417b2b2512b6a","title":"Return a Sorted Array Without Changing the Original Array","videoUrl":"","content":"\nA side effect of the <code>sort</code> method is that it changes the order of the elements in the original array. In other words, it mutates the array in place. One way to avoid this is to first concatenate an empty array to the one being sorted (remember that <code>concat</code> returns a new array), then run the <code>sort</code> method.\n"},
"587d7b90367417b2b2512b65" : {"id":"587d7b90367417b2b2512b65","title":"Return Part of an Array Using the slice Method","videoUrl":"","content":"\nThe <code>slice</code> method returns a copy of certain elements of an array. It can take two arguments, the first gives the index of where to begin the slice, the second is the index for where to end the slice (and it's non-inclusive). If the arguments are not provided, the default is to start at the beginning of the array through the end, which is an easy way to make a copy of the entire array. The <code>slice</code> method does not mutate the original array, but returns a new one.\nHere's an example:\n<blockquote>var arr = [\"Cat\", \"Dog\", \"Tiger\", \"Zebra\"];<br>var newArray = arr.slice(1, 3);<br>// Sets newArray to [\"Dog\", \"Tiger\"]</blockquote>\n"},
"587d7da9367417b2b2512b69" : {"id":"587d7da9367417b2b2512b69","title":"Sort an Array Alphabetically using the sort Method","videoUrl":"","content":"\nThe <code>sort</code> method sorts the elements of an array according to the callback function.\nFor example:\n<blockquote>function ascendingOrder(arr) {<br>&nbsp;&nbsp;return arr.sort(function(a, b) {<br>&nbsp;&nbsp;&nbsp;&nbsp;return a - b;<br>&nbsp;&nbsp;});<br>}<br>ascendingOrder([1, 5, 2, 3, 4]);<br>// Returns [1, 2, 3, 4, 5]<br><br>function reverseAlpha(arr) {<br>&nbsp;&nbsp;return arr.sort(function(a, b) {<br>&nbsp;&nbsp;&nbsp;&nbsp;return a === b ? 0 : a < b ? 1 : -1;<br>&nbsp;&nbsp;});<br>}<br>reverseAlpha(['l', 'h', 'z', 'b', 's']);<br>// Returns ['z', 's', 'l', 'h', 'b']</blockquote>\nNote: It's encouraged to provide a callback function to specify how to sort the array items. JavaScript's default sorting method is by string Unicode point value, which may return unexpected results.\n"},
"587d7daa367417b2b2512b6b" : {"id":"587d7daa367417b2b2512b6b","title":"Split a String into an Array Using the split Method","videoUrl":"","content":"\nThe <code>split</code> method splits a string into an array of strings. It takes an argument for the delimiter, which can be a character to use to break up the string or a regular expression. For example, if the delimiter is a space, you get an array of words, and if the delimiter is an empty string, you get an array of each character in the string.\nHere are two examples that split one string by spaces, then another by digits using a regular expression:\n<blockquote>var str = \"Hello World\";<br>var bySpace = str.split(\" \");<br>// Sets bySpace to [\"Hello\", \"World\"]<br><br>var otherString = \"How9are7you2today\";<br>var byDigits = otherString.split(/\\d/);<br>// Sets byDigits to [\"How\", \"are\", \"you\", \"today\"]</blockquote>\nSince strings are immutable, the <code>split</code> method makes it easier to work with them.\n"},
"587d7b8e367417b2b2512b5c" : {"id":"587d7b8e367417b2b2512b5c","title":"Understand Functional Programming Terminology","videoUrl":"","content":"\nThe FCC Team had a mood swing and now wants two types of tea: green tea and black tea. General Fact: Client mood swings are pretty common.\nWith that information, we'll need to revisit the <code>getTea</code> function from last challenge to handle various tea requests. We can modify <code>getTea</code> to accept a function as a parameter to be able to change the type of tea it prepares. This makes <code>getTea</code> more flexible, and gives the programmer more control when client requests change.\nBut first, let's cover some functional terminology:\n<code>Callbacks</code> are the functions that are slipped or passed into another function to decide the invocation of that function. You may have seen them passed to other methods, for example in <code>filter</code>, the callback function tells JavaScript the criteria for how to filter an array.\nFunctions that can be assigned to a variable, passed into another function, or returned from another function just like any other normal value, are called <code>first class</code> functions. In JavaScript, all functions are <code>first class</code> functions.\nThe functions that take a function as an argument, or return a function as a return value are called <code>higher order</code> functions.\nWhen the functions are passed in to another function or returned from another function, then those functions which gets passed in or returned can be called a <code>lambda</code>.\n"},
"587d7b8e367417b2b2512b5d" : {"id":"587d7b8e367417b2b2512b5d","title":"Understand the Hazards of Using Imperative Code","videoUrl":"","content":"\nFunctional programming is a good habit. It keeps your code easy to manage, and saves you from sneaky bugs. But before we get there, let's look at an imperative approach to programming to highlight where you may have issues.\nIn English (and many other languages), the imperative tense is used to give commands. Similarly, an imperative style in programming is one that gives the computer a set of statements to perform a task.\nOften the statements change the state of the program, like updating global variables. A classic example is writing a <code>for</code> loop that gives exact directions to iterate over the indices of an array.\nIn contrast, functional programming is a form of declarative programming. You tell the computer what you want done by calling a method or function.\nJavaScript offers many predefined methods that handle common tasks so you don't need to write out how the computer should perform them. For example, instead of using the <code>for</code> loop mentioned above, you could call the <code>map</code> method which handles the details of iterating over an array. This helps to avoid semantic errors, like the \"Off By One Errors\" that were covered in the Debugging section.\nConsider the scenario: you are browsing the web in your browser, and want to track the tabs you have opened. Let's try to model this using some simple object-oriented code.\nA Window object is made up of tabs, and you usually have more than one Window open. The titles of each open site in each Window object is held in an array. After working in the browser (opening new tabs, merging windows, and closing tabs), you want to print the tabs that are still open. Closed tabs are removed from the array and new tabs (for simplicity) get added to the end of it.\nThe code editor shows an implementation of this functionality with functions for <code>tabOpen()</code>, <code>tabClose()</code>, and <code>join()</code>. The array <code>tabs</code> is part of the Window object that stores the name of the open pages.\n<h4>Instructions<h4>\nRun the code in the editor. It's using a method that has side effects in the program, causing incorrect output. The final list of open tabs should be <code>['FB', 'Gitter', 'Reddit', 'Twitter', 'Medium', 'new tab', 'Netflix', 'YouTube', 'Vine', 'GMail', 'Work mail', 'Docs', 'freeCodeCamp', 'new tab']</code> but the output will be slightly different.\nWork through the code and see if you can figure out the problem, then advance to the next challenge to learn more.\n"},
"587d7dab367417b2b2512b6e" : {"id":"587d7dab367417b2b2512b6e","title":"Use the every Method to Check that Every Element in an Array Meets a Criteria","videoUrl":"","content":"\nThe <code>every</code> method works with arrays to check if <em>every</em> element passes a particular test. It returns a Boolean value - <code>true</code> if all values meet the criteria, <code>false</code> if not.\nFor example, the following code would check if every element in the <code>numbers</code> array is less than 10:\n<blockquote>var numbers = [1, 5, 8, 0, 10, 11];<br>numbers.every(function(currentValue) {<br>&nbsp;&nbsp;return currentValue < 10;<br>});<br>// Returns false</blockquote>\n"},
"587d7b8f367417b2b2512b63" : {"id":"587d7b8f367417b2b2512b63","title":"Use the filter Method to Extract Data from an Array","videoUrl":"","content":"\nAnother useful array function is <code>Array.prototype.filter()</code>, or simply <code>filter()</code>. The <code>filter</code> method returns a new array which is at most as long as the original array, but usually has fewer items.\n<code>Filter</code> doesn't alter the original array, just like <code>map</code>. It takes a callback function that applies the logic inside the callback on each element of the array. If an element returns true based on the criteria in the callback function, then it is included in the new array.\n"},
"587d7b8f367417b2b2512b61" : {"id":"587d7b8f367417b2b2512b61","title":"Use the map Method to Extract Data from an Array","videoUrl":"","content":"\nSo far we have learned to use pure functions to avoid side effects in a program. Also, we have seen the value in having a function only depend on its input arguments.\nThis is only the beginning. As its name suggests, functional programming is centered around a theory of functions.\nIt would make sense to be able to pass them as arguments to other functions, and return a function from another function. Functions are considered <code>First Class Objects</code> in JavaScript, which means they can be used like any other object. They can be saved in variables, stored in an object, or passed as function arguments.\nLet's start with some simple array functions, which are methods on the array object prototype. In this exercise we are looking at <code>Array.prototype.map()</code>, or more simply <code>map</code>.\nRemember that the <code>map</code> method is a way to iterate over each item in an array. It creates a new array (without changing the original one) after applying a callback function to every element.\n"},
"587d7da9367417b2b2512b68" : {"id":"587d7da9367417b2b2512b68","title":"Use the reduce Method to Analyze Data","videoUrl":"","content":"\n<code>Array.prototype.reduce()</code>, or simply <code>reduce()</code>, is the most general of all array operations in JavaScript. You can solve almost any array processing problem using the <code>reduce</code> method.\nThis is not the case with the <code>filter</code> and <code>map</code> methods since they do not allow interaction between two different elements of the array. For example, if you want to compare elements of the array, or add them together, <code>filter</code> or <code>map</code> could not process that.\nThe <code>reduce</code> method allows for more general forms of array processing, and it's possible to show that both <code>filter</code> and <code>map</code> can be derived as a special application of <code>reduce</code>.\nHowever, before we get there, let's practice using <code>reduce</code> first.\n"},
"587d7dab367417b2b2512b6f" : {"id":"587d7dab367417b2b2512b6f","title":"Use the some Method to Check that Any Elements in an Array Meet a Criteria","videoUrl":"","content":"\nThe <code>some</code> method works with arrays to check if <em>any</em> element passes a particular test. It returns a Boolean value - <code>true</code> if any of the values meet the criteria, <code>false</code> if not.\nFor example, the following code would check if any element in the <code>numbers</code> array is less than 10:\n<blockquote>var numbers = [10, 50, 8, 220, 110, 11];<br>numbers.some(function(currentValue) {<br>&nbsp;&nbsp;return currentValue < 10;<br>});<br>// Returns true</blockquote>\n"},
"a97fd23d9b809dac9921074f" : {"id":"a97fd23d9b809dac9921074f","title":"Arguments Optional","videoUrl":"","content":"\nCreate a function that sums two arguments together. If only one argument is provided, then return a function that expects one argument and returns the sum.\nFor example, <code>addTogether(2, 3)</code> should return <code>5</code>, and <code>addTogether(2)</code> should return a function.\nCalling this returned function with a single argument will then return the sum:\n<code>var sumTwoAnd = addTogether(2);</code>\n<code>sumTwoAnd(3)</code> returns <code>5</code>.\nIf either argument isn't a valid number, return undefined.\nRemember to use <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> if you get stuck. Try to pair program. Write your own code.\n"},
"a8d97bd4c764e91f9d2bda01" : {"id":"a8d97bd4c764e91f9d2bda01","title":"Binary Agents","videoUrl":"","content":"\nReturn an English translated sentence of the passed binary string.\nThe binary string will be space separated.\nRemember to use <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> if you get stuck. Try to pair program. Write your own code.\n"},
"a6b0bb188d873cb2c8729495" : {"id":"a6b0bb188d873cb2c8729495","title":"Convert HTML Entities","videoUrl":"","content":"\nConvert the characters <code>&</code>, <code><</code>, <code>></code>, <code>\"</code> (double quote), and <code>'</code> (apostrophe), in a string to their corresponding HTML entities.\nRemember to use <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> if you get stuck. Try to pair program. Write your own code.\n"},
"a5de63ebea8dbee56860f4f2" : {"id":"a5de63ebea8dbee56860f4f2","title":"Diff Two Arrays","videoUrl":"","content":"\nCompare two arrays and return a new array with any items only found in one of the two given arrays, but not both. In other words, return the symmetric difference of the two arrays.\nRemember to use <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> if you get stuck. Try to pair program. Write your own code.\n<strong>Note</strong><br>You can return the array with its elements in any order.\n"},
"afd15382cdfb22c9efe8b7de" : {"id":"afd15382cdfb22c9efe8b7de","title":"DNA Pairing","videoUrl":"","content":"\nThe DNA strand is missing the pairing element. Take each character, get its pair, and return the results as a 2d array.\n<a href=\"http://en.wikipedia.org/wiki/Base_pair\" target=\"_blank\">Base pairs</a> are a pair of AT and CG. Match the missing element to the provided character.\nReturn the provided character as the first element in each array.\nFor example, for the input GCG, return [[\"G\", \"C\"], [\"C\",\"G\"],[\"G\", \"C\"]]\nThe character and its pair are paired up in an array, and all the arrays are grouped into one encapsulating array.\nRemember to use <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> if you get stuck. Try to pair program. Write your own code.\n"},
"a5deed1811a43193f9f1c841" : {"id":"a5deed1811a43193f9f1c841","title":"Drop it","videoUrl":"","content":"\nGiven the array <code>arr</code>, iterate through and remove each element starting from the first element (the 0 index) until the function <code>func</code> returns <code>true</code> when the iterated element is passed through it.\nThen return the rest of the array once the condition is satisfied, otherwise, <code>arr</code> should be returned as an empty array.\nRemember to use <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> if you get stuck. Try to pair program. Write your own code.\n"},
"a10d2431ad0c6a099a4b8b52" : {"id":"a10d2431ad0c6a099a4b8b52","title":"Everything Be True","videoUrl":"","content":"\nCheck if the predicate (second argument) is <dfn>truthy</dfn> on all elements of a collection (first argument).\nIn other words, you are given an array collection of objects. The predicate <code>pre</code> will be an object property and you need to return <code>true</code> if its value is <code>truthy</code>. Otherwise, return <code>false</code>.\nIn JavaScript, <code>truthy</code> values are values that translate to <code>true</code> when evaluated in a Boolean context.\nRemember, you can access object properties through either dot notation or <code>[]</code> notation.\nRemember to use <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> if you get stuck. Try to pair program. Write your own code.\n"},
"a2f1d72d9b908d0bd72bb9f6" : {"id":"a2f1d72d9b908d0bd72bb9f6","title":"Make a Person","videoUrl":"","content":"\nFill in the object constructor with the following methods below:\n<blockquote>getFirstName()\ngetLastName()\ngetFullName()\nsetFirstName(first)\nsetLastName(last)\nsetFullName(firstAndLast)</blockquote>\nRun the tests to see the expected output for each method.\nThe methods that take an argument must accept only one argument and it has to be a string.\nThese methods must be the only available means of interacting with the object.\nRemember to use <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> if you get stuck. Try to pair program. Write your own code.\n"},
"af4afb223120f7348cdfc9fd" : {"id":"af4afb223120f7348cdfc9fd","title":"Map the Debris","videoUrl":"","content":"\nReturn a new array that transforms the elements' average altitude into their orbital periods (in seconds).\nThe array will contain objects in the format <code>{name: 'name', avgAlt: avgAlt}</code>.\nYou can read about orbital periods <a href=\"http://en.wikipedia.org/wiki/Orbital_period\" target='_blank'>on Wikipedia</a>.\nThe values should be rounded to the nearest whole number. The body being orbited is Earth.\nThe radius of the earth is 6367.4447 kilometers, and the GM value of earth is 398600.4418 km<sup>3</sup>s<sup>-2</sup>.\nRemember to use <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> if you get stuck. Try to pair program. Write your own code.\n"},
"af7588ade1100bde429baf20" : {"id":"af7588ade1100bde429baf20","title":"Missing letters","videoUrl":"","content":"\nFind the missing letter in the passed letter range and return it.\nIf all letters are present in the range, return undefined.\nRemember to use <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> if you get stuck. Try to pair program. Write your own code.\n"},
"aa7697ea2477d1316795783b" : {"id":"aa7697ea2477d1316795783b","title":"Pig Latin","videoUrl":"","content":"\nTranslate the provided string to pig latin.\n<a href=\"http://en.wikipedia.org/wiki/Pig_Latin\" target=\"_blank\">Pig Latin</a> takes the first consonant (or consonant cluster) of an English word, moves it to the end of the word and suffixes an \"ay\".\nIf a word begins with a vowel you just add \"way\" to the end.\nIf a word does not contain a vowel, just add \"ay\" to the end.\nInput strings are guaranteed to be English words in all lowercase.\nRemember to use <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> if you get stuck. Try to pair program. Write your own code.\n"},
"a0b5010f579e69b815e7c5d6" : {"id":"a0b5010f579e69b815e7c5d6","title":"Search and Replace","videoUrl":"","content":"\nPerform a search and replace on the sentence using the arguments provided and return the new sentence.\nFirst argument is the sentence to perform the search and replace on.\nSecond argument is the word that you will be replacing (before).\nThird argument is what you will be replacing the second argument with (after).\n<strong>Note</strong><br> Preserve the case of the first character in the original word when you are replacing it. For example if you mean to replace the word \"Book\" with the word \"dog\", it should be replaced as \"Dog\"\nRemember to use <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> if you get stuck. Try to pair program. Write your own code.\n"},
"a39963a4c10bc8b4d4f06d7e" : {"id":"a39963a4c10bc8b4d4f06d7e","title":"Seek and Destroy","videoUrl":"","content":"\nYou will be provided with an initial array (the first argument in the destroyer function), followed by one or more arguments. Remove all elements from the initial array that are of the same value as these arguments.\n<strong>Note</strong><br> You have to use the <code>arguments</code> object.\nRemember to use <a href=\"http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514\" target=\"_blank\">Read-Search-Ask</a> if you get stuck. Write your own code.\n"},
"ae9defd7acaf69703ab432ea" : {"id":"ae9defd7acaf69703ab432ea","title":"Smallest Common Multiple","videoUrl":"","content":"\nFind the smallest common multiple of the provided parameters that can be evenly divided by both, as well as by all sequential numbers in the range between these parameters.\nThe range will be an array of two numbers that will not necessarily be in numerical order.\nFor example, if given 1 and 3, find the smallest common multiple of both 1 and 3 that is also evenly divisible by all numbers <em>between</em> 1 and 3. The answer here would be 6.\nRemember to use <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> if you get stuck. Try to pair program. Write your own code.\n"},
"a105e963526e7de52b219be9" : {"id":"a105e963526e7de52b219be9","title":"Sorted Union","videoUrl":"","content":"\nWrite a function that takes two or more arrays and returns a new array of unique values in the order of the original provided arrays.\nIn other words, all values present from all arrays should be included in their original order, but with no duplicates in the final array.\nThe unique numbers should be sorted by their original order, but the final array should not be sorted in numerical order.\nCheck the assertion tests for examples.\nRemember to use <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> if you get stuck. Try to pair program. Write your own code.\n"},
"a103376db3ba46b2d50db289" : {"id":"a103376db3ba46b2d50db289","title":"Spinal Tap Case","videoUrl":"","content":"\nConvert a string to spinal case. Spinal case is all-lowercase-words-joined-by-dashes.\nRemember to use <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> if you get stuck. Try to pair program. Write your own code.\n"},
"ab306dbdcc907c7ddfc30830" : {"id":"ab306dbdcc907c7ddfc30830","title":"Steamroller","videoUrl":"","content":"\nFlatten a nested array. You must account for varying levels of nesting.\nRemember to use <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> if you get stuck. Try to pair program. Write your own code.\n"},
"a3566b1109230028080c9345" : {"id":"a3566b1109230028080c9345","title":"Sum All Numbers in a Range","videoUrl":"","content":"\nWe'll pass you an array of two numbers. Return the sum of those two numbers plus the sum of all the numbers between them.\nThe lowest number will not always come first.\nRemember to use <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> if you get stuck. Try to pair program. Write your own code.\n"},
"a5229172f011153519423690" : {"id":"a5229172f011153519423690","title":"Sum All Odd Fibonacci Numbers","videoUrl":"","content":"\nGiven a positive integer <code>num</code>, return the sum of all odd Fibonacci numbers that are less than or equal to <code>num</code>.\nThe first two numbers in the Fibonacci sequence are 1 and 1. Every additional number in the sequence is the sum of the two previous numbers. The first six numbers of the Fibonacci sequence are 1, 1, 2, 3, 5 and 8.\nFor example, <code>sumFibs(10)</code> should return <code>10</code> because all odd Fibonacci numbers less than or equal to <code>10</code> are 1, 1, 3, and 5.\nRemember to use <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> if you get stuck. Try to pair program. Write your own code.\n"},
"a3bfc1673c0526e06d3ac698" : {"id":"a3bfc1673c0526e06d3ac698","title":"Sum All Primes","videoUrl":"","content":"\nSum all the prime numbers up to and including the provided number.\nA prime number is defined as a number greater than one and having only two divisors, one and itself. For example, 2 is a prime number because it's only divisible by one and two.\nThe provided number may not be a prime.\nRemember to use <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> if you get stuck. Try to pair program. Write your own code.\n"},
"a8e512fbe388ac2f9198f0fa" : {"id":"a8e512fbe388ac2f9198f0fa","title":"Wherefore art thou","videoUrl":"","content":"\nMake a function that looks through an array of objects (first argument) and returns an array of all objects that have matching name and value pairs (second argument). Each name and value pair of the source object has to be present in the object from the collection if it is to be included in the returned array.\nFor example, if the first argument is <code>[{ first: \"Romeo\", last: \"Montague\" }, { first: \"Mercutio\", last: null }, { first: \"Tybalt\", last: \"Capulet\" }]</code>, and the second argument is <code>{ last: \"Capulet\" }</code>, then you must return the third object from the array (the first argument), because it contains the name and its value, that was passed on as the second argument.\nRemember to use <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> if you get stuck. Write your own code.\n"},
"56533eb9ac21ba0edf2244e2" : {"id":"56533eb9ac21ba0edf2244e2","title":"Caesars Cipher","videoUrl":"","content":"\nOne of the simplest and most widely known <dfn>ciphers</dfn> is a <code>Caesar cipher</code>, also known as a <code>shift cipher</code>. In a <code>shift cipher</code> the meanings of the letters are shifted by some set amount.\nA common modern use is the <a href=\"https://en.wikipedia.org/wiki/ROT13\" target='_blank'>ROT13</a> cipher, where the values of the letters are shifted by 13 places. Thus 'A' &harr; 'N', 'B' &harr;  'O' and so on.\nWrite a function which takes a <a href=\"https://en.wikipedia.org/wiki/ROT13\" target='_blank'>ROT13</a> encoded string as input and returns a decoded string.\nAll letters will be uppercase. Do not transform any non-alphabetic character (i.e. spaces, punctuation), but do pass them on.\nRemember to use <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> if you get stuck. Try to pair program. Write your own code.\n"},
"aa2e6f85cab2ab736c9a9b24" : {"id":"aa2e6f85cab2ab736c9a9b24","title":"Cash Register","videoUrl":"","content":"\nDesign a cash register drawer function <code>checkCashRegister()</code> that accepts purchase price as the first argument (<code>price</code>), payment as the second argument (<code>cash</code>), and cash-in-drawer (<code>cid</code>) as the third argument.\n<code>cid</code> is a 2D array listing available currency.\nThe <code>checkCashRegister()</code> function should always return an object with a <code>status</code> key and a <code>change</code> key.\nReturn <code>{status: \"INSUFFICIENT_FUNDS\", change: []}</code> if cash-in-drawer is less than the change due, or if you cannot return the exact change.\nReturn <code>{status: \"CLOSED\", change: [...]}</code> with cash-in-drawer as the value for the key <code>change</code> if it is equal to the change due.\nOtherwise, return <code>{status: \"OPEN\", change: [...]}</code>, with the change due in coins and bills, sorted in highest to lowest order, as the value of the <code>change</code> key.\nRemember to use <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> if you get stuck. Try to pair program. Write your own code.\n<table class='table table-striped'><tr><th>Currency Unit</th><th>Amount</th></tr><tr><td>Penny</td><td>$0.01 (PENNY)</td></tr><tr><td>Nickel</td><td>$0.05 (NICKEL)</td></tr><tr><td>Dime</td><td>$0.1 (DIME)</td></tr><tr><td>Quarter</td><td>$0.25 (QUARTER)</td></tr><tr><td>Dollar</td><td>$1 (DOLLAR)</td></tr><tr><td>Five Dollars</td><td>$5 (FIVE)</td></tr><tr><td>Ten Dollars</td><td>$10 (TEN)</td></tr><tr><td>Twenty Dollars</td><td>$20 (TWENTY)</td></tr><tr><td>One-hundred Dollars</td><td>$100 (ONE HUNDRED)</td></tr></table>\n"},
"aaa48de84e1ecc7c742e1124" : {"id":"aaa48de84e1ecc7c742e1124","title":"Palindrome Checker","videoUrl":"","content":"\nReturn <code>true</code> if the given string is a palindrome. Otherwise, return <code>false</code>.\nA <dfn>palindrome</dfn> is a word or sentence that's spelled the same way both forward and backward, ignoring punctuation, case, and spacing.\n<strong>Note</strong><br>You'll need to remove <strong>all non-alphanumeric characters</strong> (punctuation, spaces and symbols) and turn everything into the same case (lower or upper case) in order to check for palindromes.\nWe'll pass strings with varying formats, such as <code>\"racecar\"</code>, <code>\"RaceCar\"</code>, and <code>\"race CAR\"</code> among others.\nWe'll also pass strings with special symbols, such as <code>\"2A3*3a2\"</code>, <code>\"2A3  3a2\"</code>, and <code>\"2_A3*3#A2\"</code>.\nRemember to use <a href=\"http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514\" target=\"_blank\">Read-Search-Ask</a> if you get stuck. Write your own code.\n"},
"a7f4d8f2483413a6ce226cac" : {"id":"a7f4d8f2483413a6ce226cac","title":"Roman Numeral Converter","videoUrl":"","content":"\nConvert the given number into a roman numeral.\nAll <a href=\"http://www.mathsisfun.com/roman-numerals.html\" target=\"_blank\">roman numerals</a> answers should be provided in upper-case.\nRemember to use <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> if you get stuck. Try to pair program. Write your own code.\n"},
"aff0395860f5d3034dc0bfc9" : {"id":"aff0395860f5d3034dc0bfc9","title":"Telephone Number Validator","videoUrl":"","content":"\nReturn <code>true</code> if the passed string looks like a valid US phone number.\nThe user may fill out the form field any way they choose as long as it has the format of a valid US number. The following are examples of valid formats for US numbers (refer to the tests below for other variants):\n<blockquote>555-555-5555<br>(555)555-5555<br>(555) 555-5555<br>555 555 5555<br>5555555555<br>1 555 555 5555</blockquote>\nFor this challenge you will be presented with a string such as <code>800-692-7753</code> or <code>8oo-six427676;laskdjf</code>. Your job is to validate or reject the US phone number based on any combination of the formats provided above. The area code is required. If the country code is provided, you must confirm that the country code is <code>1</code>. Return <code>true</code> if the string is a valid US phone number; otherwise return <code>false</code>.\nRemember to use <a href='http://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> if you get stuck. Try to pair program. Write your own code.\n"},
"587d7db1367417b2b2512b87" : {"id":"587d7db1367417b2b2512b87","title":"Add Methods After Inheritance","videoUrl":"","content":"\nA constructor function that inherits its <code>prototype</code> object from a <code>supertype</code> constructor function can still have its own methods in addition to inherited methods.\nFor example, <code>Bird</code> is a constructor that inherits its <code>prototype</code> from <code>Animal</code>:\n<blockquote>function Animal() { }<br>Animal.prototype.eat = function() {<br>&nbsp;&nbsp;console.log(\"nom nom nom\");<br>};<br>function Bird() { }<br>Bird.prototype = Object.create(Animal.prototype);<br>Bird.prototype.constructor = Bird;</blockquote>\nIn addition to what is inherited from <code>Animal</code>, you want to add behavior that is unique to <code>Bird</code> objects. Here, <code>Bird</code> will get a <code>fly()</code> function. Functions are added to <code>Bird's</code> <code>prototype</code> the same way as any constructor function:\n<blockquote>Bird.prototype.fly = function() {<br>&nbsp;&nbsp;console.log(\"I'm flying!\");<br>};</blockquote>\nNow instances of <code>Bird</code> will have both <code>eat()</code> and <code>fly()</code> methods:\n<blockquote>let duck = new Bird();<br>duck.eat(); // prints \"nom nom nom\"<br>duck.fly(); // prints \"I'm flying!\"</blockquote>\n"},
"587d7daf367417b2b2512b7f" : {"id":"587d7daf367417b2b2512b7f","title":"Change the Prototype to a New Object","videoUrl":"","content":"\nUp until now you have been adding properties to the <code>prototype</code> individually:\n<blockquote>Bird.prototype.numLegs = 2;</blockquote>\nThis becomes tedious after more than a few properties.\n<blockquote>Bird.prototype.eat = function() {<br>&nbsp;&nbsp;console.log(\"nom nom nom\");<br>}<br><br>Bird.prototype.describe = function() {<br>&nbsp;&nbsp;console.log(\"My name is \" + this.name);<br>}</blockquote>\nA more efficient way is to set the <code>prototype</code> to a new object that already contains the properties. This way, the properties are added all at once:\n<blockquote>Bird.prototype = {<br>&nbsp;&nbsp;numLegs: 2, <br>&nbsp;&nbsp;eat: function() {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(\"nom nom nom\");<br>&nbsp;&nbsp;},<br>&nbsp;&nbsp;describe: function() {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(\"My name is \" + this.name);<br>&nbsp;&nbsp;}<br>};</blockquote>\n"},
"587d7dac367417b2b2512b73" : {"id":"587d7dac367417b2b2512b73","title":"Create a Basic JavaScript Object","videoUrl":"","content":"\nThink about things people see everyday, like cars, shops, and birds. These are all <code>objects</code>: tangible things people can observe and interact with.\nWhat are some qualities of these <code>objects</code>? A car has wheels. Shops sell items. Birds have wings.\nThese qualities, or <code>properties</code>, define what makes up an <code>object</code>. Note that similar <code>objects</code> share the same <code>properties</code>, but may have different values for those <code>properties</code>. For example, all cars have wheels, but not all cars have the same number of wheels.\n<code>Objects</code> in JavaScript are used to model real-world objects, giving them <code>properties</code> and behavior just like their real-world counterparts. Here's an example using these concepts to create a <code>duck</code> <code>object</code>:\n<blockquote>let duck = {<br>&nbsp;&nbsp;name: \"Aflac\",<br>&nbsp;&nbsp;numLegs: 2<br>};</blockquote>\nThis <code>duck</code> <code>object</code> has two property/value pairs: a <code>name</code> of \"Aflac\" and a <code>numLegs</code> of 2.\n"},
"587d7dad367417b2b2512b75" : {"id":"587d7dad367417b2b2512b75","title":"Create a Method on an Object","videoUrl":"","content":"\n<code>Objects</code> can have a special type of <code>property</code>, called a <code>method</code>.\n<code>Methods</code> are <code>properties</code> that are functions. This adds different behavior to an <code>object</code>. Here is the <code>duck</code> example with a method:\n<blockquote>let duck = {<br>&nbsp;&nbsp;name: \"Aflac\",<br>&nbsp;&nbsp;numLegs: 2,<br>&nbsp;&nbsp;sayName: function() {return \"The name of this duck is \" + duck.name + \".\";}<br>};<br>duck.sayName();<br>// Returns \"The name of this duck is Aflac.\"</blockquote>\nThe example adds the <code>sayName</code> <code>method</code>, which is a function that returns a sentence giving the name of the <code>duck</code>.\nNotice that the <code>method</code> accessed the <code>name</code> property in the return statement using <code>duck.name</code>. The next challenge will cover another way to do this.\n"},
"587d7dad367417b2b2512b77" : {"id":"587d7dad367417b2b2512b77","title":"Define a Constructor Function","videoUrl":"","content":"\n<code>Constructors</code> are functions that create new objects. They define properties and behaviors that will belong to the new object. Think of them as a blueprint for the creation of new objects.\nHere is an example of a <code>constructor</code>:\n<blockquote>function Bird() {<br>&nbsp;&nbsp;this.name = \"Albert\";<br>&nbsp;&nbsp;this.color = \"blue\";<br>&nbsp;&nbsp;this.numLegs = 2;<br>}</blockquote>\nThis <code>constructor</code> defines a <code>Bird</code> object with properties <code>name</code>, <code>color</code>, and <code>numLegs</code> set to Albert, blue, and 2, respectively.\n<code>Constructors</code> follow a few conventions:\n<ul><li><code>Constructors</code> are defined with a capitalized name to distinguish them from other functions that are not <code>constructors</code>.</li><li><code>Constructors</code> use the keyword <code>this</code> to set properties of the object they will create. Inside the <code>constructor</code>, <code>this</code> refers to the new object it will create.</li><li><code>Constructors</code> define properties and behaviors instead of returning a value as other functions might.</li></ul>\n"},
"587d7dae367417b2b2512b79" : {"id":"587d7dae367417b2b2512b79","title":"Extend Constructors to Receive Arguments","videoUrl":"","content":"\nThe <code>Bird</code> and <code>Dog</code> constructors from last challenge worked well. However, notice that all <code>Birds</code> that are created with the <code>Bird</code> constructor are automatically named Albert, are blue in color, and have two legs. What if you want birds with different values for name and color? It's possible to change the properties of each bird manually but that would be a lot of work:\n<blockquote>let swan = new Bird();<br>swan.name = \"Carlos\";<br>swan.color = \"white\";</blockquote>\nSuppose you were writing a program to keep track of hundreds or even thousands of different birds in an aviary. It would take a lot of time to create all the birds, then change the properties to different values for every one.\nTo more easily create different <code>Bird</code> objects, you can design your Bird constructor to accept parameters:\n<blockquote>function Bird(name, color) {<br>&nbsp;&nbsp;this.name = name;<br>&nbsp;&nbsp;this.color = color;<br>&nbsp;&nbsp;this.numLegs = 2;<br>}</blockquote>\nThen pass in the values as arguments to define each unique bird into the <code>Bird</code> constructor:\n<code>let cardinal = new Bird(\"Bruce\", \"red\");</code>\nThis gives a new instance of <code>Bird</code> with name and color properties set to Bruce and red, respectively. The <code>numLegs</code> property is still set to 2.\nThe <code>cardinal</code> has these properties:\n<blockquote>cardinal.name // => Bruce<br>cardinal.color // => red<br>cardinal.numLegs // => 2</blockquote>\nThe constructor is more flexible. It's now possible to define the properties for each <code>Bird</code> at the time it is created, which is one way that JavaScript constructors are so useful. They group objects together based on shared characteristics and behavior and define a blueprint that automates their creation.\n"},
"587d7db0367417b2b2512b84" : {"id":"587d7db0367417b2b2512b84","title":"Inherit Behaviors from a Supertype","videoUrl":"","content":"\nIn the previous challenge, you created a <code>supertype</code> called <code>Animal</code> that defined behaviors shared by all animals:\n<blockquote>function Animal() { }<br>Animal.prototype.eat = function() {<br>&nbsp;&nbsp;console.log(\"nom nom nom\");<br>};</blockquote>\nThis and the next challenge will cover how to reuse <code>Animal's</code> methods inside <code>Bird</code> and <code>Dog</code> without defining them again. It uses a technique called <code>inheritance</code>.\nThis challenge covers the first step: make an instance of the <code>supertype</code> (or parent).\nYou already know one way to create an instance of <code>Animal</code> using the <code>new</code> operator:\n<blockquote>let animal = new Animal();</blockquote>\nThere are some disadvantages when using this syntax for <code>inheritance</code>, which are too complex for the scope of this challenge. Instead, here's an alternative approach without those disadvantages:\n<blockquote>let animal = Object.create(Animal.prototype);</blockquote>\n<code>Object.create(obj)</code> creates a new object, and sets <code>obj</code> as the new object's <code>prototype</code>. Recall that the <code>prototype</code> is like the \"recipe\" for creating an object. By setting the <code>prototype</code> of <code>animal</code> to be <code>Animal's</code> <code>prototype</code>, you are effectively giving the <code>animal</code> instance the same \"recipe\" as any other instance of <code>Animal</code>.\n<blockquote>animal.eat(); // prints \"nom nom nom\"<br>animal instanceof Animal; // => true</blockquote>\n"},
"587d7daf367417b2b2512b7d" : {"id":"587d7daf367417b2b2512b7d","title":"Iterate Over All Properties","videoUrl":"","content":"\nYou have now seen two kinds of properties: <code>own</code> properties and <code>prototype</code> properties. <code>Own</code> properties are defined directly on the object instance itself. And <code>prototype</code> properties are defined on the <code>prototype</code>.\n<blockquote>function Bird(name) {<br>&nbsp;&nbsp;this.name = name;  //own property<br>}<br><br>Bird.prototype.numLegs = 2; // prototype property<br><br>let duck = new Bird(\"Donald\");</blockquote>\nHere is how you add <code>duck</code>'s <code>own</code> properties to the array <code>ownProps</code> and <code>prototype</code> properties to the array <code>prototypeProps</code>:\n<blockquote>let ownProps = [];<br>let prototypeProps = [];<br><br>for (let property in duck) {<br>&nbsp;&nbsp;if(duck.hasOwnProperty(property)) {<br>&nbsp;&nbsp;&nbsp;&nbsp;ownProps.push(property);<br>&nbsp;&nbsp;} else {<br>&nbsp;&nbsp;&nbsp;&nbsp;prototypeProps.push(property);<br>&nbsp;&nbsp;}<br>}<br><br>console.log(ownProps); // prints [\"name\"]<br>console.log(prototypeProps); // prints [\"numLegs\"]</blockquote>\n"},
"587d7dad367417b2b2512b76" : {"id":"587d7dad367417b2b2512b76","title":"Make Code More Reusable with the this Keyword","videoUrl":"","content":"\nThe last challenge introduced a <code>method</code> to the <code>duck</code> object. It used <code>duck.name</code> dot notation to access the value for the <code>name</code> property within the return statement:\n<code>sayName: function() {return \"The name of this duck is \" + duck.name + \".\";}</code>\nWhile this is a valid way to access the object's property, there is a pitfall here. If the variable name changes, any code referencing the original name would need to be updated as well. In a short object definition, it isn't a problem, but if an object has many references to its properties there is a greater chance for error.\nA way to avoid these issues is with the <code>this</code> keyword:\n<blockquote>let duck = {<br>&nbsp;&nbsp;name: \"Aflac\",<br>&nbsp;&nbsp;numLegs: 2,<br>&nbsp;&nbsp;sayName: function() {return \"The name of this duck is \" + this.name + \".\";}<br>};</blockquote>\n<code>this</code> is a deep topic, and the above example is only one way to use it. In the current context, <code>this</code> refers to the object that the method is associated with: <code>duck</code>.\nIf the object's name is changed to <code>mallard</code>, it is not necessary to find all the references to <code>duck</code> in the code. It makes the code reusable and easier to read.\n"},
"587d7db1367417b2b2512b88" : {"id":"587d7db1367417b2b2512b88","title":"Override Inherited Methods","videoUrl":"","content":"\nIn previous lessons, you learned that an object can inherit its behavior (methods) from another object by cloning its <code>prototype</code> object:\n<blockquote>ChildObject.prototype = Object.create(ParentObject.prototype);</blockquote>\nThen the <code>ChildObject</code> received its own methods by chaining them onto its <code>prototype</code>:\n<blockquote>ChildObject.prototype.methodName = function() {...};</blockquote>\nIt's possible to override an inherited method. It's done the same way - by adding a method to <code>ChildObject.prototype</code> using the same method name as the one to override.\nHere's an example of <code>Bird</code> overriding the <code>eat()</code> method inherited from <code>Animal</code>:\n<blockquote>function Animal() { }<br>Animal.prototype.eat = function() {<br>&nbsp;&nbsp;return \"nom nom nom\";<br>};<br>function Bird() { }<br><br>// Inherit all methods from Animal<br>Bird.prototype = Object.create(Animal.prototype);<br><br>// Bird.eat() overrides Animal.eat()<br>Bird.prototype.eat = function() {<br>&nbsp;&nbsp;return \"peck peck peck\";<br>};</blockquote>\nIf you have an instance <code>let duck = new Bird();</code> and you call <code>duck.eat()</code>, this is how JavaScript looks for the method on <code>duckâs</code> <code>prototype</code> chain:\n1. duck => Is eat() defined here? No.\n2. Bird => Is eat() defined here? => Yes. Execute it and stop searching.\n3. Animal => eat() is also defined, but JavaScript stopped searching before reaching this level.\n4. Object => JavaScript stopped searching before reaching this level.\n"},
"587d7daf367417b2b2512b80" : {"id":"587d7daf367417b2b2512b80","title":"Remember to Set the Constructor Property when Changing the Prototype","videoUrl":"","content":"\nThere is one crucial side effect of manually setting the prototype to a new object. It erases the <code>constructor</code> property! This property can be used to check which constructor function created the instance, but since the property has been overwritten, it now gives false results:\n<blockquote>duck.constructor === Bird; // false -- Oops <br> duck.constructor === Object; // true, all objects inherit from Object.prototype <br> duck instanceof Bird; // true, still works</blockquote>\nTo fix this, whenever a prototype is manually set to a new object, remember to define the <code>constructor</code> property:\n<blockquote>Bird.prototype = {<br>&nbsp;&nbsp;constructor: Bird, // define the constructor property<br>&nbsp;&nbsp;numLegs: 2,<br>&nbsp;&nbsp;eat: function() {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(\"nom nom nom\");<br>&nbsp;&nbsp;},<br>&nbsp;&nbsp;describe: function() {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(\"My name is \" + this.name); <br>&nbsp;&nbsp;}<br>};</blockquote>\n"},
"587d7db1367417b2b2512b86" : {"id":"587d7db1367417b2b2512b86","title":"Reset an Inherited Constructor Property","videoUrl":"","content":"\nWhen an object inherits its <code>prototype</code> from another object, it also inherits the <code>supertype</code>'s constructor property.\nHere's an example:\n<blockquote>function Bird() { }<br>Bird.prototype = Object.create(Animal.prototype);<br>let duck = new Bird();<br>duck.constructor // function Animal(){...}</blockquote>\nBut <code>duck</code> and all instances of <code>Bird</code> should show that they were constructed by <code>Bird</code> and not <code>Animal</code>. To do so, you can manually set <code>Bird's</code> constructor property to the <code>Bird</code> object:\n<blockquote>Bird.prototype.constructor = Bird;<br>duck.constructor // function Bird(){...}</blockquote>\n"},
"587d7db1367417b2b2512b85" : {"id":"587d7db1367417b2b2512b85","title":"Set the Child's Prototype to an Instance of the Parent","videoUrl":"","content":"\nIn the previous challenge you saw the first step for inheriting behavior from the <code>supertype</code> (or parent) <code>Animal</code>: making a new instance of <code>Animal</code>.\nThis challenge covers the next step: set the <code>prototype</code> of the <code>subtype</code> (or child)&mdash;in this case, <code>Bird</code>&mdash;to be an instance of <code>Animal</code>.\n<blockquote>Bird.prototype = Object.create(Animal.prototype);</blockquote>\nRemember that the <code>prototype</code> is like the \"recipe\" for creating an object. In a way, the recipe for <code>Bird</code> now includes all the key \"ingredients\" from <code>Animal</code>.\n<blockquote>let duck = new Bird(\"Donald\");<br>duck.eat(); // prints \"nom nom nom\"</blockquote>\n<code>duck</code> inherits all of <code>Animal</code>'s properties, including the <code>eat</code> method.\n"},
"587d7dae367417b2b2512b7b" : {"id":"587d7dae367417b2b2512b7b","title":"Understand Own Properties","videoUrl":"","content":"\nIn the following example, the <code>Bird</code> constructor defines two properties: <code>name</code> and <code>numLegs</code>:\n<blockquote>function Bird(name) {<br>&nbsp;&nbsp;this.name  = name;<br>&nbsp;&nbsp;this.numLegs = 2;<br>}<br><br>let duck = new Bird(\"Donald\");<br>let canary = new Bird(\"Tweety\");</blockquote>\n<code>name</code> and <code>numLegs</code> are called <code>own</code> properties, because they are defined directly on the instance object. That means that <code>duck</code> and <code>canary</code> each has its own separate copy of these properties.\nIn fact every instance of <code>Bird</code> will have its own copy of these properties.\nThe following code adds all of the <code>own</code> properties of <code>duck</code> to the array <code>ownProps</code>:\n<blockquote>let ownProps = [];<br><br>for (let property in duck) {<br>&nbsp;&nbsp;if(duck.hasOwnProperty(property)) {<br>&nbsp;&nbsp;&nbsp;&nbsp;ownProps.push(property);<br>&nbsp;&nbsp;}<br>}<br><br>console.log(ownProps); // prints [ \"name\", \"numLegs\" ]</blockquote>\n"},
"587d7daf367417b2b2512b7e" : {"id":"587d7daf367417b2b2512b7e","title":"Understand the Constructor Property","videoUrl":"","content":"\nThere is a special <code>constructor</code> property located on the object instances <code>duck</code> and <code>beagle</code> that were created in the previous challenges:\n<blockquote>let duck = new Bird();<br>let beagle = new Dog();<br><br>console.log(duck.constructor === Bird);  //prints true<br>console.log(beagle.constructor === Dog);  //prints true</blockquote>\nNote that the <code>constructor</code> property is a reference to the constructor function that created the instance.\nThe advantage of the <code>constructor</code> property is that it's possible to check for this property to find out what kind of object it is. Here's an example of how this could be used:\n<blockquote>function joinBirdFraternity(candidate) {<br>&nbsp;&nbsp;if (candidate.constructor === Bird) {<br>&nbsp;&nbsp;&nbsp;&nbsp;return true;<br>&nbsp;&nbsp;} else {<br>&nbsp;&nbsp;&nbsp;&nbsp;return false;<br>&nbsp;&nbsp;}<br>}</blockquote>\n<strong>Note</strong><br>Since the <code>constructor</code> property can be overwritten (which will be covered in the next two challenges) itâs generally better to use the <code>instanceof</code> method to check the type of an object.\n"},
"587d7db2367417b2b2512b8b" : {"id":"587d7db2367417b2b2512b8b","title":"Understand the Immediately Invoked Function Expression (IIFE)","videoUrl":"","content":"\nA common pattern in JavaScript is to execute a function as soon as it is declared:\n<blockquote>(function () {<br>&nbsp;&nbsp;console.log(\"Chirp, chirp!\");<br>})(); // this is an anonymous function expression that executes right away<br>// Outputs \"Chirp, chirp!\" immediately</blockquote>\nNote that the function has no name and is not stored in a variable. The two parentheses () at the end of the function expression cause it to be immediately executed or invoked. This pattern is known as an <code>immediately invoked function expression</code> or <code>IIFE</code>.\n"},
"587d7db0367417b2b2512b82" : {"id":"587d7db0367417b2b2512b82","title":"Understand the Prototype Chain","videoUrl":"","content":"\nAll objects in JavaScript (with a few exceptions) have a <code>prototype</code>. Also, an objectâs <code>prototype</code> itself is an object.\n<blockquote>function Bird(name) {<br>&nbsp;&nbsp;this.name = name;<br>}<br><br>typeof Bird.prototype; // => object</blockquote>\nBecause a <code>prototype</code> is an object, a <code>prototype</code> can have its own <code>prototype</code>! In this case, the <code>prototype</code> of <code>Bird.prototype</code> is <code>Object.prototype</code>:\n<blockquote>Object.prototype.isPrototypeOf(Bird.prototype);<br>// returns true</blockquote>\nHow is this useful? You may recall the <code>hasOwnProperty</code> method from a previous challenge:\n<blockquote>let duck = new Bird(\"Donald\");<br>duck.hasOwnProperty(\"name\"); // => true</blockquote>\nThe <code>hasOwnProperty</code> method is defined in <code>Object.prototype</code>, which can be accessed by <code>Bird.prototype</code>, which can then be accessed by <code>duck</code>. This is an example of the <code>prototype</code> chain.\nIn this <code>prototype</code> chain, <code>Bird</code> is the <code>supertype</code> for <code>duck</code>, while <code>duck</code> is the <code>subtype</code>. <code>Object</code> is a <code>supertype</code> for both <code>Bird</code> and <code>duck</code>.\n<code>Object</code> is a <code>supertype</code> for all objects in JavaScript. Therefore, any object can use the <code>hasOwnProperty</code> method.\n"},
"587d7db0367417b2b2512b81" : {"id":"587d7db0367417b2b2512b81","title":"Understand Where an Objectâs Prototype Comes From","videoUrl":"","content":"\nJust like people inherit genes from their parents, an object inherits its <code>prototype</code> directly from the constructor function that created it. For example, here the <code>Bird</code> constructor creates the <code>duck</code> object:\n<blockquote>function Bird(name) {<br>&nbsp;&nbsp;this.name = name;<br>}<br><br>let duck = new Bird(\"Donald\");</blockquote>\n<code>duck</code> inherits its <code>prototype</code> from the <code>Bird</code> constructor function. You can show this relationship with the <code>isPrototypeOf</code> method:\n<blockquote>Bird.prototype.isPrototypeOf(duck);<br>// returns true</blockquote>\n"},
"587d7dad367417b2b2512b78" : {"id":"587d7dad367417b2b2512b78","title":"Use a Constructor to Create Objects","videoUrl":"","content":"\nHere's the <code>Bird</code> constructor from the previous challenge:\n<blockquote>function Bird() {<br>&nbsp;&nbsp;this.name = \"Albert\";<br>&nbsp;&nbsp;this.color  = \"blue\";<br>&nbsp;&nbsp;this.numLegs = 2;<br>&nbsp;&nbsp;// \"this\" inside the constructor always refers to the object being created<br>}<br><br>let blueBird = new Bird();</blockquote>\nNotice that the <code>new</code> operator is used when calling a constructor. This tells JavaScript to create a new <code>instance</code> of <code>Bird</code> called <code>blueBird</code>. Without the <code>new</code> operator, <code>this</code> inside the constructor would not point to the newly created object, giving unexpected results.\nNow <code>blueBird</code> has all the properties defined inside the <code>Bird</code> constructor:\n<blockquote>blueBird.name; // => Albert<br>blueBird.color; // => blue<br>blueBird.numLegs; // => 2</blockquote>\nJust like any other object, its properties can be accessed and modified:\n<blockquote>blueBird.name = 'Elvira';<br>blueBird.name; // => Elvira</blockquote>\n"},
"587d7db2367417b2b2512b89" : {"id":"587d7db2367417b2b2512b89","title":"Use a Mixin to Add Common Behavior Between Unrelated Objects","videoUrl":"","content":"\nAs you have seen, behavior is shared through inheritance. However, there are cases when inheritance is not the best solution. Inheritance does not work well for unrelated objects like <code>Bird</code> and <code>Airplane</code>. They can both fly, but a <code>Bird</code> is not a type of <code>Airplane</code> and vice versa.\nFor unrelated objects, it's better to use <code>mixins</code>. A <code>mixin</code> allows other objects to use a collection of functions.\n<blockquote>let flyMixin = function(obj) {<br>&nbsp;&nbsp;obj.fly = function() {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(\"Flying, wooosh!\");<br>&nbsp;&nbsp;}<br>};</blockquote>\nThe <code>flyMixin</code> takes any object and gives it the <code>fly</code> method.\n<blockquote>let bird = {<br>&nbsp;&nbsp;name: \"Donald\",<br>&nbsp;&nbsp;numLegs: 2<br>};<br><br>let plane = {<br>&nbsp;&nbsp;model: \"777\",<br>&nbsp;&nbsp;numPassengers: 524<br>};<br><br>flyMixin(bird);<br>flyMixin(plane);</blockquote>\nHere <code>bird</code> and <code>plane</code> are passed into <code>flyMixin</code>, which then assigns the <code>fly</code> function to each object. Now <code>bird</code> and <code>plane</code> can both fly:\n<blockquote>bird.fly(); // prints \"Flying, wooosh!\"<br>plane.fly(); // prints \"Flying, wooosh!\"</blockquote>\nNote how the <code>mixin</code> allows for the same <code>fly</code> method to be reused by unrelated objects <code>bird</code> and <code>plane</code>.\n"},
"587d7db2367417b2b2512b8c" : {"id":"587d7db2367417b2b2512b8c","title":"Use an IIFE to Create a Module","videoUrl":"","content":"\nAn <code>immediately invoked function expression</code> (<code>IIFE</code>) is often used to group related functionality into a single object or <code>module</code>. For example, an earlier challenge defined two mixins:\n<blockquote>function glideMixin(obj) {<br>&nbsp;&nbsp;obj.glide = function() {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(\"Gliding on the water\");<br>&nbsp;&nbsp;};<br>}<br>function flyMixin(obj) {<br>&nbsp;&nbsp;obj.fly = function() {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(\"Flying, wooosh!\");<br>&nbsp;&nbsp;};<br>}</blockquote>\nWe can group these <code>mixins</code> into a module as follows:\n<blockquote>let motionModule = (function () {<br>&nbsp;&nbsp;return {<br>&nbsp;&nbsp;&nbsp;&nbsp;glideMixin: function (obj) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;obj.glide = function() {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(\"Gliding on the water\");<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br>&nbsp;&nbsp;&nbsp;&nbsp;},<br>&nbsp;&nbsp;&nbsp;&nbsp;flyMixin: function(obj) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;obj.fly = function() {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(\"Flying, wooosh!\");<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;}<br>}) (); // The two parentheses cause the function to be immediately invoked</blockquote>\nNote that you have an <code>immediately invoked function expression</code> (<code>IIFE</code>) that returns an object <code>motionModule</code>. This returned object contains all of the <code>mixin</code> behaviors as properties of the object.\nThe advantage of the <code>module</code> pattern is that all of the motion behaviors can be packaged into a single object that can then be used by other parts of your code. Here is an example using it:\n<blockquote>motionModule.glideMixin(duck);<br>duck.glide();</blockquote>\n"},
"587d7db2367417b2b2512b8a" : {"id":"587d7db2367417b2b2512b8a","title":"Use Closure to Protect Properties Within an Object from Being Modified Externally","videoUrl":"","content":"\nIn the previous challenge, <code>bird</code> had a public property <code>name</code>. It is considered public because it can be accessed and changed outside of <code>bird</code>'s definition.\n<blockquote>bird.name = \"Duffy\";</blockquote>\nTherefore, any part of your code can easily change the name of <code>bird</code> to any value. Think about things like passwords and bank accounts being easily changeable by any part of your codebase. That could cause a lot of issues.\nThe simplest way to make properties private is by creating a variable within the constructor function. This changes the scope of that variable to be within the constructor function versus available globally. This way, the property can only be accessed and changed by methods also within the constructor function.\n<blockquote>function Bird() {<br>&nbsp;&nbsp;let hatchedEgg = 10; // private property<br><br>&nbsp;&nbsp;this.getHatchedEggCount = function() { // publicly available method that a bird object can use<br>&nbsp;&nbsp;&nbsp;&nbsp;return hatchedEgg;<br>&nbsp;&nbsp;};<br>}<br>let ducky = new Bird();<br>ducky.getHatchedEggCount(); // returns 10</blockquote>\nHere <code>getHachedEggCount</code> is a privileged method, because it has access to the private variable <code>hatchedEgg</code>. This is possible because <code>hatchedEgg</code> is declared in the same context as <code>getHachedEggCount</code>. In JavaScript, a function always has access to the context in which it was created. This is called <code>closure</code>.\n"},
"587d7dac367417b2b2512b74" : {"id":"587d7dac367417b2b2512b74","title":"Use Dot Notation to Access the Properties of an Object","videoUrl":"","content":"\nThe last challenge created an <code>object</code> with various <code>properties</code>, now you'll see how to access the values of those <code>properties</code>. Here's an example:\n<blockquote>let duck = {<br>&nbsp;&nbsp;name: \"Aflac\",<br>&nbsp;&nbsp;numLegs: 2<br>};<br>console.log(duck.name);<br>// This prints \"Aflac\" to the console</blockquote>\nDot notation is used on the <code>object</code> name, <code>duck</code>, followed by the name of the <code>property</code>, <code>name</code>, to access the value of \"Aflac\".\n"},
"587d7db0367417b2b2512b83" : {"id":"587d7db0367417b2b2512b83","title":"Use Inheritance So You Don't Repeat Yourself","videoUrl":"","content":"\nThere's a principle in programming called <code>Don't Repeat Yourself (DRY)</code>. The reason repeated code is a problem is because any change requires fixing code in multiple places. This usually means more work for programmers and more room for errors.\nNotice in the example below that the <code>describe</code> method is shared by <code>Bird</code> and <code>Dog</code>:\n<blockquote>Bird.prototype = {<br>&nbsp;&nbsp;constructor: Bird,<br>&nbsp;&nbsp;describe: function() {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(\"My name is \" + this.name);<br>&nbsp;&nbsp;}<br>};<br><br>Dog.prototype = {<br>&nbsp;&nbsp;constructor: Dog,<br>&nbsp;&nbsp;describe: function() {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(\"My name is \" + this.name);<br>&nbsp;&nbsp;}<br>};</blockquote>\nThe <code>describe</code> method is repeated in two places. The code can be edited to follow the <code>DRY</code> principle by creating a <code>supertype</code> (or parent) called <code>Animal</code>:\n<blockquote>function Animal() { };<br><br>Animal.prototype = {<br>&nbsp;&nbsp;constructor: Animal, <br>&nbsp;&nbsp;describe: function() {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(\"My name is \" + this.name);<br>&nbsp;&nbsp;}<br>};</blockquote>\nSince <code>Animal</code> includes the <code>describe</code> method, you can remove it from <code>Bird</code> and <code>Dog</code>:\n<blockquote>Bird.prototype = {<br>&nbsp;&nbsp;constructor: Bird<br>};<br><br>Dog.prototype = {<br>&nbsp;&nbsp;constructor: Dog<br>};</blockquote>\n"},
"587d7dae367417b2b2512b7c" : {"id":"587d7dae367417b2b2512b7c","title":"Use Prototype Properties to Reduce Duplicate Code","videoUrl":"","content":"\nSince <code>numLegs</code> will probably have the same value for all instances of <code>Bird</code>, you essentially have a duplicated variable <code>numLegs</code> inside each <code>Bird</code> instance.\nThis may not be an issue when there are only two instances, but imagine if there are millions of instances. That would be a lot of duplicated variables.\nA better way is to use <code>Birdâs</code> <code>prototype</code>. The <code>prototype</code> is an object that is shared among ALL instances of <code>Bird</code>. Here's how to add <code>numLegs</code> to the <code>Bird prototype</code>:\n<blockquote>Bird.prototype.numLegs = 2;</blockquote>\nNow all instances of <code>Bird</code> have the <code>numLegs</code> property.\n<blockquote>console.log(duck.numLegs);  // prints 2<br>console.log(canary.numLegs);  // prints 2</blockquote>\nSince all instances automatically have the properties on the <code>prototype</code>, think of a <code>prototype</code> as a \"recipe\" for creating objects.\nNote that the <code>prototype</code> for <code>duck</code> and <code>canary</code> is part of the <code>Bird</code> constructor as <code>Bird.prototype</code>. Nearly every object in JavaScript has a <code>prototype</code> property which is part of the constructor function that created it.\n"},
"587d7dae367417b2b2512b7a" : {"id":"587d7dae367417b2b2512b7a","title":"Verify an Object's Constructor with instanceof","videoUrl":"","content":"\nAnytime a constructor function creates a new object, that object is said to be an <code>instance</code> of its constructor. JavaScript gives a convenient way to verify this with the <code>instanceof</code> operator. <code>instanceof</code> allows you to compare an object to a constructor, returning <code>true</code> or <code>false</code> based on whether or not that object was created with the constructor. Here's an example:\n<blockquote>let Bird = function(name, color) {<br>&nbsp;&nbsp;this.name = name;<br>&nbsp;&nbsp;this.color = color;<br>&nbsp;&nbsp;this.numLegs = 2;<br>}<br><br>let crow = new Bird(\"Alexis\", \"black\");<br><br>crow instanceof Bird; // => true</blockquote>\nIf an object is created without using a constructor, <code>instanceof</code> will verify that it is not an instance of that constructor:\n<blockquote>let canary = {<br>&nbsp;&nbsp;name: \"Mildred\",<br>&nbsp;&nbsp;color: \"Yellow\",<br>&nbsp;&nbsp;numLegs: 2<br>};<br><br>canary instanceof Bird; // => false</blockquote>\n"},
"587d7dba367417b2b2512ba8" : {"id":"587d7dba367417b2b2512ba8","title":"Check for All or None","videoUrl":"","content":"\nSometimes the patterns you want to search for may have parts of it that may or may not exist. However, it may be important to check for them nonetheless.\nYou can specify the possible existence of an element with a question mark, <code>?</code>. This checks for zero or one of the preceding element. You can think of this symbol as saying the previous element is optional.\nFor example, there are slight differences in American and British English and you can use the question mark to match both spellings.\n<blockquote>let american = \"color\";<br>let british = \"colour\";<br>let rainbowRegex= /colou?r/;<br>rainbowRegex.test(american); // Returns true<br>rainbowRegex.test(british); // Returns true</blockquote>\n"},
"5c3dda8b4d8df89bea71600f" : {"id":"5c3dda8b4d8df89bea71600f","title":"Check For Mixed Grouping of Characters","videoUrl":"","content":"\nSometimes we want to check for groups of characters using a Regular Expression and to achieve that we use parentheses <code>()</code>.\nIf you want to find either <code>Penguin</code> or <code>Pumpkin</code> in a string, you can use the following Regular Expression: <code>/P(engu|umpk)in/g</code>\nThen check whether the desired string groups are in the test string by using the <code>test()</code> method.\n<blockquote>let testStr = \"Pumpkin\";<br>let testRegex = /P(engu|umpk)in/g;<br>testRegex.test(testStr);<br>// Returns true</blockquote>\n"},
"587d7db4367417b2b2512b92" : {"id":"587d7db4367417b2b2512b92","title":"Extract Matches","videoUrl":"","content":"\nSo far, you have only been checking if a pattern exists or not within a string. You can also extract the actual matches you found with the <code>.match()</code> method.\nTo use the <code>.match()</code> method, apply the method on a string and pass in the regex inside the parentheses. Here's an example:\n<blockquote>\"Hello, World!\".match(/Hello/);<br>// Returns [\"Hello\"]<br>let ourStr = \"Regular expressions\";<br>let ourRegex = /expressions/;<br>ourStr.match(ourRegex);<br>// Returns [\"expressions\"]</blockquote>\n"},
"587d7db6367417b2b2512b9b" : {"id":"587d7db6367417b2b2512b9b","title":"Find Characters with Lazy Matching","videoUrl":"","content":"\nIn regular expressions, a <code>greedy</code> match finds the longest possible part of a string that fits the regex pattern and returns it as a match. The alternative is called a <code>lazy</code> match, which finds the smallest possible part of the string that satisfies the regex pattern.\nYou can apply the regex <code>/t[a-z]*i/</code> to the string <code>\"titanic\"</code>. This regex is basically a pattern that starts with <code>t</code>, ends with <code>i</code>, and has some letters in between.\nRegular expressions are by default <code>greedy</code>, so the match would return <code>[\"titani\"]</code>. It finds the largest sub-string possible to fit the pattern.\nHowever, you can use the <code>?</code> character to change it to <code>lazy</code> matching. <code>\"titanic\"</code> matched against the adjusted regex of <code>/t[a-z]*?i/</code> returns <code>[\"ti\"]</code>.\n"},
"587d7db4367417b2b2512b93" : {"id":"587d7db4367417b2b2512b93","title":"Find More Than the First Match","videoUrl":"","content":"\nSo far, you have only been able to extract or search a pattern once.\n<blockquote>let testStr = \"Repeat, Repeat, Repeat\";<br>let ourRegex = /Repeat/;<br>testStr.match(ourRegex);<br>// Returns [\"Repeat\"]</blockquote>\nTo search or extract a pattern more than once, you can use the <code>g</code> flag.\n<blockquote>let repeatRegex = /Repeat/g;<br>testStr.match(repeatRegex);<br>// Returns [\"Repeat\", \"Repeat\", \"Repeat\"]</blockquote>\n"},
"587d7db7367417b2b2512b9c" : {"id":"587d7db7367417b2b2512b9c","title":"Find One or More Criminals in a Hunt","videoUrl":"","content":"\nTime to pause and test your new regex writing skills. A group of criminals escaped from jail and ran away, but you don't know how many. However, you do know that they stay close together when they are around other people. You are responsible for finding all of the criminals at once.\nHere's an example to review how to do this:\nThe regex <code>/z+/</code> matches the letter <code>z</code> when it appears one or more times in a row. It would find matches in all of the following strings:\n<blockquote>\"z\"<br>\"zzzzzz\"<br>\"ABCzzzz\"<br>\"zzzzABC\"<br>\"abczzzzzzzzzzzzzzzzzzzzzabc\"</blockquote>\nBut it does not find matches in the following strings since there are no letter <code>z</code> characters:\n<blockquote>\"\"<br>\"ABC\"<br>\"abcabc\"</blockquote>\n"},
"587d7db4367417b2b2512b91" : {"id":"587d7db4367417b2b2512b91","title":"Ignore Case While Matching","videoUrl":"","content":"\nUp until now, you've looked at regexes to do literal matches of strings. But sometimes, you might want to also match case differences.\nCase (or sometimes letter case) is the difference between uppercase letters and lowercase letters. Examples of uppercase are <code>\"A\"</code>, <code>\"B\"</code>, and <code>\"C\"</code>. Examples of lowercase are <code>\"a\"</code>, <code>\"b\"</code>, and <code>\"c\"</code>.\nYou can match both cases using what is called a flag. There are other flags but here you'll focus on the flag that ignores case - the <code>i</code> flag. You can use it by appending it to the regex.  An example of using this flag is <code>/ignorecase/i</code>. This regex can match the strings <code>\"ignorecase\"</code>, <code>\"igNoreCase\"</code>, and <code>\"IgnoreCase\"</code>.\n"},
"587d7db4367417b2b2512b90" : {"id":"587d7db4367417b2b2512b90","title":"Match a Literal String with Different Possibilities","videoUrl":"","content":"\nUsing regexes like <code>/coding/</code>, you can look for the pattern <code>\"coding\"</code> in another string.\nThis is powerful to search single strings, but it's limited to only one pattern. You can search for multiple patterns using the <code>alternation</code> or <code>OR</code> operator: <code>|</code>.\nThis operator matches patterns either before or after it. For example, if you wanted to match <code>\"yes\"</code> or <code>\"no\"</code>, the regex you want is <code>/yes|no/</code>.\nYou can also search for more than just two patterns. You can do this by adding more patterns with more <code>OR</code> operators separating them, like <code>/yes|no|maybe/</code>.\n"},
"587d7db7367417b2b2512b9f" : {"id":"587d7db7367417b2b2512b9f","title":"Match All Letters and Numbers","videoUrl":"","content":"\nUsing character classes, you were able to search for all letters of the alphabet with <code>[a-z]</code>. This kind of character class is common enough that there is a shortcut for it, although it includes a few extra characters as well.\nThe closest character class in JavaScript to match the alphabet is <code>\\w</code>. This shortcut is equal to <code>[A-Za-z0-9_]</code>. This character class matches upper and lowercase letters plus numbers. Note, this character class also includes the underscore character (<code>_</code>).\n<blockquote>let longHand = /[A-Za-z0-9_]+/;<br>let shortHand = /\\w+/;<br>let numbers = \"42\";<br>let varNames = \"important_var\";<br>longHand.test(numbers); // Returns true<br>shortHand.test(numbers); // Returns true<br>longHand.test(varNames); // Returns true<br>shortHand.test(varNames); // Returns true</blockquote>\nThese shortcut character classes are also known as <code>shorthand character classes</code>.\n"},
"587d7db8367417b2b2512ba1" : {"id":"587d7db8367417b2b2512ba1","title":"Match All Non-Numbers","videoUrl":"","content":"\nThe last challenge showed how to search for digits using the shortcut <code>\\d</code> with a lowercase <code>d</code>. You can also search for non-digits using a similar shortcut that uses an uppercase <code>D</code> instead.\nThe shortcut to look for non-digit characters is <code>\\D</code>. This is equal to the character class <code>[^0-9]</code>, which looks for a single character that is not a number between zero and nine.\n"},
"5d712346c441eddfaeb5bdef" : {"id":"5d712346c441eddfaeb5bdef","title":"Match All Numbers","videoUrl":"","content":"\nYou've learned shortcuts for common string patterns like alphanumerics. Another common pattern is looking for just digits or numbers.\nThe shortcut to look for digit characters is <code>\\d</code>, with a lowercase <code>d</code>. This is equal to the character class <code>[0-9]</code>, which looks for a single character of any number between zero and nine.\n"},
"587d7db5367417b2b2512b94" : {"id":"587d7db5367417b2b2512b94","title":"Match Anything with Wildcard Period","videoUrl":"","content":"\nSometimes you won't (or don't need to) know the exact characters in your patterns. Thinking of all words that match, say, a misspelling would take a long time. Luckily, you can save time using the wildcard character: <code>.</code>\nThe wildcard character <code>.</code> will match any one character. The wildcard is also called <code>dot</code> and <code>period</code>. You can use the wildcard character just like any other character in the regex. For example, if you wanted to match <code>\"hug\"</code>, <code>\"huh\"</code>, <code>\"hut\"</code>, and <code>\"hum\"</code>, you can use the regex <code>/hu./</code> to match all four words.\n<blockquote>let humStr = \"I'll hum a song\";<br>let hugStr = \"Bear hug\";<br>let huRegex = /hu./;<br>humStr.match(huRegex); // Returns [\"hum\"]<br>hugStr.match(huRegex); // Returns [\"hug\"]</blockquote>\n"},
"587d7db7367417b2b2512b9d" : {"id":"587d7db7367417b2b2512b9d","title":"Match Beginning String Patterns","videoUrl":"","content":"\nPrior challenges showed that regular expressions can be used to look for a number of matches. They are also used to search for patterns in specific positions in strings.\nIn an earlier challenge, you used the <code>caret</code> character (<code>^</code>) inside a <code>character set</code> to create a <code>negated character set</code> in the form <code>[^thingsThatWillNotBeMatched]</code>. Outside of a <code>character set</code>, the <code>caret</code> is used to search for patterns at the beginning of strings.\n<blockquote>let firstString = \"Ricky is first and can be found.\";<br>let firstRegex = /^Ricky/;<br>firstRegex.test(firstString);<br>// Returns true<br>let notFirst = \"You can't find Ricky now.\";<br>firstRegex.test(notFirst);<br>// Returns false</blockquote>\n"},
"587d7db6367417b2b2512b99" : {"id":"587d7db6367417b2b2512b99","title":"Match Characters that Occur One or More Times","videoUrl":"","content":"\nSometimes, you need to match a character (or group of characters) that appears one or more times in a row. This means it occurs at least once, and may be repeated.\nYou can use the <code>+</code> character to check if that is the case. Remember, the character or pattern has to be present consecutively. That is, the character has to repeat one after the other.\nFor example, <code>/a+/g</code> would find one match in <code>\"abc\"</code> and return <code>[\"a\"]</code>. Because of the <code>+</code>, it would also find a single match in <code>\"aabc\"</code> and return <code>[\"aa\"]</code>.\nIf it were instead checking the string <code>\"abab\"</code>, it would find two matches and return <code>[\"a\", \"a\"]</code> because the <code>a</code> characters are not in a row - there is a <code>b</code> between them. Finally, since there is no <code>\"a\"</code> in the string <code>\"bcd\"</code>, it wouldn't find a match.\n"},
"587d7db6367417b2b2512b9a" : {"id":"587d7db6367417b2b2512b9a","title":"Match Characters that Occur Zero or More Times","videoUrl":"","content":"\nThe last challenge used the plus <code>+</code> sign to look for characters that occur one or more times. There's also an option that matches characters that occur zero or more times.\nThe character to do this is the <code>asterisk</code> or <code>star</code>: <code>*</code>.\n<blockquote>let soccerWord = \"gooooooooal!\";<br>let gPhrase = \"gut feeling\";<br>let oPhrase = \"over the moon\";<br>let goRegex = /go*/;<br>soccerWord.match(goRegex); // Returns [\"goooooooo\"]<br>gPhrase.match(goRegex); // Returns [\"g\"]<br>oPhrase.match(goRegex); // Returns null</blockquote>\n"},
"587d7db7367417b2b2512b9e" : {"id":"587d7db7367417b2b2512b9e","title":"Match Ending String Patterns","videoUrl":"","content":"\nIn the last challenge, you learned to use the <code>caret</code> character to search for patterns at the beginning of strings. There is also a way to search for patterns at the end of strings.\nYou can search the end of strings using the <code>dollar sign</code> character <code>$</code> at the end of the regex.\n<blockquote>let theEnding = \"This is a never ending story\";<br>let storyRegex = /story$/;<br>storyRegex.test(theEnding);<br>// Returns true<br>let noEnding = \"Sometimes a story will have to end\";<br>storyRegex.test(noEnding);<br>// Returns false<br></blockquote>\n"},
"587d7db8367417b2b2512ba0" : {"id":"587d7db8367417b2b2512ba0","title":"Match Everything But Letters and Numbers","videoUrl":"","content":"\nYou've learned that you can use a shortcut to match alphanumerics <code>[A-Za-z0-9_]</code> using <code>\\w</code>. A natural pattern you might want to search for is the opposite of alphanumerics.\nYou can search for the opposite of the <code>\\w</code> with <code>\\W</code>. Note, the opposite pattern uses a capital letter. This shortcut is the same as <code>[^A-Za-z0-9_]</code>.\n<blockquote>let shortHand = /\\W/;<br>let numbers = \"42%\";<br>let sentence = \"Coding!\";<br>numbers.match(shortHand); // Returns [\"%\"]<br>sentence.match(shortHand); // Returns [\"!\"]<br></blockquote>\n"},
"587d7db5367417b2b2512b96" : {"id":"587d7db5367417b2b2512b96","title":"Match Letters of the Alphabet","videoUrl":"","content":"\nYou saw how you can use <code>character sets</code> to specify a group of characters to match, but that's a lot of typing when you need to match a large range of characters (for example, every letter in the alphabet). Fortunately, there is a built-in feature that makes this short and simple.\nInside a <code>character set</code>, you can define a range of characters to match using a <code>hyphen</code> character: <code>-</code>.\nFor example, to match lowercase letters <code>a</code> through <code>e</code> you would use <code>[a-e]</code>.\n<blockquote>let catStr = \"cat\";<br>let batStr = \"bat\";<br>let matStr = \"mat\";<br>let bgRegex = /[a-e]at/;<br>catStr.match(bgRegex); // Returns [\"cat\"]<br>batStr.match(bgRegex); // Returns [\"bat\"]<br>matStr.match(bgRegex); // Returns null</blockquote>\n"},
"587d7db3367417b2b2512b8f" : {"id":"587d7db3367417b2b2512b8f","title":"Match Literal Strings","videoUrl":"","content":"\nIn the last challenge, you searched for the word <code>\"Hello\"</code> using the regular expression <code>/Hello/</code>. That regex searched for a literal match of the string <code>\"Hello\"</code>. Here's another example searching for a literal match of the string <code>\"Kevin\"</code>:\n<blockquote>let testStr = \"Hello, my name is Kevin.\";<br>let testRegex = /Kevin/;<br>testRegex.test(testStr);<br>// Returns true</blockquote>\nAny other forms of <code>\"Kevin\"</code> will not match. For example, the regex <code>/Kevin/</code> will not match <code>\"kevin\"</code> or <code>\"KEVIN\"</code>.\n<blockquote>let wrongRegex = /kevin/;<br>wrongRegex.test(testStr);<br>// Returns false</blockquote>\nA future challenge will show how to match those other forms as well.\n"},
"587d7db9367417b2b2512ba4" : {"id":"587d7db9367417b2b2512ba4","title":"Match Non-Whitespace Characters","videoUrl":"","content":"\nYou learned about searching for whitespace using <code>\\s</code>, with a lowercase <code>s</code>. You can also search for everything except whitespace.\nSearch for non-whitespace using <code>\\S</code>, which is an uppercase <code>s</code>. This pattern will not match whitespace, carriage return, tab, form feed, and new line characters. You can think of it being similar to the character class <code>[^ \\r\\t\\f\\n\\v]</code>.\n<blockquote>let whiteSpace = \"Whitespace. Whitespace everywhere!\"<br>let nonSpaceRegex = /\\S/g;<br>whiteSpace.match(nonSpaceRegex).length; // Returns 32</blockquote>\n"},
"587d7db5367417b2b2512b97" : {"id":"587d7db5367417b2b2512b97","title":"Match Numbers and Letters of the Alphabet","videoUrl":"","content":"\nUsing the hyphen (<code>-</code>) to match a range of characters is not limited to letters. It also works to match a range of numbers.\nFor example, <code>/[0-5]/</code> matches any number between <code>0</code> and <code>5</code>, including the <code>0</code> and <code>5</code>.\nAlso, it is possible to combine a range of letters and numbers in a single character set.\n<blockquote>let jennyStr = \"Jenny8675309\";<br>let myRegex = /[a-z0-9]/ig;<br>// matches all letters and numbers in jennyStr<br>jennyStr.match(myRegex);</blockquote>\n"},
"587d7db6367417b2b2512b98" : {"id":"587d7db6367417b2b2512b98","title":"Match Single Characters Not Specified","videoUrl":"","content":"\nSo far, you have created a set of characters that you want to match, but you could also create a set of characters that you do not want to match. These types of character sets are called <code>negated character sets</code>.\nTo create a <code>negated character set</code>, you place a <code>caret</code> character (<code>^</code>) after the opening bracket and before the characters you do not want to match.\nFor example, <code>/[^aeiou]/gi</code> matches all characters that are not a vowel. Note that characters like <code>.</code>, <code>!</code>, <code>[</code>, <code>@</code>, <code>/</code> and white space are matched - the negated vowel character set only excludes the vowel characters.\n"},
"587d7db5367417b2b2512b95" : {"id":"587d7db5367417b2b2512b95","title":"Match Single Character with Multiple Possibilities","videoUrl":"","content":"\nYou learned how to match literal patterns (<code>/literal/</code>) and wildcard character (<code>/./</code>). Those are the extremes of regular expressions, where one finds exact matches and the other matches everything. There are options that are a balance between the two extremes.\nYou can search for a literal pattern with some flexibility with <code>character classes</code>. Character classes allow you to define a group of characters you wish to match by placing them inside square (<code>[</code> and <code>]</code>) brackets.\nFor example, you want to match <code>\"bag\"</code>, <code>\"big\"</code>, and <code>\"bug\"</code> but not <code>\"bog\"</code>. You can create the regex <code>/b[aiu]g/</code> to do this. The <code>[aiu]</code> is the character class that will only match the characters <code>\"a\"</code>, <code>\"i\"</code>, or <code>\"u\"</code>.\n<blockquote>let bigStr = \"big\";<br>let bagStr = \"bag\";<br>let bugStr = \"bug\";<br>let bogStr = \"bog\";<br>let bgRegex = /b[aiu]g/;<br>bigStr.match(bgRegex); // Returns [\"big\"]<br>bagStr.match(bgRegex); // Returns [\"bag\"]<br>bugStr.match(bgRegex); // Returns [\"bug\"]<br>bogStr.match(bgRegex); // Returns null</blockquote>\n"},
"587d7db8367417b2b2512ba3" : {"id":"587d7db8367417b2b2512ba3","title":"Match Whitespace","videoUrl":"","content":"\nThe challenges so far have covered matching letters of the alphabet and numbers. You can also match the whitespace or spaces between letters.\nYou can search for whitespace using <code>\\s</code>, which is a lowercase <code>s</code>. This pattern not only matches whitespace, but also carriage return, tab, form feed, and new line characters. You can think of it as similar to the character class <code>[ \\r\\t\\f\\n\\v]</code>.\n<blockquote>let whiteSpace = \"Whitespace. Whitespace everywhere!\"<br>let spaceRegex = /\\s/g;<br>whiteSpace.match(spaceRegex);<br>// Returns [\" \", \" \"]<br></blockquote>\n"},
"587d7dba367417b2b2512ba9" : {"id":"587d7dba367417b2b2512ba9","title":"Positive and Negative Lookahead","videoUrl":"","content":"\n<code>Lookaheads</code> are patterns that tell JavaScript to look-ahead in your string to check for patterns further along. This can be useful when you want to search for multiple patterns over the same string.\nThere are two kinds of <code>lookaheads</code>: <code>positive lookahead</code> and <code>negative lookahead</code>.\nA <code>positive lookahead</code> will look to make sure the element in the search pattern is there, but won't actually match it. A positive lookahead is used as <code>(?=...)</code> where the <code>...</code> is the required part that is not matched.\nOn the other hand, a <code>negative lookahead</code> will look to make sure the element in the search pattern is not there. A negative lookahead is used as <code>(?!...)</code> where the <code>...</code> is the pattern that you do not want to be there. The rest of the pattern is returned if the negative lookahead part is not present.\nLookaheads are a bit confusing but some examples will help.\n<blockquote>let quit = \"qu\";<br>let noquit = \"qt\";<br>let quRegex= /q(?=u)/;<br>let qRegex = /q(?!u)/;<br>quit.match(quRegex); // Returns [\"q\"]<br>noquit.match(qRegex); // Returns [\"q\"]</blockquote>\nA more practical use of <code>lookaheads</code> is to check two or more patterns in one string. Here is a (naively) simple password checker that looks for between 3 and 6 characters and at least one number:\n<blockquote>let password = \"abc123\";<br>let checkPass = /(?=\\w{3,6})(?=\\D*\\d)/;<br>checkPass.test(password); // Returns true</blockquote>\n"},
"587d7dbb367417b2b2512bac" : {"id":"587d7dbb367417b2b2512bac","title":"Remove Whitespace from Start and End","videoUrl":"","content":"\nSometimes whitespace characters around strings are not wanted but are there. Typical processing of strings is to remove the whitespace at the start and end of it.\n"},
"587d7db8367417b2b2512ba2" : {"id":"587d7db8367417b2b2512ba2","title":"Restrict Possible Usernames","videoUrl":"","content":"\nUsernames are used everywhere on the internet. They are what give users a unique identity on their favorite sites.\nYou need to check all the usernames in a database. Here are some simple rules that users have to follow when creating their username.\n1) The only numbers in the username have to be at the end. There can be zero or more of them at the end.\n2) Username letters can be lowercase and uppercase.\n3) Usernames have to be at least two characters long. A two-letter username can only use alphabet letter characters.\n"},
"587d7dbb367417b2b2512baa" : {"id":"587d7dbb367417b2b2512baa","title":"Reuse Patterns Using Capture Groups","videoUrl":"","content":"\nSome patterns you search for will occur multiple times in a string. It is wasteful to manually repeat that regex. There is a better way to specify when you have multiple repeat substrings in your string.\nYou can search for repeat substrings using <code>capture groups</code>. Parentheses, <code>(</code> and <code>)</code>, are used to find repeat substrings. You put the regex of the pattern that will repeat in between the parentheses.\nTo specify where that repeat string will appear, you use a backslash (<code>\\</code>) and then a number. This number starts at 1 and increases with each additional capture group you use. An example would be <code>\\1</code> to match the first group.\nThe example below matches any word that occurs twice separated by a space:\n<blockquote>let repeatStr = \"regex regex\";<br>let repeatRegex = /(\\w+)\\s\\1/;<br>repeatRegex.test(repeatStr); // Returns true<br>repeatStr.match(repeatRegex); // Returns [\"regex regex\", \"regex\"]</blockquote>\nUsing the <code>.match()</code> method on a string will return an array with the string it matches, along with its capture group.\n"},
"587d7db9367417b2b2512ba7" : {"id":"587d7db9367417b2b2512ba7","title":"Specify Exact Number of Matches","videoUrl":"","content":"\nYou can specify the lower and upper number of patterns with <code>quantity specifiers</code> using curly brackets. Sometimes you only want a specific number of matches.\nTo specify a certain number of patterns, just have that one number between the curly brackets.\nFor example, to match only the word <code>\"hah\"</code> with the letter <code>a</code> <code>3</code> times, your regex would be <code>/ha{3}h/</code>.\n<blockquote>let A4 = \"haaaah\";<br>let A3 = \"haaah\";<br>let A100 = \"h\" + \"a\".repeat(100) + \"h\";<br>let multipleHA = /ha{3}h/;<br>multipleHA.test(A4); // Returns false<br>multipleHA.test(A3); // Returns true<br>multipleHA.test(A100); // Returns false</blockquote>\n"},
"587d7db9367417b2b2512ba6" : {"id":"587d7db9367417b2b2512ba6","title":"Specify Only the Lower Number of Matches","videoUrl":"","content":"\nYou can specify the lower and upper number of patterns with <code>quantity specifiers</code> using curly brackets. Sometimes you only want to specify the lower number of patterns with no upper limit.\nTo only specify the lower number of patterns, keep the first number followed by a comma.\nFor example, to match only the string <code>\"hah\"</code> with the letter <code>a</code> appearing at least <code>3</code> times, your regex would be <code>/ha{3,}h/</code>.\n<blockquote>let A4 = \"haaaah\";<br>let A2 = \"haah\";<br>let A100 = \"h\" + \"a\".repeat(100) + \"h\";<br>let multipleA = /ha{3,}h/;<br>multipleA.test(A4); // Returns true<br>multipleA.test(A2); // Returns false<br>multipleA.test(A100); // Returns true</blockquote>\n"},
"587d7db9367417b2b2512ba5" : {"id":"587d7db9367417b2b2512ba5","title":"Specify Upper and Lower Number of Matches","videoUrl":"","content":"\nRecall that you use the plus sign <code>+</code> to look for one or more characters and the asterisk <code>*</code> to look for zero or more characters. These are convenient but sometimes you want to match a certain range of patterns.\nYou can specify the lower and upper number of patterns with <code>quantity specifiers</code>. Quantity specifiers are used with curly brackets (<code>{</code> and <code>}</code>). You put two numbers between the curly brackets - for the lower and upper number of patterns.\nFor example, to match only the letter <code>a</code> appearing between <code>3</code> and <code>5</code> times in the string <code>\"ah\"</code>, your regex would be <code>/a{3,5}h/</code>.\n<blockquote>let A4 = \"aaaah\";<br>let A2 = \"aah\";<br>let multipleA = /a{3,5}h/;<br>multipleA.test(A4); // Returns true<br>multipleA.test(A2); // Returns false</blockquote>\n"},
"587d7dbb367417b2b2512bab" : {"id":"587d7dbb367417b2b2512bab","title":"Use Capture Groups to Search and Replace","videoUrl":"","content":"\nSearching is useful. However, you can make searching even more powerful when it also changes (or replaces) the text you match.\nYou can search and replace text in a string using <code>.replace()</code> on a string. The inputs for <code>.replace()</code> is first the regex pattern you want to search for. The second parameter is the string to replace the match or a function to do something.\n<blockquote>let wrongText = \"The sky is silver.\";<br>let silverRegex = /silver/;<br>wrongText.replace(silverRegex, \"blue\");<br>// Returns \"The sky is blue.\"</blockquote>\nYou can also access capture groups in the replacement string with dollar signs (<code>$</code>).\n<blockquote>\"Code Camp\".replace(/(\\w+)\\s(\\w+)/, '$2 $1');<br>// Returns \"Camp Code\"</blockquote>\n"},
"587d7db3367417b2b2512b8e" : {"id":"587d7db3367417b2b2512b8e","title":"Using the Test Method","videoUrl":"","content":"\nRegular expressions are used in programming languages to match parts of strings. You create patterns to help you do that matching.\nIf you want to find the word <code>\"the\"</code> in the string <code>\"The dog chased the cat\"</code>, you could use the following regular expression: <code>/the/</code>. Notice that quote marks are not required within the regular expression.\nJavaScript has multiple ways to use regexes. One way to test a regex is using the <code>.test()</code> method. The <code>.test()</code> method takes the regex, applies it to a string (which is placed inside the parentheses), and returns <code>true</code> or <code>false</code> if your pattern finds something or not.\n<blockquote>let testStr = \"freeCodeCamp\";<br>let testRegex = /Code/;<br>testRegex.test(testStr);<br>// Returns true</blockquote>\n"}}
}