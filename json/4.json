{"lessons-4":{
"bd7168d8c242eddfaeb5bd13" : {"id":"bd7168d8c242eddfaeb5bd13","title":"Visualize Data with a Bar Chart","videoUrl":"","content":"\n<strong>Objective:</strong> Build a <a href='https://codepen.io' target='_blank'>CodePen.io</a> app that is functionally similar to this: <a href='https://codepen.io/freeCodeCamp/full/GrZVaM' target='_blank'>https://codepen.io/freeCodeCamp/full/GrZVaM</a>.\nFulfill the below <a href='https://en.wikipedia.org/wiki/User_story' target='_blank'>user stories</a> and get all of the tests to pass. Give it your own personal style.\nYou can use HTML, JavaScript, CSS, and the D3 svg-based visualization library. The tests require axes to be generated using the D3 axis property, which automatically generates ticks along the axis. These ticks are required for passing the D3 tests because their positions are used to determine alignment of graphed elements. You will find information about generating axes at <a href='https://github.com/d3/d3/blob/master/API.md#axes-d3-axis' target='_blank'>https://github.com/d3/d3/blob/master/API.md#axes-d3-axis</a>. Required (non-virtual) DOM elements are queried on the moment of each test. If you use a frontend framework (like Vue for example), the test results may be inaccurate for dynamic content. We hope to accommodate them eventually, but these frameworks are not currently supported for D3 projects.\n<strong>User Story #1:</strong> My chart should have a title with a corresponding <code>id=\"title\"</code>.\n<strong>User Story #2:</strong> My chart should have a <code>g</code> element x-axis with a corresponding <code>id=\"x-axis\"</code>.\n<strong>User Story #3:</strong> My chart should have a <code>g</code> element y-axis with a corresponding <code>id=\"y-axis\"</code>.\n<strong>User Story #4:</strong> Both axes should contain multiple tick labels, each with the corresponding <code>class=\"tick\"</code>.\n<strong>User Story #5:</strong> My chart should have a <code>rect</code> element for each data point with a corresponding <code>class=\"bar\"</code> displaying the data.\n<strong>User Story #6:</strong> Each bar should have the properties <code>data-date</code> and <code>data-gdp</code> containing date and GDP values.\n<strong>User Story #7:</strong> The bar elements' <code>data-date</code> properties should match the order of the provided data.\n<strong>User Story #8:</strong> The bar elements' <code>data-gdp</code> properties should match the order of the provided data.\n<strong>User Story #9:</strong> Each bar element's height should accurately represent the data's corresponding GDP.\n<strong>User Story #10:</strong> The <code>data-date</code> attribute and its corresponding bar element should align with the corresponding value on the x-axis.\n<strong>User Story #11:</strong> The <code>data-gdp</code> attribute and its corresponding bar element should align with the corresponding value on the y-axis.\n<strong>User Story #12:</strong> I can mouse over an area and see a tooltip with a corresponding <code>id=\"tooltip\"</code> which displays more information about the area.\n<strong>User Story #13:</strong> My tooltip should have a <code>data-date</code> property that corresponds to the <code>data-date</code> of the active area.\nHere is the dataset you will need to complete this project: <code>https://raw.githubusercontent.com/freeCodeCamp/ProjectReferenceData/master/GDP-data.json</code>\nYou can build your project by forking <a href='https://codepen.io/freeCodeCamp/pen/MJjpwO' target='_blank'>this CodePen pen</a>. Or you can use this CDN link to run the tests in any environment you like: <code>https://cdn.freecodecamp.org/testable-projects-fcc/v1/bundle.js</code>.\nOnce you're done, submit the URL to your working project with all its tests passing.\nRemember to use the <a href='https://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> method if you get stuck.\n"},
"587d7fa6367417b2b2512bbf" : {"id":"587d7fa6367417b2b2512bbf","title":"Visualize Data with a Choropleth Map","videoUrl":"","content":"\n<strong>Objective:</strong> Build a <a href='https://codepen.io' target='_blank'>CodePen.io</a> app that is functionally similar to this: <a href='https://codepen.io/freeCodeCamp/full/EZKqza' target='_blank'>https://codepen.io/freeCodeCamp/full/EZKqza</a>.\nFulfill the below <a href='https://en.wikipedia.org/wiki/User_story' target='_blank'>user stories</a> and get all of the tests to pass. Give it your own personal style.\nYou can use HTML, JavaScript, CSS, and the D3 svg-based visualization library. Required (non-virtual) DOM elements are queried on the moment of each test. If you use a frontend framework (like Vue for example), the test results may be inaccurate for dynamic content. We hope to accommodate them eventually, but these frameworks are not currently supported for D3 projects.\n<strong>User Story #1:</strong> My choropleth should have a title with a corresponding <code>id=\"title\"</code>.\n<strong>User Story #2:</strong> My choropleth should have a description element with a corresponding <code>id=\"description\"</code>.\n<strong>User Story #3:</strong> My choropleth should have counties with a corresponding <code>class=\"county\"</code> that represent the data.\n<strong>User Story #4:</strong> There should be at least 4 different fill colors used for the counties.\n<strong>User Story #5:</strong> My counties should each have <code>data-fips</code> and <code>data-education</code> properties containing their corresponding fips and education values.\n<strong>User Story #6:</strong> My choropleth should have a county for each provided data point.\n<strong>User Story #7:</strong> The counties should have data-fips and data-education values that match the sample data.\n<strong>User Story #8:</strong> My choropleth should have a legend with a corresponding <code>id=\"legend\"</code>.\n<strong>User Story #9:</strong> There should be at least 4 different fill colors used for the legend.\n<strong>User Story #10:</strong> I can mouse over an area and see a tooltip with a corresponding <code>id=\"tooltip\"</code> which displays more information about the area.\n<strong>User Story #11:</strong> My tooltip should have a <code>data-education</code> property that corresponds to the <code>data-education</code> of the active area.\nHere are the datasets you will need to complete this project:<br><ul><li><strong>US Education Data: </strong><code>https://cdn.freecodecamp.org/testable-projects-fcc/data/choropleth_map/for_user_education.json</code></li><li><strong>US County Data: </strong><code>https://cdn.freecodecamp.org/testable-projects-fcc/data/choropleth_map/counties.json</code></li></ul>\nYou can build your project by forking <a href='https://codepen.io/freeCodeCamp/pen/MJjpwO' target='_blank'>this CodePen pen</a>. Or you can use this CDN link to run the tests in any environment you like: <code>https://cdn.freecodecamp.org/testable-projects-fcc/v1/bundle.js</code>\nOnce you're done, submit the URL to your working project with all its tests passing.\nRemember to use the <a href='https://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> method if you get stuck.\n"},
"bd7188d8c242eddfaeb5bd13" : {"id":"bd7188d8c242eddfaeb5bd13","title":"Visualize Data with a Heat Map","videoUrl":"","content":"\n<strong>Objective:</strong> Build a <a href='https://codepen.io' target='_blank'>CodePen.io</a> app that is functionally similar to this: <a href='https://codepen.io/freeCodeCamp/full/JEXgeY' target='_blank'>https://codepen.io/freeCodeCamp/full/JEXgeY</a>.\nFulfill the below <a href='https://en.wikipedia.org/wiki/User_story' target='_blank'>user stories</a> and get all of the tests to pass. Give it your own personal style.\nYou can use HTML, JavaScript, CSS, and the D3 svg-based visualization library. Required (non-virtual) DOM elements are queried on the moment of each test. If you use a frontend framework (like Vue for example), the test results may be inaccurate for dynamic content. We hope to accommodate them eventually, but these frameworks are not currently supported for D3 projects.\n<strong>User Story #1:</strong> My heat map should have a title with a corresponding <code>id=\"title\"</code>.\n<strong>User Story #2:</strong> My heat map should have a description with a corresponding <code>id=\"description\"</code>.\n<strong>User Story #3:</strong> My heat map should have an x-axis with a corresponding <code>id=\"x-axis\"</code>.\n<strong>User Story #4:</strong> My heat map should have a y-axis with a corresponding <code>id=\"y-axis\"</code>.\n<strong>User Story #5:</strong> My heat map should have <code>rect</code> elements with a <code>class=\"cell\"</code> that represent the data.\n<strong>User Story #6:</strong> There should be at least 4 different fill colors used for the cells.\n<strong>User Story #7:</strong> Each cell will have the properties <code>data-month</code>, <code>data-year</code>, <code>data-temp</code> containing their corresponding month, year, and temperature values.\n<strong>User Story #8:</strong> The <code>data-month</code>, <code>data-year</code> of each cell should be within the range of the data.\n<strong>User Story #9:</strong> My heat map should have cells that align with the corresponding month on the y-axis.\n<strong>User Story #10:</strong> My heat map should have cells that align with the corresponding year on the x-axis.\n<strong>User Story #11:</strong> My heat map should have multiple tick labels on the y-axis with the full month name.\n<strong>User Story #12:</strong> My heat map should have multiple tick labels on the x-axis with the years between 1754 and 2015.\n<strong>User Story #13:</strong> My heat map should have a legend with a corresponding <code>id=\"legend\"</code>.\n<strong>User Story #14:</strong> My legend should contain <code>rect</code> elements.\n<strong>User Story #15:</strong> The <code>rect</code> elements in the legend should use at least 4 different fill colors.\n<strong>User Story #16:</strong> I can mouse over an area and see a tooltip with a corresponding <code>id=\"tooltip\"</code> which displays more information about the area.\n<strong>User Story #16:</strong> My tooltip should have a <code>data-year</code> property that corresponds to the <code>data-year</code> of the active area.\nHere is the dataset you will need to complete this project: <code>https://raw.githubusercontent.com/freeCodeCamp/ProjectReferenceData/master/global-temperature.json</code>\nYou can build your project by forking <a href='https://codepen.io/freeCodeCamp/pen/MJjpwO' target='_blank'>this CodePen pen</a>. Or you can use this CDN link to run the tests in any environment you like: <code>https://cdn.freecodecamp.org/testable-projects-fcc/v1/bundle.js</code>\nOnce you're done, submit the URL to your working project with all its tests passing.\nRemember to use the <a href='https://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> method if you get stuck.\n"},
"bd7178d8c242eddfaeb5bd13" : {"id":"bd7178d8c242eddfaeb5bd13","title":"Visualize Data with a Scatterplot Graph","videoUrl":"","content":"\n<strong>Objective:</strong> Build a <a href='https://codepen.io' target='_blank'>CodePen.io</a> app that is functionally similar to this: <a href='https://codepen.io/freeCodeCamp/full/bgpXyK' target='_blank'>https://codepen.io/freeCodeCamp/full/bgpXyK</a>.\nFulfill the below <a href='https://en.wikipedia.org/wiki/User_story' target='_blank'>user stories</a> and get all of the tests to pass. Give it your own personal style.\nYou can use HTML, JavaScript, CSS, and the D3 svg-based visualization library. The tests require axes to be generated using the D3 axis property, which automatically generates ticks along the axis. These ticks are required for passing the D3 tests because their positions are used to determine alignment of graphed elements. You will find information about generating axes at <a href='https://github.com/d3/d3/blob/master/API.md#axes-d3-axis' target='_blank'>https://github.com/d3/d3/blob/master/API.md#axes-d3-axis</a>. Required (non-virtual) DOM elements are queried on the moment of each test. If you use a frontend framework (like Vue for example), the test results may be inaccurate for dynamic content. We hope to accommodate them eventually, but these frameworks are not currently supported for D3 projects.\n<strong>User Story #1:</strong> I can see a title element that has a corresponding <code>id=\"title\"</code>.\n<strong>User Story #2:</strong> I can see an x-axis that has a corresponding <code>id=\"x-axis\"</code>.\n<strong>User Story #3:</strong> I can see a y-axis that has a corresponding <code>id=\"y-axis\"</code>.\n<strong>User Story #4:</strong> I can see dots, that each have a class of <code>dot</code>, which represent the data being plotted.\n<strong>User Story #5:</strong> Each dot should have the properties <code>data-xvalue</code> and <code>data-yvalue</code> containing their corresponding x and y values.\n<strong>User Story #6:</strong> The <code>data-xvalue</code> and <code>data-yvalue</code> of each dot should be within the range of the actual data and in the correct data format. For <code>data-xvalue</code>, integers (full years) or Date objects are acceptable for test evaluation. For <code>data-yvalue</code> (minutes), use Date objects.\n<strong>User Story #7:</strong> The <code>data-xvalue</code> and its corresponding dot should align with the corresponding point/value on the x-axis.\n<strong>User Story #8:</strong> The <code>data-yvalue</code> and its corresponding dot should align with the corresponding point/value on the y-axis.\n<strong>User Story #9:</strong> I can see multiple tick labels on the y-axis with <code>%M:%S</code> time format.\n<strong>User Story #10:</strong> I can see multiple tick labels on the x-axis that show the year.\n<strong>User Story #11:</strong> I can see that the range of the x-axis labels are within the range of the actual x-axis data.\n<strong>User Story #12:</strong> I can see that the range of the y-axis labels are within the range of the actual y-axis data.\n<strong>User Story #13:</strong> I can see a legend containing descriptive text that has <code>id=\"legend\"</code>.\n<strong>User Story #14:</strong> I can mouse over an area and see a tooltip with a corresponding <code>id=\"tooltip\"</code> which displays more information about the area.\n<strong>User Story #15:</strong> My tooltip should have a <code>data-year</code> property that corresponds to the <code>data-xvalue</code> of the active area.\nHere is the dataset you will need to complete this project: <code>https://raw.githubusercontent.com/freeCodeCamp/ProjectReferenceData/master/cyclist-data.json</code>\nYou can build your project by forking <a href='https://codepen.io/freeCodeCamp/pen/MJjpwO' target='_blank'>this CodePen pen</a>. Or you can use this CDN link to run the tests in any environment you like: <code>https://cdn.freecodecamp.org/testable-projects-fcc/v1/bundle.js</code>\nOnce you're done, submit the URL to your working project with all its tests passing.\nRemember to use the <a href='https://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> method if you get stuck.\n"},
"587d7fa6367417b2b2512bc0" : {"id":"587d7fa6367417b2b2512bc0","title":"Visualize Data with a Treemap Diagram","videoUrl":"","content":"\n<strong>Objective:</strong> Build a <a href='https://codepen.io' target='_blank'>CodePen.io</a> app that is functionally similar to this: <a href='https://codepen.io/freeCodeCamp/full/KaNGNR' target='_blank'>https://codepen.io/freeCodeCamp/full/KaNGNR</a>.\nFulfill the below <a href='https://en.wikipedia.org/wiki/User_story' target='_blank'>user stories</a> and get all of the tests to pass. Give it your own personal style.\nYou can use HTML, JavaScript, CSS, and the D3 svg-based visualization library. The tests require axes to be generated using the D3 axis property, which automatically generates ticks along the axis. These ticks are required for passing the D3 tests because their positions are used to determine alignment of graphed elements. You will find information about generating axes at <a href='https://github.com/d3/d3/blob/master/API.md#axes-d3-axis' target='_blank'>https://github.com/d3/d3/blob/master/API.md#axes-d3-axis</a>. Required (non-virtual) DOM elements are queried on the moment of each test. If you use a frontend framework (like Vue for example), the test results may be inaccurate for dynamic content. We hope to accommodate them eventually, but these frameworks are not currently supported for D3 projects.\n<strong>User Story #1:</strong> My tree map should have a title with a corresponding <code>id=\"title\"</code>.\n<strong>User Story #2:</strong> My tree map should have a description with a corresponding <code>id=\"description\"</code>.\n<strong>User Story #3:</strong> My tree map should have <code>rect</code> elements with a corresponding <code>class=\"tile\"</code> that represent the data.\n<strong>User Story #4:</strong> There should be at least 2 different fill colors used for the tiles.\n<strong>User Story #5:</strong> Each tile should have the properties <code>data-name</code>, <code>data-category</code>, and <code>data-value</code> containing their corresponding name, category, and value.\n<strong>User Story #6:</strong> The area of each tile should correspond to the data-value amount: tiles with a larger data-value should have a bigger area.\n<strong>User Story #7:</strong> My tree map should have a legend with corresponding <code>id=\"legend\"</code>.\n<strong>User Story #8:</strong> My legend should have <code>rect</code> elements with a corresponding <code>class=\"legend-item\"</code>.\n<strong>User Story #9:</strong> The <code>rect</code> elements in the legend should use at least 2 different fill colors.\n<strong>User Story #10:</strong> I can mouse over an area and see a tooltip with a corresponding <code>id=\"tooltip\"</code> which displays more information about the area.\n<strong>User Story #11:</strong> My tooltip should have a <code>data-value</code> property that corresponds to the <code>data-value</code> of the active area.\nFor this project you can use any of the following datasets:<br><ul><li><strong>Kickstarter Pledges:</strong> <code>https://cdn.freecodecamp.org/testable-projects-fcc/data/tree_map/kickstarter-funding-data.json</code></li><li><strong>Movie Sales:</strong> <code>https://cdn.freecodecamp.org/testable-projects-fcc/data/tree_map/movie-data.json</code></li><li><strong>Video Game Sales:</strong> <code>https://cdn.freecodecamp.org/testable-projects-fcc/data/tree_map/video-game-sales-data.json</code></li></ul>\nYou can build your project by forking <a href='https://codepen.io/freeCodeCamp/pen/MJjpwO' target='_blank'>this CodePen pen</a>. Or you can use this CDN link to run the tests in any environment you like: <code>https://cdn.freecodecamp.org/testable-projects-fcc/v1/bundle.js</code>\nOnce you're done, submit the URL to your working project with all its tests passing.\nRemember to use the <a href='https://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> method if you get stuck.\n"},
"587d7faa367417b2b2512bd4" : {"id":"587d7faa367417b2b2512bd4","title":"Add a Hover Effect to a D3 Element","videoUrl":"","content":"\nIt's possible to add effects that highlight a bar when the user hovers over it with the mouse. So far, the styling for the rectangles is applied with the built-in D3 and SVG methods, but you can use CSS as well.\nYou set the CSS class on the SVG elements with the <code>attr()</code> method. Then the <code>:hover</code> pseudo-class for your new class holds the style rules for any hover effects.\n"},
"587d7faa367417b2b2512bd6" : {"id":"587d7faa367417b2b2512bd6","title":"Add a Tooltip to a D3 Element","videoUrl":"","content":"\nA tooltip shows more information about an item on a page when the user hovers over that item. There are several ways to add a tooltip to a visualization, this challenge uses the SVG <code>title</code> element.\n<code>title</code> pairs with the <code>text()</code> method to dynamically add data to the bars.\n"},
"587d7fab367417b2b2512bd8" : {"id":"587d7fab367417b2b2512bd8","title":"Add Attributes to the Circle Elements","videoUrl":"","content":"\nThe last challenge created the <code>circle</code> elements for each point in the <code>dataset</code>, and appended them to the SVG canvas. But D3 needs more information about the position and size of each <code>circle</code> to display them correctly.\nA <code>circle</code> in SVG has three main attributes. The <code>cx</code> and <code>cy</code> attributes are the coordinates. They tell D3 where to position the <em>center</em> of the shape on the SVG canvas. The radius (<code>r</code> attribute) gives the size of the <code>circle</code>.\nJust like the <code>rect</code> <code>y</code> coordinate, the <code>cy</code> attribute for a <code>circle</code> is measured from the top of the SVG canvas, not from the bottom.\nAll three attributes can use a callback function to set their values dynamically. Remember that all methods chained after <code>data(dataset)</code> run once per item in <code>dataset</code>. The <code>d</code> parameter in the callback function refers to the current item in <code>dataset</code>, which is an array for each point. You use bracket notation, like <code>d[0]</code>, to access the values in that array.\n"},
"587d7fad367417b2b2512bdf" : {"id":"587d7fad367417b2b2512bdf","title":"Add Axes to a Visualization","videoUrl":"","content":"\nAnother way to improve the scatter plot is to add an x-axis and a y-axis.\nD3 has two methods <code>axisLeft()</code> and <code>axisBottom()</code> to render the y and x axes, respectively. (Axes is the plural form of axis). Here's an example to create the x-axis based on the <code>xScale</code> in the previous challenges:\n<code>const xAxis = d3.axisBottom(xScale);</code>\nThe next step is to render the axis on the SVG canvas. To do so, you can use a general SVG component, the <code>g</code> element. The <code>g</code> stands for group.\nUnlike <code>rect</code>, <code>circle</code>, and <code>text</code>, an axis is just a straight line when it's rendered. Because it is a simple shape, using <code>g</code> works.\nThe last step is to apply a <code>transform</code> attribute to position the axis on the SVG canvas in the right place. Otherwise, the line would render along the border of SVG canvas and wouldn't be visible.\nSVG supports different types of <code>transforms</code>, but positioning an axis needs <code>translate</code>. When it's applied to the <code>g</code> element, it moves the whole group over and down by the given amounts. Here's an example:\n<blockquote>const xAxis = d3.axisBottom(xScale);<br><br>svg.append(\"g\")<br>&nbsp;&nbsp; .attr(\"transform\", \"translate(0, \" + (h - padding) + \")\")<br>&nbsp;&nbsp; .call(xAxis);</blockquote>\nThe above code places the x-axis at the bottom of the SVG canvas. Then it's passed as an argument to the <code>call()</code> method.\nThe y-axis works is the same way, except the <code>translate</code> argument is in the form (x, 0). Because <code>translate</code> is a string in the <code>attr()</code> method above, you can use concatenation to include variable values for its arguments.\n"},
"587d7fa7367417b2b2512bc8" : {"id":"587d7fa7367417b2b2512bc8","title":"Add Classes with D3","videoUrl":"","content":"\nUsing a lot of inline styles on HTML elements gets hard to manage, even for smaller apps. It's easier to add a class to elements and style that class one time using CSS rules. D3 has the <code>attr()</code> method to add any HTML attribute to an element, including a class name.\nThe <code>attr()</code> method works the same way that <code>style()</code> does. It takes comma-separated values, and can use a callback function. Here's an example to add a class of \"container\" to a selection:\n<code>selection.attr(\"class\", \"container\");</code>\n\nNote that the \"class\" parameter will remain the same whenever you need to add a class and only the \"container\" parameter will change.\n"},
"587d7fa6367417b2b2512bc2" : {"id":"587d7fa6367417b2b2512bc2","title":"Add Document Elements with D3","videoUrl":"","content":"\nD3 has several methods that let you add and change elements in your document.\nThe <code>select()</code> method selects one element from the document. It takes an argument for the name of the element you want and returns an HTML node for the first element in the document that matches the name. Here's an example:\n<code>const anchor = d3.select(\"a\");</code>\nThe above example finds the first anchor tag on the page and saves an HTML node for it in the variable <code>anchor</code>. You can use the selection with other methods. The \"d3\" part of the example is a reference to the D3 object, which is how you access D3 methods.\nTwo other useful methods are <code>append()</code> and <code>text()</code>.\nThe <code>append()</code> method takes an argument for the element you want to add to the document. It appends an HTML node to a selected item, and returns a handle to that node.\nThe <code>text()</code> method either sets the text of the selected node, or gets the current text. To set the value, you pass a string as an argument inside the parentheses of the method.\nHere's an example that selects an unordered list, appends a list item, and adds text:\n<blockquote>d3.select(\"ul\")<br>&nbsp;&nbsp;.append(\"li\")<br>&nbsp;&nbsp;.text(\"Very important item\");</blockquote>\nD3 allows you to chain several methods together with periods to perform a number of actions in a row.\n"},
"587d7fa7367417b2b2512bc6" : {"id":"587d7fa7367417b2b2512bc6","title":"Add Inline Styling to Elements","videoUrl":"","content":"\nD3 lets you add inline CSS styles on dynamic elements with the <code>style()</code> method.\nThe <code>style()</code> method takes a comma-separated key-value pair as an argument. Here's an example to set the selection's text color to blue:\n<code>selection.style(\"color\",\"blue\");</code>\n"},
"587d7faa367417b2b2512bd2" : {"id":"587d7faa367417b2b2512bd2","title":"Add Labels to D3 Elements","videoUrl":"","content":"\nD3 lets you label a graph element, such as a bar, using the SVG <code>text</code> element.\nLike the <code>rect</code> element, a <code>text</code> element needs to have <code>x</code> and <code>y</code> attributes, to place it on the SVG canvas. It also needs to access the data to display those values.\nD3 gives you a high level of control over how you label your bars.\n"},
"587d7fab367417b2b2512bd9" : {"id":"587d7fab367417b2b2512bd9","title":"Add Labels to Scatter Plot Circles","videoUrl":"","content":"\nYou can add text to create labels for the points in a scatter plot.\nThe goal is to display the comma-separated values for the first (<code>x</code>) and second (<code>y</code>) fields of each item in <code>dataset</code>.\nThe <code>text</code> nodes need <code>x</code> and <code>y</code> attributes to position it on the SVG canvas. In this challenge, the <code>y</code> value (which determines height) can use the same value that the <code>circle</code> uses for its <code>cy</code> attribute. The <code>x</code> value can be slightly larger than the <code>cx</code> value of the <code>circle</code>, so the label is visible. This will push the label to the right of the plotted point.\n"},
"587d7fa7367417b2b2512bc7" : {"id":"587d7fa7367417b2b2512bc7","title":"Change Styles Based on Data","videoUrl":"","content":"\nD3 is about visualization and presentation of data. It's likely you'll want to change the styling of elements based on the data. You can use a callback function in the <code>style()</code> method to change the styling for different elements.\nFor example, you may want to color a data point blue if has a value less than 20, and red otherwise. You can use a callback function in the <code>style()</code> method and include the conditional logic. The callback function uses the <code>d</code> parameter to represent the data point:\n<blockquote>selection.style(\"color\", (d) => {<br>&nbsp;&nbsp;/* Logic that returns the color based on a condition */<br>});</blockquote>\nThe <code>style()</code> method is not limited to setting the <code>color</code> - it can be used with other CSS properties as well.\n"},
"587d7fa9367417b2b2512bd1" : {"id":"587d7fa9367417b2b2512bd1","title":"Change the Color of an SVG Element","videoUrl":"","content":"\nThe bars are in the right position, but they are all the same black color. SVG has a way to change the color of the bars.\nIn SVG, a <code>rect</code> shape is colored with the <code>fill</code> attribute. It supports hex codes, color names, and rgb values, as well as more complex options like gradients and transparency.\n"},
"587d7fa8367417b2b2512bca" : {"id":"587d7fa8367417b2b2512bca","title":"Change the Presentation of a Bar Chart","videoUrl":"","content":"\nThe last challenge created a bar chart, but there are a couple of formatting changes that could improve it:\n1) Add space between each bar to visually separate them, which is done by adding a margin to the CSS for the <code>bar</code> class\n2) Increase the height of the bars to better show the difference in values, which is done by multiplying the value by a number to scale the height\n"},
"587d7fa8367417b2b2512bcd" : {"id":"587d7fa8367417b2b2512bcd","title":"Create a Bar for Each Data Point in the Set","videoUrl":"","content":"\nThe last challenge added only one rectangle to the <code>svg</code> element to represent a bar. Here, you'll combine what you've learned so far about <code>data()</code>, <code>enter()</code>, and SVG shapes to create and append a rectangle for each data point in <code>dataset</code>.\nA previous challenge showed the format for how to create and append a <code>div</code> for each item in <code>dataset</code>:\n<blockquote>d3.select(\"body\").selectAll(\"div\")<br>&nbsp;&nbsp;.data(dataset)<br>&nbsp;&nbsp;.enter()<br>&nbsp;&nbsp;.append(\"div\")</blockquote>\nThere are a few differences working with <code>rect</code> elements instead of <code>divs</code>. The <code>rects</code> must be appended to an <code>svg</code> element, not directly to the <code>body</code>. Also, you need to tell D3 where to place each <code>rect</code> within the <code>svg</code> area. The bar placement will be covered in the next challenge.\n"},
"587d7fab367417b2b2512bda" : {"id":"587d7fab367417b2b2512bda","title":"Create a Linear Scale with D3","videoUrl":"","content":"\nThe bar and scatter plot charts both plotted data directly onto the SVG canvas. However, if the height of a bar or one of the data points were larger than the SVG height or width values, it would go outside the SVG area.\nIn D3, there are scales to help plot data. <code>Scales</code> are functions that tell the program how to map a set of raw data points onto the pixels of the SVG canvas.\nFor example, say you have a 100x500-sized SVG canvas and you want to plot Gross Domestic Product (GDP) for a number of countries. The set of numbers would be in the billion or trillion-dollar range. You provide D3 a type of scale to tell it how to place the large GDP values into that 100x500-sized area.\nIt's unlikely you would plot raw data as-is. Before plotting it, you set the scale for your entire data set, so that the <code>x</code> and <code>y</code> values fit your canvas width and height.\nD3 has several scale types. For a linear scale (usually used with quantitative data), there is the D3 method <code>scaleLinear()</code>:\n<code> const scale = d3.scaleLinear()</code>\nBy default, a scale uses the identity relationship. The value of the input is the same as the value of the output. A separate challenge covers how to change this.\n"},
"587d7fab367417b2b2512bd7" : {"id":"587d7fab367417b2b2512bd7","title":"Create a Scatterplot with SVG Circles","videoUrl":"","content":"\nA scatter plot is another type of visualization. It usually uses circles to map data points, which have two values each. These values tie to the <code>x</code> and <code>y</code> axes, and are used to position the circle in the visualization.\nSVG has a <code>circle</code> tag to create the circle shape. It works a lot like the <code>rect</code> elements you used for the bar chart.\n"},
"587d7fa8367417b2b2512bcc" : {"id":"587d7fa8367417b2b2512bcc","title":"Display Shapes with SVG","videoUrl":"","content":"\nThe last challenge created an <code>svg</code> element with a given width and height, which was visible because it had a <code>background-color</code> applied to it in the <code>style</code> tag. The code made space for the given width and height.\nThe next step is to create a shape to put in the <code>svg</code> area. There are a number of supported shapes in SVG, such as rectangles and circles. They are used to display data. For example, a rectangle (<code>&lt;rect&gt;</code>) SVG shape could create a bar in a bar chart.\nWhen you place a shape into the <code>svg</code> area, you can specify where it goes with <code>x</code> and <code>y</code> coordinates. The origin point of (0, 0) is in the upper-left corner. Positive values for <code>x</code> push the shape to the right, and positive values for <code>y</code> push the shape down from the origin point.\nTo place a shape in the middle of the 500 (width) x 100 (height) <code>svg</code> from last challenge, the <code>x</code> coordinate would be 250 and the <code>y</code> coordinate would be 50.\nAn SVG <code>rect</code> has four attributes. There are the <code>x</code> and <code>y</code> coordinates for where it is placed in the <code>svg</code> area. It also has a <code>height</code> and <code>width</code> to specify the size.\n"},
"587d7fa9367417b2b2512bcf" : {"id":"587d7fa9367417b2b2512bcf","title":"Dynamically Change the Height of Each Bar","videoUrl":"","content":"\nThe height of each bar can be set to the value of the data point in the array, similar to how the <code>x</code> value was set dynamically.\n<blockquote>selection.attr(\"property\", (d, i) => {<br>&nbsp;&nbsp;/* <br>&nbsp;&nbsp;* d is the data point value<br>&nbsp;&nbsp;* i is the index of the data point in the array<br>&nbsp;&nbsp;*/<br>})</blockquote>\n"},
"587d7fa9367417b2b2512bce" : {"id":"587d7fa9367417b2b2512bce","title":"Dynamically Set the Coordinates for Each Bar","videoUrl":"","content":"\nThe last challenge created and appended a rectangle to the <code>svg</code> element for each point in <code>dataset</code> to represent a bar. Unfortunately, they were all stacked on top of each other.\nThe placement of a rectangle is handled by the <code>x</code> and <code>y</code> attributes. They tell D3 where to start drawing the shape in the <code>svg</code> area. The last challenge set them each to 0, so every bar was placed in the upper-left corner.\nFor a bar chart, all of the bars should sit on the same vertical level, which means the <code>y</code> value stays the same (at 0) for all bars. The <code>x</code> value, however, needs to change as you add new bars. Remember that larger <code>x</code> values push items farther to the right. As you go through the array elements in <code>dataset</code>, the x value should increase.\nThe <code>attr()</code> method in D3 accepts a callback function to dynamically set that attribute. The callback function takes two arguments, one for the data point itself (usually <code>d</code>) and one for the index of the data point in the array. The second argument for the index is optional. Here's the format:\n<blockquote>selection.attr(\"property\", (d, i) => {<br>&nbsp;&nbsp;/* <br>&nbsp;&nbsp;* d is the data point value<br>&nbsp;&nbsp;* i is the index of the data point in the array<br>&nbsp;&nbsp;*/<br>})</blockquote>\nIt's important to note that you do NOT need to write a <code>for</code> loop or use <code>forEach()</code> to iterate over the items in the data set. Recall that the <code>data()</code> method parses the data set, and any method that's chained after <code>data()</code> is run once for each item in the data set.\n"},
"587d7fa9367417b2b2512bd0" : {"id":"587d7fa9367417b2b2512bd0","title":"Invert SVG Elements","videoUrl":"","content":"\nYou may have noticed the bar chart looked like it's upside-down, or inverted. This is because of how SVG uses (x, y) coordinates.\nIn SVG, the origin point for the coordinates is in the upper-left corner. An <code>x</code> coordinate of 0 places a shape on the left edge of the SVG area. A <code>y</code> coordinate of 0 places a shape on the top edge of the SVG area. Higher <code>x</code> values push the rectangle to the right. Higher <code>y</code> values push the rectangle down.\nTo make the bars right-side-up, you need to change the way the <code>y</code> coordinate is calculated. It needs to account for both the height of the bar and the total height of the SVG area.\nThe height of the SVG area is 100. If you have a data point of 0 in the set, you would want the bar to start at the bottom of the SVG area (not the top). To do this, the <code>y</code> coordinate needs a value of 100. If the data point value were 1, you would start with a <code>y</code> coordinate of 100 to set the bar at the bottom. Then you need to account for the height of the bar of 1, so the final <code>y</code> coordinate would be 99.\nThe <code>y</code> coordinate that is <code>y = heightOfSVG - heightOfBar</code> would place the bars right-side-up.\n"},
"587d7fa8367417b2b2512bcb" : {"id":"587d7fa8367417b2b2512bcb","title":"Learn About SVG in D3","videoUrl":"","content":"\nSVG stands for <code>Scalable Vector Graphics</code>.\nHere \"scalable\" means that, if you zoom in or out on an object, it would not appear pixelated. It scales with the display system, whether it's on a small mobile screen or a large TV monitor.\nSVG is used to make common geometric shapes. Since D3 maps data into a visual representation, it uses SVG to create the shapes for the visualization. SVG shapes for a web page must go within an HTML <code>svg</code> tag.\nCSS can be scalable when styles use relative units (such as <code>vh</code>, <code>vw</code>, or percentages), but using SVG is more flexible to build data visualizations.\n"},
"587d7fa6367417b2b2512bc3" : {"id":"587d7fa6367417b2b2512bc3","title":"Select a Group of Elements with D3","videoUrl":"","content":"\nD3 also has the <code>selectAll()</code> method to select a group of elements. It returns an array of HTML nodes for all the items in the document that match the input string. Here's an example to select all the anchor tags in a document:\n<code>const anchors = d3.selectAll(\"a\");</code>\nLike the <code>select()</code> method, <code>selectAll()</code> supports method chaining, and you can use it with other methods.\n"},
"587d7fac367417b2b2512bdb" : {"id":"587d7fac367417b2b2512bdb","title":"Set a Domain and a Range on a Scale","videoUrl":"","content":"\nBy default, scales use the identity relationship - the input value maps to the output value. But scales can be much more flexible and interesting.\nSay a data set has values ranging from 50 to 480. This is the input information for a scale, and is also known as the domain.\nYou want to map those points along the <code>x</code> axis on the SVG canvas, between 10 units and 500 units. This is the output information, which is also known as the range.\nThe <code>domain()</code> and <code>range()</code> methods set these values for the scale. Both methods take an array of at least two elements as an argument. Here's an example:\n<blockquote>// Set a domain<br>// The domain covers the set of input values<br>scale.domain([50, 480]);<br>// Set a range<br>// The range covers the set of output values<br>scale.range([10, 500]);<br>scale(50) // Returns 10<br>scale(480) // Returns 500<br>scale(325) // Returns 323.37<br>scale(750) // Returns 807.67<br>d3.scaleLinear()</blockquote>\nNotice that the scale uses the linear relationship between the domain and range values to figure out what the output should be for a given number. The minimum value in the domain (50) maps to the minimum value (10) in the range.\n"},
"587d7faa367417b2b2512bd3" : {"id":"587d7faa367417b2b2512bd3","title":"Style D3 Labels","videoUrl":"","content":"\nD3 methods can add styles to the bar labels. The <code>fill</code> attribute sets the color of the text for a <code>text</code> node. The <code>style()</code> method sets CSS rules for other styles, such as \"font-family\" or \"font-size\".\n"},
"587d7fa8367417b2b2512bc9" : {"id":"587d7fa8367417b2b2512bc9","title":"Update the Height of an Element Dynamically","videoUrl":"","content":"\nThe previous challenges covered how to display data from an array and how to add CSS classes. You can combine these lessons to create a simple bar chart. There are two steps to this:\n1) Create a <code>div</code> for each data point in the array\n2) Give each <code>div</code> a dynamic height, using a callback function in the <code>style()</code> method that sets height equal to the data value\nRecall the format to set a style using a callback function:\n<code>selection.style(\"cssProperty\", (d) => d)</code>\n"},
"587d7fac367417b2b2512bde" : {"id":"587d7fac367417b2b2512bde","title":"Use a Pre-Defined Scale to Place Elements","videoUrl":"","content":"\nWith the scales set up, it's time to map the scatter plot again. The scales are like processing functions that turn the x and y raw data into values that fit and render correctly on the SVG canvas. They keep the data within the screen's plotting area.\nYou set the coordinate attribute values for an SVG shape with the scaling function. This includes <code>x</code> and <code>y</code> attributes for <code>rect</code> or <code>text</code> elements, or <code>cx</code> and <code>cy</code> for <code>circles</code>. Here's an example:\n<blockquote>shape<br>&nbsp;&nbsp;.attr(\"x\", (d) => xScale(d[0]))</blockquote>\nScales set shape coordinate attributes to place the data points onto the SVG canvas. You don't need to apply scales when you display the actual data value, for example, in the <code>text()</code> method for a tooltip or label.\n"},
"587d7fac367417b2b2512bdd" : {"id":"587d7fac367417b2b2512bdd","title":"Use Dynamic Scales","videoUrl":"","content":"\nThe D3 <code>min()</code> and <code>max()</code> methods are useful to help set the scale.\nGiven a complex data set, one priority is to set the scale so the visualization fits the SVG container's width and height. You want all the data plotted inside the SVG canvas so it's visible on the web page.\nThe example below sets the x-axis scale for scatter plot data. The <code>domain()</code> method passes information to the scale about the raw data values for the plot. The <code>range()</code> method gives it information about the actual space on the web page for the visualization.\nIn the example, the domain goes from 0 to the maximum in the set. It uses the <code>max()</code> method with a callback function based on the x values in the arrays. The range uses the SVG canvas' width (<code>w</code>), but it includes some padding, too. This puts space between the scatter plot dots and the edge of the SVG canvas.\n<blockquote>const dataset = [<br>&nbsp;&nbsp;[ 34,    78 ],<br>&nbsp;&nbsp;[ 109,   280 ],<br>&nbsp;&nbsp;[ 310,   120 ],<br>&nbsp;&nbsp;[ 79,    411 ],<br>&nbsp;&nbsp;[ 420,   220 ],<br>&nbsp;&nbsp;[ 233,   145 ],<br>&nbsp;&nbsp;[ 333,   96 ],<br>&nbsp;&nbsp;[ 222,   333 ],<br>&nbsp;&nbsp;[ 78,    320 ],<br>&nbsp;&nbsp;[ 21,    123 ]<br>];<br>const w = 500;<br>const h = 500;<br><br>// Padding between the SVG canvas boundary and the plot<br>const padding = 30;<br>const xScale = d3.scaleLinear()<br>&nbsp;&nbsp;.domain([0, d3.max(dataset, (d) => d[0])])<br>&nbsp;&nbsp;.range([padding, w - padding]);</blockquote>\nThe padding may be confusing at first. Picture the x-axis as a horizontal line from 0 to 500 (the width value for the SVG canvas). Including the padding in the <code>range()</code> method forces the plot to start at 30 along that line (instead of 0), and end at 470 (instead of 500).\n"},
"587d7fac367417b2b2512bdc" : {"id":"587d7fac367417b2b2512bdc","title":"Use the d3.max and d3.min Functions to Find Minimum and Maximum Values in a Dataset","videoUrl":"","content":"\nThe D3 methods <code>domain()</code> and <code>range()</code> set that information for your scale based on the data. There are a couple methods to make that easier.\nOften when you set the domain, you'll want to use the minimum and maximum values within the data set. Trying to find these values manually, especially in a large data set, may cause errors.\nD3 has two methods - <code>min()</code> and <code>max()</code> to return this information. Here's an example:\n<blockquote>const exampleData = [34, 234, 73, 90, 6, 52];<br>d3.min(exampleData) // Returns 6<br>d3.max(exampleData) // Returns 234</blockquote>\nA dataset may have nested arrays, like the [x, y] coordinate pairs that were in the scatter plot example. In that case, you need to tell D3 how to calculate the maximum and minimum.\nFortunately, both the <code>min()</code> and <code>max()</code> methods take a callback function.\nIn this example, the callback function's argument <code>d</code> is for the current inner array. The callback needs to return the element from the inner array (the x or y value) over which you want to compute the maximum or minimum. Here's an example for how to find the min and max values with an array of arrays:\n<blockquote>const locationData = [[1, 7],[6, 3],[8, 3]];<br>// Returns the smallest number out of the first elements<br>const minX = d3.min(locationData, (d) => d[0]);<br>// minX compared 1, 6, and 8 and is set to 1</blockquote>\n"},
"587d7fa7367417b2b2512bc4" : {"id":"587d7fa7367417b2b2512bc4","title":"Work with Data in D3","videoUrl":"","content":"\nThe D3 library focuses on a data-driven approach. When you have a set of data, you can apply D3 methods to display it on the page. Data comes in many formats, but this challenge uses a simple array of numbers.\nThe first step is to make D3 aware of the data. The <code>data()</code> method is used on a selection of DOM elements to attach the data to those elements. The data set is passed as an argument to the method.\nA common workflow pattern is to create a new element in the document for each piece of data in the set. D3 has the <code>enter()</code> method for this purpose.\nWhen <code>enter()</code> is combined with the <code>data()</code> method, it looks at the selected elements from the page and compares them to the number of data items in the set. If there are fewer elements than data items, it creates the missing elements.\nHere is an example that selects a <code>ul</code> element and creates a new list item based on the number of entries in the array:\n<blockquote>&lt;body&gt;<br>&nbsp;&nbsp;&lt;ul&gt;&lt;/ul&gt;<br>&nbsp;&nbsp;&lt;script&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;const dataset = [\"a\", \"b\", \"c\"];<br>&nbsp;&nbsp;&nbsp;&nbsp;d3.select(\"ul\").selectAll(\"li\")<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.data(dataset)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.enter()<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.append(\"li\")<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.text(\"New item\");<br>&nbsp;&nbsp;&lt;/script&gt;<br>&lt;/body&gt;</blockquote>\nIt may seem confusing to select elements that don't exist yet. This code is telling D3 to first select the <code>ul</code> on the page. Next, select all list items, which returns an empty selection. Then the <code>data()</code> method reviews the dataset and runs the following code three times, once for each item in the array. The <code>enter()</code> method sees there are no <code>li</code> elements on the page, but it needs 3 (one for each piece of data in <code>dataset</code>). New <code>li</code> elements are appended to the <code>ul</code> and have the text \"New item\".\n"},
"587d7fa7367417b2b2512bc5" : {"id":"587d7fa7367417b2b2512bc5","title":"Work with Dynamic Data in D3","videoUrl":"","content":"\nThe last two challenges cover the basics of displaying data dynamically with D3 using the <code>data()</code> and <code>enter()</code> methods. These methods take a data set and, together with the <code>append()</code> method, create a new DOM element for each entry in the data set.\nIn the previous challenge, you created a new <code>h2</code> element for each item in the <code>dataset</code> array, but they all contained the same text, \"New Title\". This is because you have not made use of the data that is bound to each of the <code>h2</code> elements.\nThe D3 <code>text()</code> method can take a string or a callback function as an argument:\n<code>selection.text((d) => d)</code>\nIn the example above, the parameter <code>d</code> refers to a single entry in the dataset that a selection is bound to.\nUsing the current example as context, the first <code>h2</code> element is bound to 12, the second <code>h2</code> element is bound to 31, the third <code>h2</code> element is bound to 22, and so on.\n"},
"587d7fae367417b2b2512be4" : {"id":"587d7fae367417b2b2512be4","title":"Access the JSON Data from an API","videoUrl":"","content":"\nIn the previous challenge, you saw how to get JSON data from the freeCodeCamp Cat Photo API.\nNow you'll take a closer look at the returned data to better understand the JSON format. Recall some notation in JavaScript:\n<blockquote>[ ] -> Square brackets represent an array<br>{ } -> Curly brackets represent an object<br>\" \" -> Double quotes represent a string. They are also used for key names in JSON</blockquote>\nUnderstanding the structure of the data that an API returns is important because it influences how you retrieve the values you need.\nOn the right, click the \"Get Message\" button to load the freeCodeCamp Cat Photo API JSON into the HTML.\nThe first and last character you see in the JSON data are square brackets <code>[ ]</code>. This means that the returned data is an array. The second character in the JSON data is a curly <code>{</code> bracket, which starts an object. Looking closely, you can see that there are three separate objects. The JSON data is an array of three objects, where each object contains information about a cat photo.\nYou learned earlier that objects contain \"key-value pairs\" that are separated by commas. In the Cat Photo example, the first object has <code>\"id\":0</code> where \"id\" is a key and 0 is its corresponding value. Similarly, there are keys for \"imageLink\", \"altText\", and \"codeNames\". Each cat photo object has these same keys, but with different values.\nAnother interesting \"key-value pair\" in the first object is <code>\"codeNames\":[\"Juggernaut\",\"Mrs. Wallace\",\"ButterCup\"]</code>. Here \"codeNames\" is the key and its value is an array of three strings. It's possible to have arrays of objects as well as a key with an array as a value.\nRemember how to access data in arrays and objects. Arrays use bracket notation to access a specific index of an item. Objects use either bracket or dot notation to access the value of a given property. Here's an example that prints the \"altText\" of the first cat photo - note that the parsed JSON data in the editor is saved in a variable called <code>json</code>:\n<blockquote>console.log(json[0].altText);<br>// Prints \"A white cat wearing a green helmet shaped melon on its head.\"</blockquote>\n"},
"587d7fad367417b2b2512be2" : {"id":"587d7fad367417b2b2512be2","title":"Change Text with click Events","videoUrl":"","content":"\nWhen the click event happens, you can use JavaScript to update an HTML element.\nFor example, when a user clicks the \"Get Message\" button, it changes the text of the element with the class <code>message</code> to say \"Here is the message\".\nThis works by adding the following code within the click event:\n<code>document.getElementsByClassName('message')[0].textContent=\"Here is the message\";</code>\n"},
"587d7fae367417b2b2512be5" : {"id":"587d7fae367417b2b2512be5","title":"Convert JSON Data to HTML","videoUrl":"","content":"\nNow that you're getting data from a JSON API, you can display it in the HTML.\nYou can use a <code>forEach</code> method to loop through the data since the cat photo objects are held in an array. As you get to each item, you can modify the HTML elements.\nFirst, declare an html variable with <code>var html = \"\";</code>.\nThen, loop through the JSON, adding HTML to the variable that wraps the key names in <code>strong</code> tags, followed by the value. When the loop is finished, you render it.\nHere's the code that does this:\n<blockquote>json.forEach(function(val) {</br>&nbsp;&nbsp;var keys = Object.keys(val);</br>&nbsp;&nbsp;html += \"&lt;div class = 'cat'&gt;\";</br>&nbsp;&nbsp;keys.forEach(function(key) {</br>&nbsp;&nbsp;&nbsp;&nbsp;html += \"&lt;strong&gt;\" + key + \"&lt;/strong&gt;: \" + val[key] + \"&lt;br&gt;\";</br>&nbsp;&nbsp;});</br>&nbsp;&nbsp;html += \"&lt;/div&gt;&lt;br&gt;\";</br>});</blockquote>\n"},
"587d7faf367417b2b2512be8" : {"id":"587d7faf367417b2b2512be8","title":"Get Geolocation Data to Find A User's GPS Coordinates","videoUrl":"","content":"\nAnother cool thing you can do is access your user's current location. Every browser has a built in navigator that can give you this information.\nThe navigator will get the user's current longitude and latitude.\nYou will see a prompt to allow or block this site from knowing your current location. The challenge can be completed either way, as long as the code is correct.\nBy selecting allow, you will see the text on the output phone change to your latitude and longitude.\nHere's code that does this:\n<blockquote>if (navigator.geolocation){<br>&nbsp;&nbsp;navigator.geolocation.getCurrentPosition(function(position) {<br>&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('data').innerHTML=\"latitude: \"+ position.coords.latitude +  \"&lt;br&gt;longitude: \" +  position.coords.longitude;<br>&nbsp;&nbsp;});<br>}</blockquote>\nFirst, it checks if the <code>navigator.geolocation</code> object exists. If it does, the <code>getCurrentPosition</code> method on that object is called, which initiates an asynchronous request for the user's position. If the request is successful, the callback function in the method runs. This function accesses the <code>position</code> object's values for latitude and longitude using dot notation and updates the HTML.\n"},
"587d7fae367417b2b2512be3" : {"id":"587d7fae367417b2b2512be3","title":"Get JSON with the JavaScript XMLHttpRequest Method","videoUrl":"","content":"\nYou can also request data from an external source. This is where APIs come into play.\nRemember that APIs - or Application Programming Interfaces - are tools that computers use to communicate with one another. You'll learn how to update HTML with the data we get from APIs using a technology called AJAX.\nMost web APIs transfer data in a format called JSON. JSON stands for JavaScript Object Notation.\nJSON syntax looks very similar to JavaScript object literal notation. JSON has object properties and their current values, sandwiched between a <code>{</code> and a <code>}</code>.\nThese properties and their values are often referred to as \"key-value pairs\".\nHowever, JSON transmitted by APIs are sent as <code>bytes</code>, and your application receives it as a <code>string</code>. These can be converted into JavaScript objects, but they are not JavaScript objects by default. The <code>JSON.parse</code> method parses the string and constructs the JavaScript object described by it.\nYou can request the JSON from freeCodeCamp's Cat Photo API. Here's the code you can put in your click event to do this:\n<blockquote>req=new XMLHttpRequest();<br>req.open(\"GET\",'/json/cats.json',true);<br>req.send();<br>req.onload=function(){<br>&nbsp;&nbsp;json=JSON.parse(req.responseText);<br>&nbsp;&nbsp;document.getElementsByClassName('message')[0].innerHTML=JSON.stringify(json);<br>};</blockquote>\nHere's a review of what each piece is doing. The JavaScript <code>XMLHttpRequest</code> object has a number of properties and methods that are used to transfer data. First, an instance of the <code>XMLHttpRequest</code> object is created and saved in the <code>req</code> variable.\nNext, the <code>open</code> method initializes a request - this example is requesting data from an API, therefore is a \"GET\" request. The second argument for <code>open</code> is the URL of the API you are requesting data from. The third argument is a Boolean value where <code>true</code> makes it an asynchronous request.\nThe <code>send</code> method sends the request. Finally, the <code>onload</code> event handler parses the returned data and applies the <code>JSON.stringify</code> method to convert the JavaScript object into a string. This string is then inserted as the message text.\n"},
"587d7fad367417b2b2512be1" : {"id":"587d7fad367417b2b2512be1","title":"Handle Click Events with JavaScript using the onclick property","videoUrl":"","content":"\nYou want your code to execute only once your page has finished loading. For that purpose, you can attach a JavaScript event to the document called <code>DOMContentLoaded</code>. Here's the code that does this:\n<blockquote>document.addEventListener('DOMContentLoaded',function() {<br><br>});</blockquote>\nYou can implement event handlers that go inside of the <code>DOMContentLoaded</code> function. You can implement an <code>onclick</code> event handler which triggers when the user clicks on the element with id <code>getMessage</code>, by adding the following code:\n<blockquote>document.getElementById('getMessage').onclick=function(){};</blockquote>\n"},
"587d7faf367417b2b2512be9" : {"id":"587d7faf367417b2b2512be9","title":"Post Data with the JavaScript XMLHttpRequest Method","videoUrl":"","content":"\nIn the previous examples, you received data from an external resource. You can also send data to an external resource, as long as that resource supports AJAX requests and you know the URL.\nJavaScript's <code>XMLHttpRequest</code> method is also used to post data to a server. Here's an example:\n<blockquote>req=new XMLHttpRequest();<br>req.open(\"POST\",url,true);<br>req.setRequestHeader('Content-Type','text/plain');<br>req.onreadystatechange=function(){<br>&nbsp;&nbsp;if(req.readyState==4 && req.status==200){<br>&nbsp;&nbsp;&nbsp;&nbsp;document.getElementsByClassName('message')[0].innerHTML=req.responseText;<br>&nbsp;&nbsp;}<br>};<br>req.send(userName);</blockquote>\nYou've seen several of these methods before. Here the <code>open</code> method initializes the request as a \"POST\" to the given URL of the external resource, and uses the <code>true</code> Boolean to make it asynchronous.\nThe <code>setRequestHeader</code> method sets the value of an HTTP request header, which contains information about the sender and the request. It must be called after the <code>open</code> method, but before the <code>send</code> method. The two parameters are the name of the header and the value to set as the body of that header.\nNext, the <code>onreadystatechange</code> event listener handles a change in the state of the request. A <code>readyState</code> of 4 means the operation is complete, and a <code>status</code> of 200 means it was a successful request. The document's HTML can be updated.\nFinally, the <code>send</code> method sends the request with the <code>userName</code> value, which was given by the user in the <code>input</code> field.\n"},
"587d7fae367417b2b2512be7" : {"id":"587d7fae367417b2b2512be7","title":"Pre-filter JSON to Get the Data You Need","videoUrl":"","content":"\nIf you don't want to render every cat photo you get from the freeCodeCamp Cat Photo API, you can pre-filter the JSON before looping through it.\nGiven that the JSON data is stored in an array, you can use the <code>filter</code> method to filter out the cat whose \"id\" key has a value of 1.\nHere's the code to do this:\n<blockquote>json = json.filter(function(val) {<br>&nbsp;&nbsp;return (val.id !== 1);<br>});</blockquote>\n"},
"587d7fae367417b2b2512be6" : {"id":"587d7fae367417b2b2512be6","title":"Render Images from Data Sources","videoUrl":"","content":"\nThe last few challenges showed that each object in the JSON array contains an <code>imageLink</code> key with a value that is the URL of a cat's image.\nWhen you're looping through these objects, you can use this <code>imageLink</code> property to display this image in an <code>img</code> element.\nHere's the code that does this:\n<code>html += \"&lt;img src = '\" + val.imageLink + \"' \" + \"alt='\" + val.altText + \"'&gt;\";</code>\n"}}
}