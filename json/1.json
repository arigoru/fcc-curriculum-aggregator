{"lessons-1":{
"587d778b367417b2b2512aa8" : {"id":"587d778b367417b2b2512aa8","title":"Add an Accessible Date Picker","videoUrl":"'https://scrimba.com/c/cD9DJHr'","content":"\nForms often include the <code>input</code> field, which can be used to create several different form controls. The <code>type</code> attribute on this element indicates what kind of input will be created.\nYou may have noticed the <code>text</code> and <code>submit</code> input types in prior challenges, and HTML5 introduced an option to specify a <code>date</code> field. Depending on browser support, a date picker shows up in the <code>input</code> field when it's in focus, which makes filling in a form easier for all users.\nFor older browsers, the type will default to <code>text</code>, so it helps to show users the expected date format in the label or as placeholder text just in case.\nHere's an example:\n<blockquote>&lt;label for=&quot;input1&quot;&gt;Enter a date:&lt;/label&gt;<br>&lt;input type=&quot;date&quot; id=&quot;input1&quot; name=&quot;input1&quot;&gt;<br></blockquote>\n"},
"587d774c367417b2b2512a9c" : {"id":"587d774c367417b2b2512a9c","title":"Add a Text Alternative to Images for Visually Impaired Accessibility","videoUrl":"'https://scrimba.com/c/cPp7VfD'","content":"\nIt's likely you've seen an <code>alt</code> attribute on an <code>img</code> tag in other challenges. <code>Alt</code> text describes the content of the image and provides a text-alternative. This helps in case the image fails to load or can't be seen by a user. It's also used by search engines to understand what an image contains to include it in search results. Here's an example:\n<code>&lt;img src=&quot;importantLogo.jpeg&quot; alt=&quot;Company logo&quot;&gt;</code>\nPeople with visual impairments rely on screen readers to convert web content to an audio interface. They won't get information if it's only presented visually. For images, screen readers can access the <code>alt</code> attribute and read its contents to deliver key information.\nGood <code>alt</code> text is short but descriptive, and meant to briefly convey the meaning of the image. You should always include an <code>alt</code> attribute on your image. Per HTML5 specification, this is now considered mandatory.\n"},
"587d778f367417b2b2512aad" : {"id":"587d778f367417b2b2512aad","title":"Avoid Colorblindness Issues by Carefully Choosing Colors that Convey Information","videoUrl":"'https://scrimba.com/c/c437as3'","content":"\nThere are various forms of colorblindness. These can range from a reduced sensitivity to a certain wavelength of light to the inability to see color at all. The most common form is a reduced sensitivity to detect greens.\nFor example, if two similar green colors are the foreground and background color of your content, a colorblind user may not be able to distinguish them. Close colors can be thought of as neighbors on the color wheel, and those combinations should be avoided when conveying important information.\n<strong>Note</strong><br>Some online color picking tools include visual simulations of how colors appear for different types of colorblindness. These are great resources in addition to online contrast checking calculators.\n"},
"587d778f367417b2b2512aac" : {"id":"587d778f367417b2b2512aac","title":"Avoid Colorblindness Issues by Using Sufficient Contrast","videoUrl":"'https://scrimba.com/c/cmzMEUw'","content":"\nColor is a large part of visual design, but its use introduces two accessibility issues. First, color alone should not be used as the only way to convey important information because screen reader users won't see it. Second, foreground and background colors need sufficient contrast so colorblind users can distinguish them.\nPrevious challenges covered having text alternatives to address the first issue. The last challenge introduced contrast checking tools to help with the second. The WCAG-recommended contrast ratio of 4.5:1 applies for color use as well as gray-scale combinations.\nColorblind users have trouble distinguishing some colors from others - usually in hue but sometimes lightness as well. You may recall the contrast ratio is calculated using the relative luminance (or lightness) values of the foreground and background colors.\nIn practice, the 4.5:1 ratio can be reached by darkening the darker color and lightening the lighter one with the aid of a color contrast checker. Darker colors on the color wheel are considered to be blues, violets, magentas, and reds, whereas lighter colors are oranges, yellows, greens, and blue-greens.\n"},
"587d778f367417b2b2512aae" : {"id":"587d778f367417b2b2512aae","title":"Give Links Meaning by Using Descriptive Link Text","videoUrl":"'https://scrimba.com/c/c437DcV'","content":"\nScreen reader users have different options for what type of content their device reads. This includes skipping to (or over) landmark elements, jumping to the main content, or getting a page summary from the headings. Another option is to only hear the links available on a page.\nScreen readers do this by reading the link text, or what's between the anchor (<code>a</code>) tags. Having a list of \"click here\" or \"read more\" links isn't helpful. Instead, you should use brief but descriptive text within the <code>a</code> tags to provide more meaning for these users.\n"},
"587d7789367417b2b2512aa4" : {"id":"587d7789367417b2b2512aa4","title":"Improve Accessibility of Audio Content with the audio Element","videoUrl":"'https://scrimba.com/c/cVJVkcZ'","content":"\nHTML5's <code>audio</code> element gives semantic meaning when it wraps sound or audio stream content in your markup. Audio content also needs a text alternative to be accessible to people who are deaf or hard of hearing. This can be done with nearby text on the page or a link to a transcript.\nThe <code>audio</code> tag supports the <code>controls</code> attribute. This shows the browser default play, pause, and other controls, and supports keyboard functionality. This is a boolean attribute, meaning it doesn't need a value, its presence on the tag turns the setting on.\nHere's an example:\n<blockquote>&lt;audio id=&quot;meowClip&quot; controls&gt;<br>&nbsp;&nbsp;&lt;source src=&quot;audio/meow.mp3&quot; type=&quot;audio/mpeg&quot; /&gt;<br>&nbsp;&nbsp;&lt;source src=&quot;audio/meow.ogg&quot; type=&quot;audio/ogg&quot; /&gt;<br>&lt;/audio&gt;<br></blockquote>\n<strong>Note</strong><br>Multimedia content usually has both visual and auditory components. It needs synchronized captions and a transcript so users with visual and/or auditory impairments can access it. Generally, a web developer is not responsible for creating the captions or transcript, but needs to know to include them.\n"},
"587d778a367417b2b2512aa5" : {"id":"587d778a367417b2b2512aa5","title":"Improve Chart Accessibility with the figure Element","videoUrl":"'https://scrimba.com/c/cGJMqtE'","content":"\nHTML5 introduced the <code>figure</code> element, along with the related <code>figcaption</code>. Used together, these items wrap a visual representation (like an image, diagram, or chart) along with its caption. This gives a two-fold accessibility boost by both semantically grouping related content, and providing a text alternative that explains the <code>figure</code>.\nFor data visualizations like charts, the caption can be used to briefly note the trends or conclusions for users with visual impairments. Another challenge covers how to move a table version of the chart's data off-screen (using CSS) for screen reader users.\nHere's an example - note that the <code>figcaption</code> goes inside the <code>figure</code> tags and can be combined with other elements:\n<blockquote>&lt;figure&gt;<br>&nbsp;&nbsp;&lt;img src=&quot;roundhouseDestruction.jpeg&quot; alt=&quot;Photo of Camper Cat executing a roundhouse kick&quot;&gt;<br>&nbsp;&nbsp;&lt;br&gt;<br>&nbsp;&nbsp;&lt;figcaption&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;Master Camper Cat demonstrates proper form of a roundhouse kick.<br>&nbsp;&nbsp;&lt;/figcaption&gt;<br>&lt;/figure&gt;<br></blockquote>\n"},
"587d778a367417b2b2512aa6" : {"id":"587d778a367417b2b2512aa6","title":"Improve Form Field Accessibility with the label Element","videoUrl":"'https://scrimba.com/c/cGJMMAN'","content":"\nImproving accessibility with semantic HTML markup applies to using both appropriate tag names as well as attributes. The next several challenges cover some important scenarios using attributes in forms.\nThe <code>label</code> tag wraps the text for a specific form control item, usually the name or label for a choice. This ties meaning to the item and makes the form more readable. The <code>for</code> attribute on a <code>label</code> tag explicitly associates that <code>label</code> with the form control and is used by screen readers.\nYou learned about radio buttons and their labels in a lesson in the Basic HTML section. In that lesson, we wrapped the radio button input element inside a <code>label</code> element along with the label text in order to make the text clickable. Another way to achieve this is by using the <code>for</code> attribute as explained in this lesson.\nThe value of the <code>for</code> attribute must be the same as the value of the <code>id</code> attribute of the form control. Here's an example:\n<blockquote>&lt;form&gt;<br>&nbsp;&nbsp;&lt;label for=&quot;name&quot;&gt;Name:&lt;/label&gt;<br>&nbsp;&nbsp;&lt;input type=&quottext&quot; id=&quot;name&quot; name=&quot;name&quot;&gt;<br>&lt;/form&gt;<br></blockquote>\n"},
"587d778e367417b2b2512aab" : {"id":"587d778e367417b2b2512aab","title":"Improve Readability with High Contrast Text","videoUrl":"'https://scrimba.com/c/cKb3nCq'","content":"\nLow contrast between the foreground and background colors can make text difficult to read. Sufficient contrast improves the readability of your content, but what exactly does \"sufficient\" mean?\nThe Web Content Accessibility Guidelines (WCAG) recommend at least a 4.5 to 1 contrast ratio for normal text. The ratio is calculated by comparing the relative luminance values of two colors. This ranges from 1:1 for the same color, or no contrast, to 21:1 for white against black, the strongest contrast. There are many contrast checking tools available online that calculate this ratio for you.\n"},
"587d774e367417b2b2512a9f" : {"id":"587d774e367417b2b2512a9f","title":"Jump Straight to the Content Using the main Element","videoUrl":"'https://scrimba.com/c/cPp7zuE'","content":"\nHTML5 introduced a number of new elements that give developers more options while also incorporating accessibility features. These tags include <code>main</code>, <code>header</code>, <code>footer</code>, <code>nav</code>, <code>article</code>, and <code>section</code>, among others.\nBy default, a browser renders these elements similarly to the humble <code>div</code>. However, using them where appropriate gives additional meaning in your markup. The tag name alone can indicate the type of information it contains, which adds semantic meaning to that content. Assistive technologies can access this information to provide better page summary or navigation options to their users.\nThe <code>main</code> element is used to wrap (you guessed it) the main content, and there should be only one per page. It's meant to surround the information that's related to the central topic of your page. It's not meant to include items that repeat across pages, like navigation links or banners.\nThe <code>main</code> tag also has an embedded landmark feature that assistive technology can use to quickly navigate to the main content. If you've ever seen a \"Jump to Main Content\" link at the top of a page, using a main tag automatically gives assistive devices that functionality.\n"},
"587d774c367417b2b2512a9d" : {"id":"587d774c367417b2b2512a9d","title":"Know When Alt Text Should be Left Blank","videoUrl":"'https://scrimba.com/c/cM9P4t2'","content":"\nIn the last challenge, you learned that including an <code>alt</code> attribute on img tags is mandatory. However, sometimes images are grouped with a caption already describing them, or are used for decoration only. In these cases <code>alt</code> text may seem redundant or unnecessary.\nIn situations when an image is already explained with text content, or does not add meaning to a page, the <code>img</code> still needs an <code>alt</code> attribute, but it can be set to an empty string. Here's an example:\n<code>&lt;img src=&quot;visualDecoration.jpeg&quot; alt=&quot;&quot;&gt;</code>\nBackground images usually fall under the 'decorative' label as well. However, they are typically applied with CSS rules, and therefore not part of the markup screen readers process.\n<strong>Note</strong><br>For images with a caption, you may still want to include <code>alt</code> text, since it helps search engines catalog the content of the image.\n"},
"587d778d367417b2b2512aaa" : {"id":"587d778d367417b2b2512aaa","title":"Make Elements Only Visible to a Screen Reader by Using Custom CSS","videoUrl":"'https://scrimba.com/c/c8azdfM'","content":"\nHave you noticed that all of the applied accessibility challenges so far haven't used any CSS? This is to show the importance of a logical document outline, and using semantically meaningful tags around your content before introducing the visual design aspect.\nHowever, CSS's magic can also improve accessibility on your page when you want to visually hide content meant only for screen readers. This happens when information is in a visual format (like a chart), but screen reader users need an alternative presentation (like a table) to access the data. CSS is used to position the screen reader-only elements off the visual area of the browser window.\nHere's an example of the CSS rules that accomplish this:\n<blockquote>.sr-only {<br>&nbsp;&nbsp;position: absolute;<br>&nbsp;&nbsp;left: -10000px;<br>&nbsp;&nbsp;width: 1px;<br>&nbsp;&nbsp;height: 1px;<br>&nbsp;&nbsp;top: auto;<br>&nbsp;&nbsp;overflow: hidden;<br>}</blockquote>\n<strong>Note</strong><br>The following CSS approaches will NOT do the same thing:\n<ul>\n<li><code>display: none;</code> or <code>visibility: hidden;</code> hides content for everyone, including screen reader users</li>\n<li>Zero values for pixel sizes, such as <code>width: 0px; height: 0px;</code> removes that element from the flow of your document, meaning screen readers will ignore it</li>\n</ul>\n"},
"587d7790367417b2b2512aaf" : {"id":"587d7790367417b2b2512aaf","title":"Make Links Navigatable with HTML Access Keys","videoUrl":"'https://scrimba.com/c/cQvmaTp'","content":"\nHTML offers the <code>accesskey</code> attribute to specify a shortcut key to activate or bring focus to an element. This can make navigation more efficient for keyboard-only users.\nHTML5 allows this attribute to be used on any element, but it's particularly useful when it's used with interactive ones. This includes links, buttons, and form controls.\nHere's an example:\n<code>&lt;button accesskey=&quot;b&quot;&gt;Important Button&lt;/button&gt;</code>\n"},
"587d7788367417b2b2512aa3" : {"id":"587d7788367417b2b2512aa3","title":"Make Screen Reader Navigation Easier with the footer Landmark","videoUrl":"'https://scrimba.com/c/crVrDh8'","content":"\nSimilar to <code>header</code> and <code>nav</code>, the <code>footer</code> element has a built-in landmark feature that allows assistive devices to quickly navigate to it. It's primarily used to contain copyright information or links to related documents that usually sit at the bottom of a page.\n"},
"587d7787367417b2b2512aa1" : {"id":"587d7787367417b2b2512aa1","title":"Make Screen Reader Navigation Easier with the header Landmark","videoUrl":"'https://scrimba.com/c/cB76vtv'","content":"\nThe next HTML5 element that adds semantic meaning and improves accessibility is the <code>header</code> tag. It's used to wrap introductory information or navigation links for its parent tag and works well around content that's repeated at the top on multiple pages.\n<code>header</code> shares the embedded landmark feature you saw with <code>main</code>, allowing assistive technologies to quickly navigate to that content.\n<strong>Note</strong><br><code>header</code> is meant for use in the <code>body</code> tag of your HTML document. This is different than the <code>head</code> element, which contains the page's title, meta information, etc.\n"},
"587d7788367417b2b2512aa2" : {"id":"587d7788367417b2b2512aa2","title":"Make Screen Reader Navigation Easier with the nav Landmark","videoUrl":"'https://scrimba.com/c/czVwWSv'","content":"\nThe <code>nav</code> element is another HTML5 item with the embedded landmark feature for easy screen reader navigation. This tag is meant to wrap around the main navigation links in your page.\nIf there are repeated site links at the bottom of the page, it isn't necessary to markup those with a <code>nav</code> tag as well. Using a <code>footer</code> (covered in the next challenge) is sufficient.\n"},
"587d778c367417b2b2512aa9" : {"id":"587d778c367417b2b2512aa9","title":"Standardize Times with the HTML5 datetime Attribute","videoUrl":"'https://scrimba.com/c/cmzMgtz'","content":"\nContinuing with the date theme, HTML5 also introduced the <code>time</code> element along with a <code>datetime</code> attribute to standardize times. This is an inline element that can wrap a date or time on a page. A valid format of that date is held by the <code>datetime</code> attribute. This is the value accessed by assistive devices. It helps avoid confusion by stating a standardized version of a time, even if it's written in an informal or colloquial manner in the text.\nHere's an example:\n<code>&lt;p&gt;Master Camper Cat officiated the cage match between Goro and Scorpion &lt;time datetime=&quot;2013-02-13&quot;&gt;last Wednesday&lt;/time&gt;, which ended in a draw.&lt;/p&gt;</code>\n"},
"587d774d367417b2b2512a9e" : {"id":"587d774d367417b2b2512a9e","title":"Use Headings to Show Hierarchical Relationships of Content","videoUrl":"'https://scrimba.com/c/cqVEktm'","content":"\nHeadings (<code>h1</code> through <code>h6</code> elements) are workhorse tags that help provide structure and labeling to your content. Screen readers can be set to read only the headings on a page so the user gets a summary. This means it is important for the heading tags in your markup to have semantic meaning and relate to each other, not be picked merely for their size values.\n<em>Semantic meaning</em> means that the tag you use around content indicates the type of information it contains.\nIf you were writing a paper with an introduction, a body, and a conclusion, it wouldn't make much sense to put the conclusion as a subsection of the body in your outline. It should be its own section. Similarly, the heading tags in a webpage need to go in order and indicate the hierarchical relationships of your content.\nHeadings with equal (or higher) rank start new implied sections, headings with lower rank start subsections of the previous one.\nAs an example, a page with an <code>h2</code> element followed by several subsections labeled with <code>h4</code> tags would confuse a screen reader user. With six choices, it's tempting to use a tag because it looks better in a browser, but you can use CSS to edit the relative sizing.\nOne final point, each page should always have one (and only one) <code>h1</code> element, which is the main subject of your content. This and the other headings are used in part by search engines to understand the topic of the page.\n"},
"587d7790367417b2b2512ab0" : {"id":"587d7790367417b2b2512ab0","title":"Use tabindex to Add Keyboard Focus to an Element","videoUrl":"'https://scrimba.com/c/cmzMDHW'","content":"\nThe HTML <code>tabindex</code> attribute has three distinct functions relating to an element's keyboard focus. When it's on a tag, it indicates that element can be focused on. The value (an integer that's positive, negative, or zero) determines the behavior.\nCertain elements, such as links and form controls, automatically receive keyboard focus when a user tabs through a page. It's in the same order as the elements come in the HTML source markup. This same functionality can be given to other elements, such as <code>div</code>, <code>span</code>, and <code>p</code>, by placing a <code>tabindex=\"0\"</code> attribute on them. Here's an example:\n<code>&lt;div tabindex=&quot;0&quot;&gt;I need keyboard focus!&lt;/div&gt;</code>\n<strong>Note</strong><br>A negative <code>tabindex</code> value (typically -1) indicates that an element is focusable, but is not reachable by the keyboard. This method is generally used to bring focus to content programmatically (like when a <code>div</code> used for a pop-up window is activated), and is beyond the scope of these challenges.\n"},
"587d7790367417b2b2512ab1" : {"id":"587d7790367417b2b2512ab1","title":"Use tabindex to Specify the Order of Keyboard Focus for Several Elements","videoUrl":"'https://scrimba.com/c/cmzRRcb'","content":"\nThe <code>tabindex</code> attribute also specifies the exact tab order of elements. This is achieved when the value of the attribute is set to a positive number of 1 or higher.\nSetting a tabindex=\"1\" will bring keyboard focus to that element first. Then it cycles through the sequence of specified <code>tabindex</code> values (2, 3, etc.), before moving to default and <code>tabindex=\"0\"</code> items.\nIt's important to note that when the tab order is set this way, it overrides the default order (which uses the HTML source). This may confuse users who are expecting to start navigation from the top of the page. This technique may be necessary in some circumstances, but in terms of accessibility, take care before applying it.\nHere's an example:\n<code>&lt;div tabindex=&quot;1&quot;&gt;I get keyboard focus, and I get it first!&lt;/div&gt;</code>\n<code>&lt;div tabindex=&quot;2&quot;&gt;I get keyboard focus, and I get it second!&lt;/div&gt;</code>\n"},
"587d774e367417b2b2512aa0" : {"id":"587d774e367417b2b2512aa0","title":"Wrap Content in the article Element","videoUrl":"'https://scrimba.com/c/cPp79S3'","content":"\n<code>article</code> is another one of the new HTML5 elements that adds semantic meaning to your markup. <code>Article</code> is a sectioning element, and is used to wrap independent, self-contained content. The tag works well with blog entries, forum posts, or news articles.\nDetermining whether content can stand alone is usually a judgement call, but there are a couple simple tests you can use. Ask yourself if you removed all surrounding context, would that content still make sense? Similarly for text, would the content hold up if it were in an RSS feed?\nRemember that folks using assistive technologies rely on organized, semantically meaningful markup to better understand your work.\n<strong>Note about <code>section</code> and <code>div</code></strong><br>The <code>section</code> element is also new with HTML5, and has a slightly different semantic meaning than <code>article</code>. An <code>article</code> is for standalone content, and a <code>section</code> is for grouping thematically related content. They can be used within each other, as needed. For example, if a book is the <code>article</code>, then each chapter is a <code>section</code>. When there's no relationship between groups of content, then use a <code>div</code>.\n<blockquote>&lt;div&gt; - groups content<br>&lt;section&gt; - groups related content<br>&lt;article&gt; - groups independent, self-contained content<br></blockquote>\n"},
"587d778b367417b2b2512aa7" : {"id":"587d778b367417b2b2512aa7","title":"Wrap Radio Buttons in a fieldset Element for Better Accessibility","videoUrl":"'https://scrimba.com/c/cVJVefw'","content":"\nThe next form topic covers accessibility of radio buttons. Each choice is given a <code>label</code> with a <code>for</code> attribute tying to the <code>id</code> of the corresponding item as covered in the last challenge. Since radio buttons often come in a group where the user must choose one, there's a way to semantically show the choices are part of a set.\nThe <code>fieldset</code> tag surrounds the entire grouping of radio buttons to achieve this. It often uses a <code>legend</code> tag to provide a description for the grouping, which is read by screen readers for each choice in the <code>fieldset</code> element.\nThe <code>fieldset</code> wrapper and <code>legend</code> tag are not necessary when the choices are self-explanatory, like a gender selection. Using a <code>label</code> with the <code>for</code> attribute for each radio button is sufficient.\nHere's an example:\n<blockquote>&lt;form&gt;<br>&nbsp;&nbsp;&lt;fieldset&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;legend&gt;Choose one of these three items:&lt;/legend&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;input id=&quot;one&quot; type=&quot;radio&quot; name=&quot;items&quot; value=&quot;one&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;label for=&quot;one&quot;&gt;Choice One&lt;/label&gt;&lt;br&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;input id=&quot;two&quot; type=&quot;radio&quot; name=&quot;items&quot; value=&quot;two&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;label for=&quot;two&quot;&gt;Choice Two&lt;/label&gt;&lt;br&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;input id=&quot;three&quot; type=&quot;radio&quot; name=&quot;items&quot; value=&quot;three&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;label for=&quot;three&quot;&gt;Choice Three&lt;/label&gt;<br>&nbsp;&nbsp;&lt;/fieldset&gt;<br>&lt;/form&gt;<br></blockquote>\n"},
"587d781b367417b2b2512abe" : {"id":"587d781b367417b2b2512abe","title":"Add a box-shadow to a Card-like Element","videoUrl":"'https://scrimba.com/c/cvVZdUd'","content":"\nThe <code>box-shadow</code> property applies one or more shadows to an element.\nThe <code>box-shadow</code> property takes values for <code>offset-x</code> (how far to push the shadow horizontally from the element), <code>offset-y</code> (how far to push the shadow vertically from the element), <code>blur-radius</code>, <code>spread-radius</code> and a color value, in that order. The <code>blur-radius</code> and <code>spread-radius</code> values are optional.\nHere's an example of the CSS to create multiple shadows with some blur, at mostly-transparent black colors:\n<blockquote>box-shadow: 0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23);</blockquote>\n"},
"587d781b367417b2b2512abc" : {"id":"587d781b367417b2b2512abc","title":"Adjust the background-color Property of Text","videoUrl":"'https://scrimba.com/c/cEDqwA6'","content":"\nInstead of adjusting your overall background or the color of the text to make the foreground easily readable, you can add a <code>background-color</code> to the element holding the text you want to emphasize. This challenge uses <code>rgba()</code> instead of <code>hex</code> codes or normal <code>rgb()</code>.\n<blockquote>rgba stands for:<br>&nbsp;&nbsp;r = red<br>&nbsp;&nbsp;g = green<br>&nbsp;&nbsp;b = blue<br>&nbsp;&nbsp;a = alpha/level of opacity</blockquote>\nThe RGB values can range from 0 to 255. The alpha value can range from 1, which is fully opaque or a solid color, to 0, which is fully transparent or clear. <code>rgba()</code> is great to use in this case, as it allows you to adjust the opacity. This means you don't have to completely block out the background.\nYou'll use <code>background-color: rgba(45, 45, 45, 0.1)</code> for this challenge. It produces a dark gray color that is nearly transparent given the low opacity value of 0.1.\n"},
"587d78a4367417b2b2512ad3" : {"id":"587d78a4367417b2b2512ad3","title":"Adjust the Color of Various Elements to Complementary Colors","videoUrl":"'https://scrimba.com/c/cWmPpud'","content":"\nThe Complementary Colors challenge showed that opposite colors on the color wheel can make each other appear more vibrant when placed side-by-side. However, the strong visual contrast can be jarring if it's overused on a website, and can sometimes make text harder to read if it's placed on a complementary-colored background. In practice, one of the colors is usually dominant and the complement is used to bring visual attention to certain content on the page.\n"},
"587d7791367417b2b2512ab5" : {"id":"587d7791367417b2b2512ab5","title":"Adjust the Height of an Element Using the height Property","videoUrl":"'https://scrimba.com/c/cEDaDTN'","content":"\nYou can specify the height of an element using the <code>height</code> property in CSS, similar to the <code>width</code> property. Here's an example that changes the height of an image to 20px:\n<blockquote>img {<br>&nbsp;&nbsp;height: 20px;<br>}</blockquote>\n"},
"587d781d367417b2b2512ac8" : {"id":"587d781d367417b2b2512ac8","title":"Adjust the Hover State of an Anchor Tag","videoUrl":"'https://scrimba.com/c/cakRGcm'","content":"\nThis challenge will touch on the usage of pseudo-classes. A pseudo-class is a keyword that can be added to selectors, in order to select a specific state of the element.\nFor example, the styling of an anchor tag can be changed for its hover state using the <code>:hover</code> pseudo-class selector. Here's the CSS to change the <code>color</code> of the anchor tag to red during its hover state:\n<blockquote>a:hover {<br>&nbsp;&nbsp;color: red;<br>}</blockquote>\n"},
"587d78a4367417b2b2512ad4" : {"id":"587d78a4367417b2b2512ad4","title":"Adjust the Hue of a Color","videoUrl":"'https://scrimba.com/c/cPp38TZ'","content":"\nColors have several characteristics including hue, saturation, and lightness. CSS3 introduced the <code>hsl()</code> property as an alternative way to pick a color by directly stating these characteristics.\n<b>Hue</b> is what people generally think of as 'color'. If you picture a spectrum of colors starting with red on the left, moving through green in the middle, and blue on right, the hue is where a color fits along this line. In <code>hsl()</code>, hue uses a color wheel concept instead of the spectrum, where the angle of the color on the circle is given as a value between 0 and 360.\n<b>Saturation</b> is the amount of gray in a color. A fully saturated color has no gray in it, and a minimally saturated color is almost completely gray. This is given as a percentage with 100% being fully saturated.\n<b>Lightness</b> is the amount of white or black in a color. A percentage is given ranging from 0% (black) to 100% (white), where 50% is the normal color.\nHere are a few examples of using <code>hsl()</code> with fully-saturated, normal lightness colors:\n<table class=\"table table-striped\"><thead><tr><th>Color</th><th>HSL</th></tr></thead><tbody><tr><td>red</td><td>hsl(0, 100%, 50%)</td></tr><tr><td>yellow</td><td>hsl(60, 100%, 50%)</td></tr><tr><td>green</td><td>hsl(120, 100%, 50%)</td></tr><tr><td>cyan</td><td>hsl(180, 100%, 50%)</td></tr><tr><td>blue</td><td>hsl(240, 100%, 50%)</td></tr><tr><td>magenta</td><td>hsl(300, 100%, 50%)</td></tr></tbody></table>\n"},
"587d781b367417b2b2512abd" : {"id":"587d781b367417b2b2512abd","title":"Adjust the Size of a Header Versus a Paragraph Tag","videoUrl":"'https://scrimba.com/c/c3bRPTz'","content":"\nThe font size of header tags (<code>h1</code> through <code>h6</code>) should generally be larger than the font size of paragraph tags. This makes it easier for the user to visually understand the layout and level of importance of everything on the page. You use the <code>font-size</code> property to adjust the size of the text in an element.\n"},
"587d78a4367417b2b2512ad5" : {"id":"587d78a4367417b2b2512ad5","title":"Adjust the Tone of a Color","videoUrl":"'https://scrimba.com/c/cEDJvT7'","content":"\nThe <code>hsl()</code> option in CSS also makes it easy to adjust the tone of a color. Mixing white with a pure hue creates a tint of that color, and adding black will make a shade. Alternatively, a tone is produced by adding gray or by both tinting and shading. Recall that the 's' and 'l' of <code>hsl()</code> stand for saturation and lightness, respectively. The saturation percent changes the amount of gray and the lightness percent determines how much white or black is in the color. This is useful when you have a base hue you like, but need different variations of it.\n"},
"587d7791367417b2b2512ab4" : {"id":"587d7791367417b2b2512ab4","title":"Adjust the Width of an Element Using the width Property","videoUrl":"'https://scrimba.com/c/cvVLPtN'","content":"\nYou can specify the width of an element using the <code>width</code> property in CSS. Values can be given in relative length units (such as em), absolute length units (such as px), or as a percentage of its containing parent element. Here's an example that changes the width of an image to 220px:\n<blockquote>img {<br>&nbsp;&nbsp;width: 220px;<br>}</blockquote>\n"},
"587d78a8367417b2b2512ae5" : {"id":"587d78a8367417b2b2512ae5","title":"Animate Elements at Variable Rates","videoUrl":"'https://scrimba.com/c/cZ89WA4'","content":"\nThere are a variety of ways to alter the animation rates of similarly animated elements. So far, this has been achieved by applying an <code>animation-iteration-count</code> property and setting <code>@keyframes</code> rules.\nTo illustrate, the animation on the right consists of two \"stars\" that each decrease in size and opacity at the 20% mark in the <code>@keyframes</code> rule, which creates the twinkle animation. You can change the <code>@keyframes</code> rule for one of the elements so the stars twinkle at different rates.\n"},
"587d78a8367417b2b2512ae3" : {"id":"587d78a8367417b2b2512ae3","title":"Animate Elements Continually Using an Infinite Animation Count","videoUrl":"'https://scrimba.com/c/cVJDVfq'","content":"\nThe previous challenges covered how to use some of the animation properties and the <code>@keyframes</code> rule. Another animation property is the <code>animation-iteration-count</code>, which allows you to control how many times you would like to loop through the animation. Here's an example:\n<code>animation-iteration-count: 3;</code>\nIn this case the animation will stop after running 3 times, but it's possible to make the animation run continuously by setting that value to infinite.\n"},
"587d78a8367417b2b2512ae6" : {"id":"587d78a8367417b2b2512ae6","title":"Animate Multiple Elements at Variable Rates","videoUrl":"'https://scrimba.com/c/cnpWZc9'","content":"\nIn the previous challenge, you changed the animation rates for two similarly animated elements by altering their <code>@keyframes</code> rules. You can achieve the same goal by manipulating the <code>animation-duration</code> of multiple elements.\nIn the animation running in the code editor, there are three \"stars\" in the sky that twinkle at the same rate on a continuous loop. To make them twinkle at different rates, you can set the <code>animation-duration</code> property to different values for each element.\n"},
"587d78a3367417b2b2512ad0" : {"id":"587d78a3367417b2b2512ad0","title":"Center an Element Horizontally Using the margin Property","videoUrl":"'https://scrimba.com/c/cyLJqU4'","content":"\nAnother positioning technique is to center a block element horizontally. One way to do this is to set its <code>margin</code> to a value of auto.\nThis method works for images, too. Images are inline elements by default, but can be changed to block elements when you set the <code>display</code> property to block.\n"},
"587d781e367417b2b2512ac9" : {"id":"587d781e367417b2b2512ac9","title":"Change an Element's Relative Position","videoUrl":"'https://scrimba.com/c/czVmMtZ'","content":"\nCSS treats each HTML element as its own box, which is usually referred to as the <code>CSS Box Model</code>. Block-level items automatically start on a new line (think headings, paragraphs, and divs) while inline items sit within surrounding content (like images or spans). The default layout of elements in this way is called the <code>normal flow</code> of a document, but CSS offers the position property to override it.\nWhen the position of an element is set to <code>relative</code>, it allows you to specify how CSS should move it <i>relative</i> to its current position in the normal flow of the page. It pairs with the CSS offset properties of <code>left</code> or <code>right</code>, and <code>top</code> or <code>bottom</code>. These say how many pixels, percentages, or ems to move the item <i>away</i> from where it is normally positioned. The following example moves the paragraph 10 pixels away from the bottom:\n<blockquote>p {<br>&nbsp;&nbsp;position: relative;<br>&nbsp;&nbsp;bottom: 10px;<br>}</blockquote>\nChanging an element's position to relative does not remove it from the normal flow - other elements around it still behave as if that item were in its default position.\n<strong>Note</strong><br>Positioning gives you a lot of flexibility and power over the visual layout of a page. It's good to remember that no matter the position of elements, the underlying HTML markup should be organized and make sense when read from top to bottom. This is how users with visual impairments (who rely on assistive devices like screen readers) access your content.\n"},
"587d78a8367417b2b2512ae7" : {"id":"587d78a8367417b2b2512ae7","title":"Change Animation Timing with Keywords","videoUrl":"'https://scrimba.com/c/cJKvwCM'","content":"\nIn CSS animations, the <code>animation-timing-function</code> property controls how quickly an animated element changes over the duration of the animation. If the animation is a car moving from point A to point B in a given time (your <code>animation-duration</code>), the <code>animation-timing-function</code> says how the car accelerates and decelerates over the course of the drive.\nThere are a number of predefined keywords available for popular options. For example, the default value is <code>ease</code>, which starts slow, speeds up in the middle, and then slows down again in the end. Other options include <code>ease-out</code>, which is quick in the beginning then slows down, <code>ease-in</code>, which is slow in the beginning, then speeds up at the end, or <code>linear</code>, which applies a constant animation speed throughout.\n"},
"587d78a3367417b2b2512acf" : {"id":"587d78a3367417b2b2512acf","title":"Change the Position of Overlapping Elements with the z-index Property","videoUrl":"'https://scrimba.com/c/cM94aHk'","content":"\nWhen elements are positioned to overlap, the element coming later in the HTML markup will, by default, appear on the top of the other elements. However, the <code>z-index</code> property can specify the order of how elements are stacked on top of one another. It must be an integer (i.e. a whole number and not a decimal), and higher values for the <code>z-index</code> property of an element move it higher in the stack than those with lower values.\n"},
"587d78a5367417b2b2512ad6" : {"id":"587d78a5367417b2b2512ad6","title":"Create a Gradual CSS Linear Gradient","videoUrl":"'https://scrimba.com/c/cg4dpt9'","content":"\nApplying a color on HTML elements is not limited to one flat hue. CSS provides the ability to use color transitions, otherwise known as gradients, on elements. This is accessed through the <code>background</code> property's <code>linear-gradient()</code> function. Here is the general syntax:\n<code>background: linear-gradient(gradient_direction, color 1, color 2, color 3, ...);</code>\nThe first argument specifies the direction from which color transition starts - it can be stated as a degree, where 90deg makes a vertical gradient and 45deg is angled like a backslash. The following arguments specify the order of colors used in the gradient.\nExample:\n<code>background: linear-gradient(90deg, red, yellow, rgb(204, 204, 255));</code>\n"},
"587d78a6367417b2b2512add" : {"id":"587d78a6367417b2b2512add","title":"Create a Graphic Using CSS","videoUrl":"'https://scrimba.com/c/cEDWPs6'","content":"\nBy manipulating different selectors and properties, you can make interesting shapes. One of the easier ones to try is a crescent moon shape. For this challenge you need to work with the <code>box-shadow</code> property that sets the shadow of an element, along with the <code>border-radius</code> property that controls the roundness of the element's corners.\nYou will create a round, transparent object with a crisp shadow that is slightly offset to the side - the shadow is actually going to be the moon shape you see.\nIn order to create a round object, the <code>border-radius</code> property should be set to a value of 50%.\nYou may recall from an earlier challenge that the <code>box-shadow</code> property takes values for <code>offset-x</code>, <code>offset-y</code>, <code>blur-radius</code>, <code>spread-radius</code> and a color value in that order. The <code>blur-radius</code> and <code>spread-radius</code> values are optional.\n"},
"587d781b367417b2b2512abb" : {"id":"587d781b367417b2b2512abb","title":"Create a Horizontal Line Using the hr Element","videoUrl":"'https://scrimba.com/c/c3bR8t7'","content":"\nYou can use the <code>hr</code> tag to add a horizontal line across the width of its containing element. This can be used to define a change in topic or to visually separate groups of content.\n"},
"587d78a6367417b2b2512ade" : {"id":"587d78a6367417b2b2512ade","title":"Create a More Complex Shape Using CSS and HTML","videoUrl":"'https://scrimba.com/c/cPpz4fr'","content":"\nOne of the most popular shapes in the world is the heart shape, and in this challenge you'll create one using pure CSS. But first, you need to understand the <code>::before</code> and <code>::after</code> pseudo-elements. These pseudo-elements are used to add something before or after a selected element. In the following example, a <code>::before</code> pseudo-element is used to add a rectangle to an element with the class <code>heart</code>:\n<blockquote>.heart::before {<br>&nbsp;&nbsp;content: \"\";<br>&nbsp;&nbsp;background-color: yellow;<br>&nbsp;&nbsp;border-radius: 25%;<br>&nbsp;&nbsp;position: absolute;<br>&nbsp;&nbsp;height: 50px;<br>&nbsp;&nbsp;width: 70px;<br>&nbsp;&nbsp;top: -50px;<br>&nbsp;&nbsp;left: 5px;<br>}</blockquote>\nFor the <code>::before</code> and <code>::after</code> pseudo-elements to function properly, they must have a defined <code>content</code> property. This property is usually used to add things like a photo or text to the selected element. When the <code>::before</code> and <code>::after</code> pseudo-elements are used to make shapes, the <code>content</code> property is still required, but it's set to an empty string.\nIn the above example, the element with the class of <code>heart</code> has a <code>::before</code> pseudo-element that produces a yellow rectangle with <code>height</code> and <code>width</code> of 50px and 70px, respectively. This rectangle has round corners due to its 25% border radius and is positioned absolutely at 5px from the <code>left</code> and 50px above the <code>top</code> of the element.\n"},
"587d78a7367417b2b2512ae1" : {"id":"587d78a7367417b2b2512ae1","title":"Create Movement Using CSS Animation","videoUrl":"'https://scrimba.com/c/c7amZfW'","content":"\nWhen elements have a specified <code>position</code>, such as <code>fixed</code> or <code>relative</code>, the CSS offset properties <code>right</code>, <code>left</code>, <code>top</code>, and <code>bottom</code> can be used in animation rules to create movement.\nAs shown in the example below, you can push the item downwards then upwards by setting the <code>top</code> property of the <code>50%</code> keyframe to 50px, but having it set to 0px for the first (<code>0%</code>) and the last (<code>100%</code>) keyframe.\n<blockquote>@keyframes rainbow {<br>&nbsp;&nbsp;0% {<br>&nbsp;&nbsp;&nbsp;&nbsp;background-color: blue;<br>&nbsp;&nbsp;&nbsp;&nbsp;top: 0px;<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;50% {<br>&nbsp;&nbsp;&nbsp;&nbsp;background-color: green;<br>&nbsp;&nbsp;&nbsp;&nbsp;top: 50px;<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;100% {<br>&nbsp;&nbsp;&nbsp;&nbsp;background-color: yellow;<br>&nbsp;&nbsp;&nbsp;&nbsp;top: 0px;<br>&nbsp;&nbsp;}<br>}</blockquote>\n"},
"587d78a5367417b2b2512ad8" : {"id":"587d78a5367417b2b2512ad8","title":"Create Texture by Adding a Subtle Pattern as a Background Image","videoUrl":"'https://scrimba.com/c/cQdwJC8'","content":"\nOne way to add texture and interest to a background and have it stand out more is to add a subtle pattern. The key is balance, as you don't want the background to stand out too much, and take away from the foreground. The <code>background</code> property supports the <code>url()</code> function in order to link to an image of the chosen texture or pattern. The link address is wrapped in quotes inside the parentheses.\n"},
"587d7791367417b2b2512ab3" : {"id":"587d7791367417b2b2512ab3","title":"Create Visual Balance Using the text-align Property","videoUrl":"'https://scrimba.com/c/c3b4EAp'","content":"\nThis section of the curriculum focuses on Applied Visual Design. The first group of challenges build on the given card layout to show a number of core principles.\nText is often a large part of web content. CSS has several options for how to align it with the <code>text-align</code> property.\n<code>text-align: justify;</code> causes all lines of text except the last line to meet the left and right edges of the line box.\n<code>text-align: center;</code> centers the text\n<code>text-align: right;</code> right-aligns the text\nAnd <code>text-align: left;</code> (the default) left-aligns the text.\n"},
"587d78a7367417b2b2512ae2" : {"id":"587d78a7367417b2b2512ae2","title":"Create Visual Direction by Fading an Element from Left to Right","videoUrl":"'https://scrimba.com/c/cGJqqAE'","content":"\nFor this challenge, you'll change the <code>opacity</code> of an animated element so it gradually fades as it reaches the right side of the screen.\nIn the displayed animation, the round element with the gradient background moves to the right by the 50% mark of the animation per the <code>@keyframes</code> rule.\n"},
"587d781c367417b2b2512abf" : {"id":"587d781c367417b2b2512abf","title":"Decrease the Opacity of an Element","videoUrl":"'https://scrimba.com/c/c7aKqu4'","content":"\nThe <code>opacity</code> property in CSS is used to adjust the opacity, or conversely, the transparency for an item.\n<blockquote>A value of 1 is opaque, which isn't transparent at all.<br>A value of 0.5 is half see-through.<br>A value of 0 is completely transparent.</blockquote>\nThe value given will apply to the entire element, whether that's an image with some transparency, or the foreground and background colors for a block of text.\n"},
"587d78a3367417b2b2512ad1" : {"id":"587d78a3367417b2b2512ad1","title":"Learn about Complementary Colors","videoUrl":"'https://scrimba.com/c/c2MD3Tr'","content":"\nColor theory and its impact on design is a deep topic and only the basics are covered in the following challenges. On a website, color can draw attention to content, evoke emotions, or create visual harmony. Using different combinations of colors can really change the look of a website, and a lot of thought can go into picking a color palette that works with your content.\nThe color wheel is a useful tool to visualize how colors relate to each other - it's a circle where similar hues are neighbors and different hues are farther apart. When two colors are opposite each other on the wheel, they are called complementary colors. They have the characteristic that if they are combined, they \"cancel\" each other out and create a gray color. However, when placed side-by-side, these colors appear more vibrant and produce a strong visual contrast.\nSome examples of complementary colors with their hex codes are:\n<blockquote>red (#FF0000) and cyan (#00FFFF)<br>green (#00FF00) and magenta (#FF00FF)<br>blue (#0000FF) and yellow (#FFFF00)</blockquote>\nThis is different than the outdated RYB color model that many of us were taught in school, which has different primary and complementary colors. Modern color theory uses the additive RGB model (like on a computer screen) and the subtractive CMY(K) model (like in printing). Read <a href='https://en.wikipedia.org/wiki/Color_model' target='_blank'>here</a> for more information on this complex subject.\nThere are many color picking tools available online that have an option to find the complement of a color.\n<strong>Note</strong><br>For all color challenges: Using color can be a powerful way to add visual interest to a page. However, color alone should not be used as the only way to convey important information because users with visual impairments may not understand that content. This issue will be covered in more detail in the Applied Accessibility challenges.\n"},
"587d78a4367417b2b2512ad2" : {"id":"587d78a4367417b2b2512ad2","title":"Learn about Tertiary Colors","videoUrl":"'https://scrimba.com/c/c3bRDAb'","content":"\nComputer monitors and device screens create different colors by combining amounts of red, green, and blue light. This is known as the RGB additive color model in modern color theory. Red (R), green (G), and blue (B) are called primary colors. Mixing two primary colors creates the secondary colors cyan (G + B), magenta (R + B) and yellow (R + G). You saw these colors in the Complementary Colors challenge. These secondary colors happen to be the complement to the primary color not used in their creation, and are opposite to that primary color on the color wheel. For example, magenta is made with red and blue, and is the complement to green.\nTertiary colors are the result of combining a primary color with one of its secondary color neighbors. For example, within the RGB color model, red (primary) and yellow (secondary) make orange (tertiary). This adds six more colors to a simple color wheel for a total of twelve.\nThere are various methods of selecting different colors that result in a harmonious combination in design. One example that can use tertiary colors is called the split-complementary color scheme. This scheme starts with a base color, then pairs it with the two colors that are adjacent to its complement. The three colors provide strong visual contrast in a design, but are more subtle than using two complementary colors.\nHere are three colors created using the split-complement scheme:\n<table class=\"table table-striped\"><thead><tr><th>Color</th><th>Hex Code</th></tr><thead><tbody><tr><td>orange</td><td>#FF7D00</td></tr><tr><td>cyan</td><td>#00FFFF</td></tr><tr><td>raspberry</td><td>#FF007D</td></tr></tbody></table>\n"},
"587d78a9367417b2b2512ae8" : {"id":"587d78a9367417b2b2512ae8","title":"Learn How Bezier Curves Work","videoUrl":"'https://scrimba.com/c/c9bDrs8'","content":"\nThe last challenge introduced the <code>animation-timing-function</code> property and a few keywords that change the speed of an animation over its duration. CSS offers an option other than keywords that provides even finer control over how the animation plays out, through the use of Bezier curves.\nIn CSS animations, Bezier curves are used with the <code>cubic-bezier</code> function. The shape of the curve represents how the animation plays out. The curve lives on a 1 by 1 coordinate system. The X-axis of this coordinate system is the duration of the animation (think of it as a time scale), and the Y-axis is the change in the animation.\nThe <code>cubic-bezier</code> function consists of four main points that sit on this 1 by 1 grid: <code>p0</code>, <code>p1</code>, <code>p2</code>, and <code>p3</code>. <code>p0</code> and <code>p3</code> are set for you - they are the beginning and end points which are always located respectively at the origin (0, 0) and (1, 1). You set the x and y values for the other two points, and where you place them in the grid dictates the shape of the curve for the animation to follow. This is done in CSS by declaring the x and y values of the <code>p1</code> and <code>p2</code> \"anchor\" points in the form: <code>(x1, y1, x2, y2)</code>. Pulling it all together, here's an example of a Bezier curve in CSS code:\n<code>animation-timing-function: cubic-bezier(0.25, 0.25, 0.75, 0.75);</code>\nIn the example above, the x and y values are equivalent for each point (x1 = 0.25 = y1 and x2 = 0.75 = y2), which if you remember from geometry class, results in a line that extends from the origin to point (1, 1). This animation is a linear change of an element during the length of an animation, and is the same as using the <code>linear</code> keyword. In other words, it changes at a constant speed.\n"},
"587d78a7367417b2b2512adf" : {"id":"587d78a7367417b2b2512adf","title":"Learn How the CSS @keyframes and animation Properties Work","videoUrl":"'https://scrimba.com/c/cakprhv'","content":"\nTo animate an element, you need to know about the animation properties and the <code>@keyframes</code> rule. The animation properties control how the animation should behave and the <code>@keyframes</code> rule controls what happens during that animation. There are eight animation properties in total. This challenge will keep it simple and cover the two most important ones first:\n<code>animation-name</code> sets the name of the animation, which is later used by <code>@keyframes</code> to tell CSS which rules go with which animations.\n<code>animation-duration</code> sets the length of time for the animation.\n<code>@keyframes</code> is how to specify exactly what happens within the animation over the duration. This is done by giving CSS properties for specific \"frames\" during the animation, with percentages ranging from 0% to 100%. If you compare this to a movie, the CSS properties for 0% is how the element displays in the opening scene. The CSS properties for 100% is how the element appears at the end, right before the credits roll. Then CSS applies the magic to transition the element over the given duration to act out the scene. Here's an example to illustrate the usage of <code>@keyframes</code> and the animation properties:\n<blockquote>#anim {<br>&nbsp;&nbsp;animation-name: colorful;<br>&nbsp;&nbsp;animation-duration: 3s;<br>}<br>@keyframes colorful {<br>&nbsp;&nbsp;0% {<br>&nbsp;&nbsp;&nbsp;&nbsp;background-color: blue;<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;100% {<br>&nbsp;&nbsp;&nbsp;&nbsp;background-color: yellow;<br>&nbsp;&nbsp;}<br>}</blockquote>\nFor the element with the <code>anim</code> id, the code snippet above sets the <code>animation-name</code> to <code>colorful</code> and sets the <code>animation-duration</code> to 3 seconds. Then the <code>@keyframes</code> rule links to the animation properties with the name <code>colorful</code>. It sets the color to blue at the beginning of the animation (0%) which will transition to yellow by the end of the animation (100%). You aren't limited to only beginning-end transitions, you can set properties for the element for any percentage between 0% and 100%.\n"},
"587d781e367417b2b2512acb" : {"id":"587d781e367417b2b2512acb","title":"Lock an Element to its Parent with Absolute Positioning","videoUrl":"'https://scrimba.com/c/cyLJ7c3'","content":"\nThe next option for the CSS <code>position</code> property is <code>absolute</code>, which locks the element in place relative to its parent container. Unlike the <code>relative</code> position, this removes the element from the normal flow of the document, so surrounding items ignore it. The CSS offset properties (top or bottom and left or right) are used to adjust the position.\nOne nuance with absolute positioning is that it will be locked relative to its closest <em>positioned</em> ancestor. If you forget to add a position rule to the parent item, (this is typically done using <code>position: relative;</code>), the browser will keep looking up the chain and ultimately default to the body tag.\n"},
"587d781e367417b2b2512acc" : {"id":"587d781e367417b2b2512acc","title":"Lock an Element to the Browser Window with Fixed Positioning","videoUrl":"'https://scrimba.com/c/c2MDNUR'","content":"\nThe next layout scheme that CSS offers is the <code>fixed</code> position, which is a type of absolute positioning that locks an element relative to the browser window. Similar to absolute positioning, it's used with the CSS offset properties and also removes the element from the normal flow of the document. Other items no longer \"realize\" where it is positioned, which may require some layout adjustments elsewhere.\nOne key difference between the <code>fixed</code> and <code>absolute</code> positions is that an element with a fixed position won't move when the user scrolls.\n"},
"587d78a8367417b2b2512ae4" : {"id":"587d78a8367417b2b2512ae4","title":"Make a CSS Heartbeat using an Infinite Animation Count","videoUrl":"'https://scrimba.com/c/cDZpDUr'","content":"\nHere's one more continuous animation example with the <code>animation-iteration-count</code> property that uses the heart you designed in a previous challenge.\nThe one-second long heartbeat animation consists of two animated pieces. The <code>heart</code> elements (including the <code>:before</code> and <code>:after</code> pieces) are animated to change size using the <code>transform</code> property, and the background <code>div</code> is animated to change its color using the <code>background</code> property.\n"},
"587d78a9367417b2b2512aea" : {"id":"587d78a9367417b2b2512aea","title":"Make Motion More Natural Using a Bezier Curve","videoUrl":"'https://scrimba.com/c/c7akWUv'","content":"\nThis challenge animates an element to replicate the movement of a ball being juggled. Prior challenges covered the <code>linear</code> and <code>ease-out</code> cubic Bezier curves, however neither depicts the juggling movement accurately. You need to customize a Bezier curve for this.\nThe <code>animation-timing-function</code> automatically loops at every keyframe when the <code>animation-iteration-count</code> is set to infinite. Since there is a keyframe rule set in the middle of the animation duration (at <code>50%</code>), it results in two identical animation progressions at the upward and downward movement of the ball.\nThe following cubic Bezier curve simulates a juggling movement:\n<code>cubic-bezier(0.3, 0.4, 0.5, 1.6); </code>\nNotice that the value of y2 is larger than 1. Although the cubic Bezier curve is mapped on an 1 by 1 coordinate system, and it can only accept x values from 0 to 1, the y value can be set to numbers larger than one. This results in a bouncing movement that is ideal for simulating the juggling ball.\n"},
"58a7a6ebf9a6318348e2d5aa" : {"id":"58a7a6ebf9a6318348e2d5aa","title":"Modify Fill Mode of an Animation","videoUrl":"'https://scrimba.com/c/cVJDmcE'","content":"\nThat's great, but it doesn't work right yet. Notice how the animation resets after <code>500ms</code> has passed, causing the button to revert back to the original color. You want the button to stay highlighted.\nThis can be done by setting the <code>animation-fill-mode</code> property to <code>forwards</code>. The <code>animation-fill-mode</code> specifies the style applied to an element when the animation has finished. You can set it like so:\n<code>animation-fill-mode: forwards;</code>\n"},
"587d781e367417b2b2512aca" : {"id":"587d781e367417b2b2512aca","title":"Move a Relatively Positioned Element with CSS Offsets","videoUrl":"'https://scrimba.com/c/c9bQEA4'","content":"\nThe CSS offsets of <code>top</code> or <code>bottom</code>, and <code>left</code> or <code>right</code> tell the browser how far to offset an item relative to where it would sit in the normal flow of the document. You're offsetting an element away from a given spot, which moves the element away from the referenced side (effectively, the opposite direction). As you saw in the last challenge, using the top offset moved the <code>h2</code> downwards. Likewise, using a left offset moves an item to the right.\n<img src='https://i.imgur.com/eWWi3gZ.gif' alt='' />\n"},
"587d78a3367417b2b2512ace" : {"id":"587d78a3367417b2b2512ace","title":"Push Elements Left or Right with the float Property","videoUrl":"'https://scrimba.com/c/c2MDqu2'","content":"\nThe next positioning tool does not actually use <code>position</code>, but sets the <code>float</code> property of an element. Floating elements are removed from the normal flow of a document and pushed to either the <code>left</code> or <code>right</code> of their containing parent element. It's commonly used with the <code>width</code> property to specify how much horizontal space the floated element requires.\n"},
"587d781c367417b2b2512ac2" : {"id":"587d781c367417b2b2512ac2","title":"Set the font-size for Multiple Heading Elements","videoUrl":"'https://scrimba.com/c/cPpQNT3'","content":"\nThe <code>font-size</code> property is used to specify how large the text is in a given element. This rule can be used for multiple elements to create visual consistency of text on a page. In this challenge, you'll set the values for all <code>h1</code> through <code>h6</code> tags to balance the heading sizes.\n"},
"587d781c367417b2b2512ac4" : {"id":"587d781c367417b2b2512ac4","title":"Set the font-size of Paragraph Text","videoUrl":"'https://scrimba.com/c/cVJ36Cr'","content":"\nThe <code>font-size</code> property in CSS is not limited to headings, it can be applied to any element containing text.\n"},
"587d781c367417b2b2512ac3" : {"id":"587d781c367417b2b2512ac3","title":"Set the font-weight for Multiple Heading Elements","videoUrl":"'https://scrimba.com/c/crVWRHq'","content":"\nYou set the <code>font-size</code> of each heading tag in the last challenge, here you'll adjust the <code>font-weight</code>.\nThe <code>font-weight</code> property sets how thick or thin characters are in a section of text.\n"},
"587d781d367417b2b2512ac5" : {"id":"587d781d367417b2b2512ac5","title":"Set the line-height of Paragraphs","videoUrl":"'https://scrimba.com/c/crVWdcv'","content":"\nCSS offers the <code>line-height</code> property to change the height of each line in a block of text. As the name suggests, it changes the amount of vertical space that each line of text gets.\n"},
"587d78a9367417b2b2512ae9" : {"id":"587d78a9367417b2b2512ae9","title":"Use a Bezier Curve to Move a Graphic","videoUrl":"'https://scrimba.com/c/c6bnRCK'","content":"\nA previous challenge discussed the <code>ease-out</code> keyword that describes an animation change that speeds up first and then slows down at the end of the animation. On the right, the difference between the <code>ease-out</code> keyword (for the blue element) and <code>linear</code> keyword (for the red element) is demonstrated. Similar animation progressions to the <code>ease-out</code> keyword can be achieved by using a custom cubic Bezier curve function.\nIn general, changing the <code>p1</code> and <code>p2</code> anchor points drives the creation of different Bezier curves, which controls how the animation progresses through time. Here's an example of a Bezier curve using values to mimic the ease-out style:\n<code>animation-timing-function: cubic-bezier(0, 0, 0.58, 1);</code>\nRemember that all <code>cubic-bezier</code> functions start with <code>p0</code> at (0, 0) and end with <code>p3</code> at (1, 1). In this example, the curve moves faster through the Y-axis (starts at 0, goes to <code>p1</code> y value of 0, then goes to <code>p2</code> y value of 1) than it moves through the X-axis (0 to start, then 0 for <code>p1</code>, up to 0.58 for <code>p2</code>). As a result, the change in the animated element progresses faster than the time of the animation for that segment. Towards the end of the curve, the relationship between the change in x and y values reverses - the y value moves from 1 to 1 (no change), and the x values move from 0.58 to 1, making the animation changes progress slower compared to the animation duration.\n"},
"587d78a5367417b2b2512ad7" : {"id":"587d78a5367417b2b2512ad7","title":"Use a CSS Linear Gradient to Create a Striped Element","videoUrl":"'https://scrimba.com/c/c6bmQh2'","content":"\nThe <code>repeating-linear-gradient()</code> function is very similar to <code>linear-gradient()</code> with the major difference that it repeats the specified gradient pattern. <code>repeating-linear-gradient()</code> accepts a variety of values, but for simplicity, you'll work with an angle value and color stop values in this challenge.\nThe angle value is the direction of the gradient. Color stops are like width values that mark where a transition takes place, and are given with a percentage or a number of pixels.\nIn the example demonstrated in the code editor, the gradient starts with the color <code>yellow</code> at 0 pixels which blends into the second color <code>blue</code> at 40 pixels away from the start. Since the next color stop is also at 40 pixels, the gradient immediately changes to the third color <code>green</code>, which itself blends into the fourth color value <code>red</code> as that is 80 pixels away from the beginning of the gradient.\nFor this example, it helps to think about the color stops as pairs where every two colors blend together.\n<code>0px [yellow -- blend -- blue] 40px [green -- blend -- red] 80px</code>\nIf every two color stop values are the same color, the blending isn't noticeable because it's between the same color, followed by a hard transition to the next color, so you end up with stripes.\n"},
"587d78a7367417b2b2512ae0" : {"id":"587d78a7367417b2b2512ae0","title":"Use CSS Animation to Change the Hover State of a Button","videoUrl":"'https://scrimba.com/c/cg4vZAa'","content":"\nYou can use CSS <code>@keyframes</code> to change the color of a button in its hover state.\nHere's an example of changing the width of an image on hover:\n<blockquote>&lt;style&gt;<br>&nbsp;&nbsp;img:hover {<br>&nbsp;&nbsp;&nbsp;&nbsp;animation-name: width;<br>&nbsp;&nbsp;&nbsp;&nbsp;animation-duration: 500ms;<br>&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;@keyframes width {<br>&nbsp;&nbsp;&nbsp;&nbsp;100% {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width: 40px;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;}<br>&lt;/style&gt;<br><br>&lt;img src=&quot;https://bit.ly/smallgooglelogo&quot; alt=&quot;Google's Logo&quot; /&gt;</blockquote>\n"},
"587d78a6367417b2b2512adb" : {"id":"587d78a6367417b2b2512adb","title":"Use the CSS Transform Property skewX to Skew an Element Along the X-Axis","videoUrl":"'https://scrimba.com/c/cyLP8Sr'","content":"\nThe next function of the <code>transform</code> property is <code>skewX()</code>, which skews the selected element along its X (horizontal) axis by a given degree.\nThe following code skews the paragraph element by -32 degrees along the X-axis.\n<blockquote>p {<br>&nbsp;&nbsp;transform: skewX(-32deg);<br>}</blockquote>\n"},
"587d78a6367417b2b2512adc" : {"id":"587d78a6367417b2b2512adc","title":"Use the CSS Transform Property skewY to Skew an Element Along the Y-Axis","videoUrl":"'https://scrimba.com/c/c2MZ2uB'","content":"\nGiven that the <code>skewX()</code> function skews the selected element along the X-axis by a given degree, it is no surprise that the <code>skewY()</code> property skews an element along the Y (vertical) axis.\n"},
"587d78a5367417b2b2512ad9" : {"id":"587d78a5367417b2b2512ad9","title":"Use the CSS Transform scale Property to Change the Size of an Element","videoUrl":"'https://scrimba.com/c/c2MZVSg'","content":"\nTo change the scale of an element, CSS has the <code>transform</code> property, along with its <code>scale()</code> function. The following code example doubles the size of all the paragraph elements on the page:\n<blockquote>p {<br>&nbsp;&nbsp;transform: scale(2);<br>}</blockquote>\n"},
"587d78a5367417b2b2512ada" : {"id":"587d78a5367417b2b2512ada","title":"Use the CSS Transform scale Property to Scale an Element on Hover","videoUrl":"'https://scrimba.com/c/cyLPJuM'","content":"\nThe <code>transform</code> property has a variety of functions that lets you scale, move, rotate, skew, etc., your elements. When used with pseudo-classes such as <code>:hover</code> that specify a certain state of an element, the <code>transform</code> property can easily add interactivity to your elements.\nHere's an example to scale the paragraph elements to 2.1 times their original size when a user hovers over them:\n<blockquote>p:hover {<br>&nbsp;&nbsp;transform: scale(2.1);<br>}</blockquote>\n"},
"587d781a367417b2b2512ab9" : {"id":"587d781a367417b2b2512ab9","title":"Use the em Tag to Italicize Text","videoUrl":"'https://scrimba.com/c/cVJRBtp'","content":"\nTo emphasize text, you can use the <code>em</code> tag. This displays text as italicized, as the browser applies the CSS of <code>font-style: italic;</code> to the element.\n"},
"587d781b367417b2b2512aba" : {"id":"587d781b367417b2b2512aba","title":"Use the s Tag to Strikethrough Text","videoUrl":"''","content":"\nTo strikethrough text, which is when a horizontal line cuts across the characters, you can use the <code>s</code> tag. It shows that a section of text is no longer valid. With the <code>s</code> tag, the browser applies the CSS of <code>text-decoration: line-through;</code> to the element.\n"},
"587d781a367417b2b2512ab7" : {"id":"587d781a367417b2b2512ab7","title":"Use the strong Tag to Make Text Bold","videoUrl":"'https://scrimba.com/c/ceJNBSb'","content":"\nTo make text bold, you can use the <code>strong</code> tag. This is often used to draw attention to text and symbolize that it is important. With the <code>strong</code> tag, the browser applies the CSS of <code>font-weight: bold;</code> to the element.\n"},
"587d781c367417b2b2512ac0" : {"id":"587d781c367417b2b2512ac0","title":"Use the text-transform Property to Make Text Uppercase","videoUrl":"'https://scrimba.com/c/cvVZQSP'","content":"\nThe <code>text-transform</code> property in CSS is used to change the appearance of text. It's a convenient way to make sure text on a webpage appears consistently, without having to change the text content of the actual HTML elements.\nThe following table shows how the different <code>text-transform</code>values change the example text \"Transform me\".\n<table class=\"table table-striped\"><thead><th>Value<th>Result<tbody><tr><td><code>lowercase</code><td>\"transform me\"<tr><td><code>uppercase</code><td>\"TRANSFORM ME\"<tr><td><code>capitalize</code><td>\"Transform Me\"<tr><td><code>initial</code><td>Use the default value<tr><td><code>inherit</code><td>Use the <code>text-transform</code> value from the parent element<tr><td><code>none</code><td><strong>Default:</strong> Use the original text</td></table>\n"},
"587d781a367417b2b2512ab8" : {"id":"587d781a367417b2b2512ab8","title":"Use the u Tag to Underline Text","videoUrl":"'https://scrimba.com/c/cN6aQCL'","content":"\nTo underline text, you can use the <code>u</code> tag. This is often used to signify that a section of text is important, or something to remember. With the <code>u</code> tag, the browser applies the CSS of <code>text-decoration: underline;</code> to the element.\n"},
"bad87fee1348bd9aedf08823" : {"id":"bad87fee1348bd9aedf08823","title":"Add a Negative Margin to an Element","videoUrl":"'https://scrimba.com/c/cnpyGs3'","content":"\nAn element's <code>margin</code> controls the amount of space between an element's <code>border</code> and surrounding elements.\nIf you set an element's <code>margin</code> to a negative value, the element will grow larger.\n"},
"bad87fee1348bd9bedf08813" : {"id":"bad87fee1348bd9bedf08813","title":"Add Borders Around Your Elements","videoUrl":"'https://scrimba.com/c/c2MvnHZ'","content":"\nCSS borders have properties like <code>style</code>, <code>color</code> and <code>width</code>.\nFor example, if we wanted to create a red, 5 pixel border around an HTML element, we could use this class:\n<blockquote>&#60;style&#62;<br>&nbsp;&nbsp;.thin-red-border {<br>&nbsp;&nbsp;&nbsp;&nbsp;border-color: red;<br>&nbsp;&nbsp;&nbsp;&nbsp;border-width: 5px;<br>&nbsp;&nbsp;&nbsp;&nbsp;border-style: solid;<br>&nbsp;&nbsp;}<br>&#60;/style&#62;</blockquote>\n"},
"bad87fee1248bd9aedf08824" : {"id":"bad87fee1248bd9aedf08824","title":"Add Different Margins to Each Side of an Element","videoUrl":"'https://scrimba.com/c/cg4RWh4'","content":"\nSometimes you will want to customize an element so that it has a different <code>margin</code> on each of its sides.\nCSS allows you to control the <code>margin</code> of all four individual sides of an element with the <code>margin-top</code>, <code>margin-right</code>, <code>margin-bottom</code>, and <code>margin-left</code> properties.\n"},
"bad87fee1348bd9aedf08824" : {"id":"bad87fee1348bd9aedf08824","title":"Add Different Padding to Each Side of an Element","videoUrl":"'https://scrimba.com/c/cB7mwUw'","content":"\nSometimes you will want to customize an element so that it has different amounts of <code>padding</code> on each of its sides.\nCSS allows you to control the <code>padding</code> of all four individual sides of an element with the <code>padding-top</code>, <code>padding-right</code>, <code>padding-bottom</code>, and <code>padding-left</code> properties.\n"},
"bad87fee1348bd9aedf08814" : {"id":"bad87fee1348bd9aedf08814","title":"Add Rounded Corners with border-radius","videoUrl":"'https://scrimba.com/c/cbZm2hg'","content":"\nYour cat photo currently has sharp corners. We can round out those corners with a CSS property called <code>border-radius</code>.\n"},
"bad87fee1348bd9aedf08822" : {"id":"bad87fee1348bd9aedf08822","title":"Adjust the Margin of an Element","videoUrl":"'https://scrimba.com/c/cVJarHW'","content":"\nAn element's <code>margin</code> controls the amount of space between an element's <code>border</code> and surrounding elements.\nHere, we can see that the blue box and the red box are nested within the yellow box. Note that the red box has a bigger <code>margin</code> than the blue box, making it appear smaller.\nWhen you increase the blue box's <code>margin</code>, it will increase the distance between its border and surrounding elements.\n"},
"bad88fee1348bd9aedf08825" : {"id":"bad88fee1348bd9aedf08825","title":"Adjust the Padding of an Element","videoUrl":"'https://scrimba.com/c/cED8ZC2'","content":"\nNow let's put our Cat Photo App away for a little while and learn more about styling HTML.\nYou may have already noticed this, but all HTML elements are essentially little rectangles.\nThree important properties control the space that surrounds each HTML element: <code>padding</code>, <code>margin</code>, and <code>border</code>.\nAn element's <code>padding</code> controls the amount of space between the element's content and its <code>border</code>.\nHere, we can see that the blue box and the red box are nested within the yellow box. Note that the red box has more <code>padding</code> than the blue box.\nWhen you increase the blue box's <code>padding</code>, it will increase the distance (<code>padding</code>) between the text and the border around it.\n"},
"5a9d7286424fe3d0e10cad13" : {"id":"5a9d7286424fe3d0e10cad13","title":"Attach a Fallback value to a CSS Variable","videoUrl":"'https://scrimba.com/c/c6bDNfp'","content":"\nWhen using your variable as a CSS property value, you can attach a fallback value that your browser will revert to if the given variable is invalid.\n<strong>Note:</strong> This fallback is not used to increase browser compatibility, and it will not work on IE browsers. Rather, it is used so that the browser has a color to display if it cannot find your variable.\nHere's how you do it:\n<blockquote>background: var(--penguin-skin, black);</blockquote>\nThis will set background to black if your variable wasn't set.\nNote that this can be useful for debugging.\n"},
"5a9d7295424fe3d0e10cad14" : {"id":"5a9d7295424fe3d0e10cad14","title":"Cascading CSS variables","videoUrl":"'https://scrimba.com/c/cyLZZhZ'","content":"\nWhen you create a variable, it becomes available for you to use inside the element in which you create it. It also becomes available within any elements nested within it. This effect is known as <dfn>cascading</dfn>.\nBecause of cascading, CSS variables are often defined in the <dfn>:root</dfn> element.\n<code>:root</code> is a <dfn>pseudo-class</dfn> selector that matches the root element of the document, usually the <code><html></code> element. By creating your variables in <code>:root</code>, they will be available globally and can be accessed from any other selector later in the style sheet.\n"},
"5a9d72a1424fe3d0e10cad15" : {"id":"5a9d72a1424fe3d0e10cad15","title":"Change a variable for a specific area","videoUrl":"'https://scrimba.com/c/cdRwbuW'","content":"\nWhen you create your variables in <code>:root</code> they will set the value of that variable for the whole page.\nYou can then over-write these variables by setting them again within a specific element.\n"},
"bad87fee1348bd9aedf08803" : {"id":"bad87fee1348bd9aedf08803","title":"Change the Color of Text","videoUrl":"'https://scrimba.com/c/cRkVmSm'","content":"\nNow let's change the color of some of our text.\nWe can do this by changing the <code>style</code> of your <code>h2</code> element.\nThe property that is responsible for the color of an element's text is the <code>color</code> style property.\nHere's how you would set your <code>h2</code> element's text color to blue:\n<code>&#60;h2 style=\"color: blue;\"&#62;CatPhotoApp&#60;/h2&#62;</code>\nNote that it is a good practice to end inline <code>style</code> declarations with a <code>;</code> .\n"},
"bad87fee1348bd9aedf08806" : {"id":"bad87fee1348bd9aedf08806","title":"Change the Font Size of an Element","videoUrl":"'https://scrimba.com/c/c3bvDc8'","content":"\nFont size is controlled by the <code>font-size</code> CSS property, like this:\n<blockquote>h1 {<br>&nbsp;&nbsp;font-size: 30px;<br>}</blockquote>\n"},
"5a9d726c424fe3d0e10cad11" : {"id":"5a9d726c424fe3d0e10cad11","title":"Create a custom CSS Variable","videoUrl":"'https://scrimba.com/c/cQd27Hr'","content":"\nTo create a CSS Variable, you just need to give it a <code>name</code> with <code>two dashes</code> in front of it and assign it a <code>value</code> like this:\n<blockquote>--penguin-skin: gray;</blockquote>\nThis will create a variable named <code>--penguin-skin</code> and assign it the value of <code>gray</code>.\nNow you can use that variable elsewhere in your CSS to change the value of other elements to gray.\n"},
"bad87fed1348bd9aede07836" : {"id":"bad87fed1348bd9aede07836","title":"Give a Background Color to a div Element","videoUrl":"'https://scrimba.com/c/cdRKMCk'","content":"\nYou can set an element's background color with the <code>background-color</code> property.\nFor example, if you wanted an element's background color to be <code>green</code>, you'd put this within your <code>style</code> element:\n<blockquote>.green-background {<br>&nbsp;&nbsp;background-color: green;<br>}</blockquote>\n"},
"bad87fee1348bd9aedf08807" : {"id":"bad87fee1348bd9aedf08807","title":"Import a Google Font","videoUrl":"'https://scrimba.com/c/cM9MRsJ'","content":"\nIn addition to specifying common fonts that are found on most operating systems, we can also specify non-standard, custom web fonts for use on our website. There are various sources for web fonts on the internet but, for this example we will focus on the Google Fonts library.\n<a href='https://fonts.google.com/' target='_blank'>Google Fonts</a> is a free library of web fonts that you can use in your CSS by referencing the font's URL.\nSo, let's go ahead and import and apply a Google font (note that if Google is blocked in your country, you will need to skip this challenge).\nTo import a Google Font, you can copy the font(s) URL from the Google Fonts library and then paste it in your HTML. For this challenge, we'll import the <code>Lobster</code> font. To do this, copy the following code snippet and paste it into the top of your code editor (before the opening <code>style</code> element):\n<code>&#60;link href=\"https://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\"&#62;</code>\nNow you can use the <code>Lobster</code> font in your CSS by using <code>Lobster</code> as the FAMILY_NAME as in the following example:<br><code>font-family: FAMILY_NAME, GENERIC_NAME;</code>.\nThe GENERIC_NAME is optional, and is a fallback font in case the other specified font is not available. This is covered in the next challenge.\nFamily names are case-sensitive and need to be wrapped in quotes if there is a space in the name. For example, you need quotes to use the <code>\"Open Sans\"</code> font, but not to use the <code>Lobster</code> font.\n"},
"5b7d72c338cd7e35b63f3e14" : {"id":"5b7d72c338cd7e35b63f3e14","title":"Improve Compatibility with Browser Fallbacks","videoUrl":"''","content":"\nWhen working with CSS you will likely run into browser compatibility issues at some point. This is why it's important to provide browser fallbacks to avoid potential problems.\nWhen your browser parses the CSS of a webpage, it ignores any properties that it doesn't recognize or support. For example, if you use a CSS variable to assign a background color on a site, Internet Explorer will ignore the background color because it does not support CSS variables. In that case, the browser will use whatever value it has for that property. If it can't find any other value set for that property, it will revert to the default value, which is typically not ideal.\nThis means that if you do want to provide a browser fallback, it's as easy as providing another more widely supported value immediately before your declaration. That way an older browser will have something to fall back on, while a newer browser will just interpret whatever declaration comes later in the cascade.\n"},
"bad87fee1348bd9aedf08746" : {"id":"bad87fee1348bd9aedf08746","title":"Inherit Styles from the Body Element","videoUrl":"'https://scrimba.com/c/c9bmdtR'","content":"\nNow we've proven that every HTML page has a <code>body</code> element, and that its <code>body</code> element can also be styled with CSS.\nRemember, you can style your <code>body</code> element just like any other HTML element, and all your other elements will inherit your <code>body</code> element's styles.\n"},
"bad87fee1348bd9aedf08815" : {"id":"bad87fee1348bd9aedf08815","title":"Make Circular Images with a border-radius","videoUrl":"'https://scrimba.com/c/c2MvrcB'","content":"\nIn addition to pixels, you can also specify the <code>border-radius</code> using a percentage.\n"},
"bad87fee1348bd9aedf07756" : {"id":"bad87fee1348bd9aedf07756","title":"Override All Other Styles by using Important","videoUrl":"'https://scrimba.com/c/cm24rcp'","content":"\nYay! We just proved that inline styles will override all the CSS declarations in your <code>style</code> element.\nBut wait. There's one last way to override CSS. This is the most powerful method of all. But before we do it, let's talk about why you would ever want to override CSS.\nIn many situations, you will use CSS libraries. These may accidentally override your own CSS. So when you absolutely need to be sure that an element has specific CSS, you can use <code>!important</code>\nLet's go all the way back to our <code>pink-text</code> class declaration. Remember that our <code>pink-text</code> class was overridden by subsequent class declarations, id declarations, and inline styles.\n"},
"bad87fee1348bd8aedf06756" : {"id":"bad87fee1348bd8aedf06756","title":"Override Class Declarations by Styling ID Attributes","videoUrl":"'https://scrimba.com/c/cRkpDhB'","content":"\nWe just proved that browsers read CSS from top to bottom in order of their declaration. That means that, in the event of a conflict, the browser will use whichever CSS declaration came last. Notice that if we even had put <code>blue-text</code> before <code>pink-text</code> in our <code>h1</code> element's classes, it would still look at the declaration order and not the order of their use!\nBut we're not done yet. There are other ways that you can override CSS. Do you remember id attributes?\nLet's override your <code>pink-text</code> and <code>blue-text</code> classes, and make your <code>h1</code> element orange, by giving the <code>h1</code> element an id and then styling that id.\n"},
"bad87fee1348bd9aedf06756" : {"id":"bad87fee1348bd9aedf06756","title":"Override Class Declarations with Inline Styles","videoUrl":"'https://scrimba.com/c/cGJDRha'","content":"\nSo we've proven that id declarations override class declarations, regardless of where they are declared in your <code>style</code> element CSS.\nThere are other ways that you can override CSS. Do you remember inline styles?\n"},
"bad87fee1348bd9aedf04756" : {"id":"bad87fee1348bd9aedf04756","title":"Override Styles in Subsequent CSS","videoUrl":"'https://scrimba.com/c/cGJDQug'","content":"\nOur \"pink-text\" class overrode our <code>body</code> element's CSS declaration!\nWe just proved that our classes will override the <code>body</code> element's CSS. So the next logical question is, what can we do to override our <code>pink-text</code> class?\n"},
"bad87fee1348bd9aedf08756" : {"id":"bad87fee1348bd9aedf08756","title":"Prioritize One Style Over Another","videoUrl":"'https://scrimba.com/c/cZ8wnHv'","content":"\nSometimes your HTML elements will receive multiple styles that conflict with one another.\nFor example, your <code>h1</code> element can't be both green and pink at the same time.\nLet's see what happens when we create a class that makes text pink, then apply it to an element. Will our class <em>override</em> the <code>body</code> element's <code>color: green;</code> CSS property?\n"},
"bad87fee1348bd9aede08807" : {"id":"bad87fee1348bd9aede08807","title":"Set the Font Family of an Element","videoUrl":"'https://scrimba.com/c/c3bvpCg'","content":"\nYou can set which font an element should use, by using the <code>font-family</code> property.\nFor example, if you wanted to set your <code>h2</code> element's font to <code>sans-serif</code>, you would use the following CSS:\n<blockquote>h2 {<br>&nbsp;&nbsp;font-family: sans-serif;<br>}</blockquote>\n"},
"bad87eee1348bd9aede07836" : {"id":"bad87eee1348bd9aede07836","title":"Set the id of an Element","videoUrl":"'https://scrimba.com/c/cN6MEc2'","content":"\nIn addition to classes, each HTML element can also have an <code>id</code> attribute.\nThere are several benefits to using <code>id</code> attributes: You can use an <code>id</code> to style a single element and later you'll learn that you can use them to select and modify specific elements with JavaScript.\n<code>id</code> attributes should be unique. Browsers won't enforce this, but it is a widely agreed upon best practice. So please don't give more than one element the same <code>id</code> attribute.\nHere's an example of how you give your <code>h2</code> element the id of <code>cat-photo-app</code>:\n<code>&#60;h2 id=\"cat-photo-app\"></code>\n"},
"bad87fee1348bd9acdf08812" : {"id":"bad87fee1348bd9acdf08812","title":"Size Your Images","videoUrl":"'https://scrimba.com/c/cM9MmCP'","content":"\nCSS has a property called <code>width</code> that controls an element's width. Just like with fonts, we'll use <code>px</code> (pixels) to specify the image's width.\nFor example, if we wanted to create a CSS class called <code>larger-image</code> that gave HTML elements a width of 500 pixels, we'd use:\n<blockquote>&#60;style&#62;<br>&nbsp;&nbsp;.larger-image {<br>&nbsp;&nbsp;&nbsp;&nbsp;width: 500px;<br>&nbsp;&nbsp;}<br>&#60;/style&#62;</blockquote>\n"},
"bad87fee1348bd9aedf08808" : {"id":"bad87fee1348bd9aedf08808","title":"Specify How Fonts Should Degrade","videoUrl":"'https://scrimba.com/c/cpVKBfQ'","content":"\nThere are several default fonts that are available in all browsers. These generic font families include <code>monospace</code>, <code>serif</code> and <code>sans-serif</code>\nWhen one font isn't available, you can tell the browser to \"degrade\" to another font.\nFor example, if you wanted an element to use the <code>Helvetica</code> font, but degrade to the <code>sans-serif</code> font when <code>Helvetica</code> isn't available, you will specify it as follows:\n<blockquote>p {<br>&nbsp;&nbsp;font-family: Helvetica, sans-serif;<br>}</blockquote>\nGeneric font family names are not case-sensitive. Also, they do not need quotes because they are CSS keywords.\n"},
"bad87fee1348bd9aefe08806" : {"id":"bad87fee1348bd9aefe08806","title":"Style Multiple Elements with a CSS Class","videoUrl":"'https://scrimba.com/c/cRkVbsQ'","content":"\nClasses allow you to use the same CSS styles on multiple HTML elements. You can see this by applying your <code>red-text</code> class to the first <code>p</code> element.\n"},
"bad87fee1348bd9aedf08736" : {"id":"bad87fee1348bd9aedf08736","title":"Style the HTML Body Element","videoUrl":"'https://scrimba.com/c/cB77PHW'","content":"\nNow let's start fresh and talk about CSS inheritance.\nEvery HTML page has a <code>body</code> element.\n"},
"bad82fee1322bd9aedf08721" : {"id":"bad82fee1322bd9aedf08721","title":"Understand Absolute versus Relative Units","videoUrl":"'https://scrimba.com/c/cN66JSL'","content":"\nThe last several challenges all set an element's margin or padding with pixels (<code>px</code>). Pixels are a type of length unit, which is what tells the browser how to size or space an item. In addition to <code>px</code>, CSS has a number of different length unit options that you can use.\nThe two main types of length units are absolute and relative. Absolute units tie to physical units of length. For example, <code>in</code> and <code>mm</code> refer to inches and millimeters, respectively. Absolute length units approximate the actual measurement on a screen, but there are some differences depending on a screen's resolution.\nRelative units, such as <code>em</code> or <code>rem</code>, are relative to another length value. For example, <code>em</code> is based on the size of an element's font. If you use it to set the <code>font-size</code> property itself, it's relative to the parent's <code>font-size</code>.\n<strong>Note</strong><br>There are several relative unit options that are tied to the size of the viewport. They are covered in the Responsive Web Design Principles section.\n"},
"bad87fee1348bd9aedf08719" : {"id":"bad87fee1348bd9aedf08719","title":"Use Abbreviated Hex Code","videoUrl":"'https://scrimba.com/c/cRkpKAm'","content":"\nMany people feel overwhelmed by the possibilities of more than 16 million colors. And it's difficult to remember hex code. Fortunately, you can shorten it.\nFor example, red's hex code <code>#FF0000</code> can be shortened to <code>#F00</code>. This shortened form gives one digit for red, one digit for green, and one digit for blue.\nThis reduces the total number of possible colors to around 4,000. But browsers will interpret <code>#FF0000</code> and <code>#F00</code> as exactly the same color.\n"},
"bad87fee1348bd9aecf08806" : {"id":"bad87fee1348bd9aecf08806","title":"Use a CSS Class to Style an Element","videoUrl":"'https://scrimba.com/c/c2MvDtV'","content":"\nClasses are reusable styles that can be added to HTML elements.\nHere's an example CSS class declaration:\n<blockquote>&#60;style&#62;<br>&nbsp;&nbsp;.blue-text {<br>&nbsp;&nbsp;&nbsp;&nbsp;color: blue;<br>&nbsp;&nbsp;}<br>&#60;/style&#62;</blockquote>\nYou can see that we've created a CSS class called <code>blue-text</code> within the <code>&#60;style&#62;</code> tag.\nYou can apply a class to an HTML element like this:\n<code>&#60;h2 class=\"blue-text\"&#62;CatPhotoApp&#60;/h2&#62;</code>\nNote that in your CSS <code>style</code> element, class names start with a period. In your HTML elements' class attribute, the class name does not include the period.\n"},
"5a9d727a424fe3d0e10cad12" : {"id":"5a9d727a424fe3d0e10cad12","title":"Use a custom CSS Variable","videoUrl":"'https://scrimba.com/c/cM989ck'","content":"\nAfter you create your variable, you can assign its value to other CSS properties by referencing the name you gave it.\n<blockquote>background: var(--penguin-skin);</blockquote>\nThis will change the background of whatever element you are targeting to gray because that is the value of the <code>--penguin-skin</code> variable.\nNote that styles will not be applied unless the variable names are an exact match.\n"},
"5a9d72ad424fe3d0e10cad16" : {"id":"5a9d72ad424fe3d0e10cad16","title":"Use a media query to change a variable","videoUrl":"'https://scrimba.com/c/cWmL8UP'","content":"\nCSS Variables can simplify the way you use media queries.\nFor instance, when your screen is smaller or larger than your media query break point, you can change the value of a variable, and it will apply its style wherever it is used.\n"},
"bad87dee1348bd9aede07836" : {"id":"bad87dee1348bd9aede07836","title":"Use an id Attribute to Style an Element","videoUrl":"'https://scrimba.com/c/cakyZfL'","content":"\nOne cool thing about <code>id</code> attributes is that, like classes, you can style them using CSS.\nHowever, an <code>id</code> is not reusable and should only be applied to one element. An <code>id</code> also has a higher specificity (importance) than a class so if both are applied to the same element and have conflicting styles, the styles of the <code>id</code> will be applied.\nHere's an example of how you can take your element with the <code>id</code> attribute of <code>cat-photo-element</code> and give it the background color of green. In your <code>style</code> element:\n<blockquote>#cat-photo-element {<br>&nbsp;&nbsp;background-color: green;<br>}</blockquote>\nNote that inside your <code>style</code> element, you always reference classes by putting a <code>.</code> in front of their names. You always reference ids by putting a <code>#</code> in front of their names.\n"},
"58c383d33e2e3259241f3076" : {"id":"58c383d33e2e3259241f3076","title":"Use Attribute Selectors to Style Elements","videoUrl":"'https://scrimba.com/c/cnpymfJ'","content":"\nYou have been giving <code>id</code> or <code>class</code> attributes to elements that you wish to specifically style. These are known as ID and class selectors. There are other CSS Selectors you can use to select custom groups of elements to style.\nLet's bring out CatPhotoApp again to practice using CSS Selectors.\nFor this challenge, you will use the <code>[attr=value]</code> attribute selector to style the checkboxes in CatPhotoApp. This selector matches and styles elements with a specific attribute value. For example, the below code changes the margins of all elements with the attribute <code>type</code> and a corresponding value of <code>radio</code>:\n<blockquote>[type='radio'] {<br>&nbsp;&nbsp;margin: 20px 0px 20px 0px;<br>}</blockquote>\n"},
"bad87fee1348bd9afdf08726" : {"id":"bad87fee1348bd9afdf08726","title":"Use Clockwise Notation to Specify the Margin of an Element","videoUrl":"'https://scrimba.com/c/cB7mBS9'","content":"\nLet's try this again, but with <code>margin</code> this time.\nInstead of specifying an element's <code>margin-top</code>, <code>margin-right</code>, <code>margin-bottom</code>, and <code>margin-left</code> properties individually, you can specify them all in one line, like this:\n<code>margin: 10px 20px 10px 20px;</code>\nThese four values work like a clock: top, right, bottom, left, and will produce the exact same result as using the side-specific margin instructions.\n"},
"bad87fee1348bd9aedf08826" : {"id":"bad87fee1348bd9aedf08826","title":"Use Clockwise Notation to Specify the Padding of an Element","videoUrl":"'https://scrimba.com/c/cB7mBS9'","content":"\nInstead of specifying an element's <code>padding-top</code>, <code>padding-right</code>, <code>padding-bottom</code>, and <code>padding-left</code> properties individually, you can specify them all in one line, like this:\n<code>padding: 10px 20px 10px 20px;</code>\nThese four values work like a clock: top, right, bottom, left, and will produce the exact same result as using the side-specific padding instructions.\n"},
"bad87fee1348bd9aedf08805" : {"id":"bad87fee1348bd9aedf08805","title":"Use CSS Selectors to Style Elements","videoUrl":"'https://scrimba.com/c/cJKMBT2'","content":"\nWith CSS, there are hundreds of CSS <code>properties</code> that you can use to change the way an element looks on your page.\nWhen you entered <code>&#60;h2 style=\"color: red\"&#62;CatPhotoApp&#60;/h2&#62;</code>, you were styling that individual <code>h2</code> element with <code>inline CSS</code>, which stands for <code>Cascading Style Sheets</code>.\nThat's one way to specify the style of an element, but there's a better way to apply <code>CSS</code>.\nAt the top of your code, create a <code>style</code> block like this:\n<blockquote>&#60;style&#62;<br>&#60;/style&#62;</blockquote>\nInside that style block, you can create a <code>CSS selector</code> for all <code>h2</code> elements. For example, if you wanted all <code>h2</code> elements to be red, you would add a style rule that looks like this:\n<blockquote>&#60;style&#62;<br>&nbsp;&nbsp;h2 {color: red;}<br>&#60;/style&#62;</blockquote>\nNote that it's important to have both opening and closing curly braces (<code>{</code> and <code>}</code>) around each element's style rule(s). You also need to make sure that your element's style definition is between the opening and closing style tags. Finally, be sure to add a semicolon to the end of each of your element's style rules.\n"},
"5a9d725e424fe3d0e10cad10" : {"id":"5a9d725e424fe3d0e10cad10","title":"Use CSS Variables to change several elements at once","videoUrl":"'https://scrimba.com/c/c6bDECm'","content":"\n<dfn>CSS Variables</dfn> are a powerful way to change many CSS style properties at once by changing only one value.\nFollow the instructions below to see how changing just three values can change the styling of many elements.\n"},
"bad87fee1348bd9aedf08726" : {"id":"bad87fee1348bd9aedf08726","title":"Use Hex Code for Specific Colors","videoUrl":"'https://scrimba.com/c/c8W9mHM'","content":"\nDid you know there are other ways to represent colors in CSS? One of these ways is called hexadecimal code, or <code>hex code</code> for short.\nWe usually use <code>decimals</code>, or base 10 numbers, which use the symbols 0 to 9 for each digit. <code>Hexadecimals</code> (or <code>hex</code>) are base 16 numbers. This means it uses sixteen distinct symbols. Like decimals, the symbols 0-9 represent the values zero to nine. Then A,B,C,D,E,F represent the values ten to fifteen. Altogether, 0 to F can represent a digit in <code>hexadecimal</code>, giving us 16 total possible values. You can find more information about <a target='_blank' href='https://en.wikipedia.org/wiki/Hexadecimal'>hexadecimal numbers here</a>.\nIn CSS, we can use 6 hexadecimal digits to represent colors, two each for the red (R), green (G), and blue (B) components. For example, <code>#000000</code> is black and is also the lowest possible value. You can find more information about the <a target='_blank' href='https://en.wikipedia.org/wiki/RGB_color_model'>RGB color system here</a>.\n<blockquote>body {<br>&nbsp;&nbsp;color: #000000;<br>}</blockquote>\n"},
"bad87fee1348bd9aedf08721" : {"id":"bad87fee1348bd9aedf08721","title":"Use Hex Code to Mix Colors","videoUrl":"'https://scrimba.com/c/cK89PhP'","content":"\nTo review, hex codes use 6 hexadecimal digits to represent colors, two each for red (R), green (G), and blue (B) components.\nFrom these three pure colors (red, green, and blue), we can vary the amounts of each to create over 16 million other colors!\nFor example, orange is pure red, mixed with some green, and no blue. In hex code, this translates to being <code>#FFA500</code>.\nThe digit <code>0</code> is the lowest number in hex code, and represents a complete absence of color.\nThe digit <code>F</code> is the highest number in hex code, and represents the maximum possible brightness.\n"},
"bad82fee1348bd9aedf08721" : {"id":"bad82fee1348bd9aedf08721","title":"Use RGB to Mix Colors","videoUrl":"'https://scrimba.com/c/cm24JU6'","content":"\nJust like with hex code, you can mix colors in RGB by using combinations of different values.\n"},
"bad87fee1348bd9aede08718" : {"id":"bad87fee1348bd9aede08718","title":"Use RGB values to Color Elements","videoUrl":"'https://scrimba.com/c/cRkp2fr'","content":"\nAnother way you can represent colors in CSS is by using <code>RGB</code> values.\nThe RGB value for black looks like this:\n<code>rgb(0, 0, 0)</code>\nThe RGB value for white looks like this:\n<code>rgb(255, 255, 255)</code>\nInstead of using six hexadecimal digits like you do with hex code, with <code>RGB</code> you specify the brightness of each color with a number between 0 and 255.\nIf you do the math, the two digits for one color equal 16 times 16, which gives us 256 total values. So <code>RGB</code>, which starts counting from zero, has the exact same number of possible values as hex code.\nHere's an example of how you'd change the body background to orange using its RGB code.\n<blockquote>body {<br>&nbsp;&nbsp;background-color: rgb(255, 165, 0);<br>}</blockquote>\n"},
"bad87fee1348bd9aedd08830" : {"id":"bad87fee1348bd9aedd08830","title":"Add a Submit Button to a Form","videoUrl":"'https://scrimba.com/p/pVMPUv/cp2Nkhz'","content":"\nLet's add a <code>submit</code> button to your form. Clicking this button will send the data from your form to the URL you specified with your form's <code>action</code> attribute.\nHere's an example submit button:\n<code>&#60;button type=\"submit\"&#62;this button submits the form&#60;/button&#62;</code>\n"},
"bad87fee1348bd9aedf08812" : {"id":"bad87fee1348bd9aedf08812","title":"Add Images to Your Website","videoUrl":"'https://scrimba.com/p/pVMPUv/c8EbJf2'","content":"\nYou can add images to your website by using the <code>img</code> element, and point to a specific image's URL using the <code>src</code> attribute.\nAn example of this would be:\n<code>&#60img src=\"https://www.your-image-source.com/your-image.jpg\"&#62</code>\nNote that <code>img</code> elements are self-closing.\nAll <code>img</code> elements <strong>must</strong> have an <code>alt</code> attribute. The text inside an <code>alt</code> attribute is used for screen readers to improve accessibility and is displayed if the image fails to load.\nNote: If the image is purely decorative, using an empty <code>alt</code> attribute is a best practice.\nIdeally the <code>alt</code> attribute should not contain special characters unless needed.\nLet's add an <code>alt</code> attribute to our <code>img</code> example above:\n<code>&#60img src=\"https://www.your-image-source.com/your-image.jpg\" alt=\"Author standing on a beach with two thumbs up.\"&#62</code>\n"},
"bad87fee1348bd9aedf08830" : {"id":"bad87fee1348bd9aedf08830","title":"Add Placeholder Text to a Text Field","videoUrl":"'https://scrimba.com/p/pVMPUv/cKdJDhg'","content":"\nPlaceholder text is what is displayed in your <code>input</code> element before your user has inputted anything.\nYou can create placeholder text like so:\n<code>&#60;input type=\"text\" placeholder=\"this is placeholder text\"&#62;</code>\n"},
"bad87fee1348bd9aedd08835" : {"id":"bad87fee1348bd9aedd08835","title":"Check Radio Buttons and Checkboxes by Default","videoUrl":"'https://scrimba.com/p/pVMPUv/cWk3Qh6'","content":"\nYou can set a checkbox or radio button to be checked by default using the <code>checked</code> attribute.\nTo do this, just add the word \"checked\" to the inside of an input element. For example:\n<code>&#60;input type=\"radio\" name=\"test-name\" checked&#62;</code>\n"},
"bad87fee1348bd9aedf08804" : {"id":"bad87fee1348bd9aedf08804","title":"Comment out HTML","videoUrl":"'https://scrimba.com/p/pVMPUv/cGyGbca'","content":"\nRemember that in order to start a comment, you need to use <code>&#60;!--</code> and to end a comment, you need to use <code>--&#62;</code>\nHere you'll need to end the comment before your <code>h2</code> element begins.\n"},
"bad87fee1348bd9aedf08827" : {"id":"bad87fee1348bd9aedf08827","title":"Create a Bulleted Unordered List","videoUrl":"'https://scrimba.com/p/pVMPUv/cDKVPuv'","content":"\nHTML has a special element for creating <code>unordered lists</code>, or bullet point style lists.\nUnordered lists start with an opening <code>&#60;ul&#62;</code> element, followed by any number of <code>&#60;li&#62;</code> elements. Finally, unordered lists close with a <code>&#60;/ul&#62;</code>\nFor example:\n<blockquote>&#60;ul&#62;<br>&nbsp;&nbsp;&#60;li&#62;milk&#60;/li&#62;<br>&nbsp;&nbsp;&#60;li&#62;cheese&#60;/li&#62;<br>&#60;/ul&#62;</blockquote>\nwould create a bullet point style list of \"milk\" and \"cheese\".\n"},
"bad87fee1348bd9aede08830" : {"id":"bad87fee1348bd9aede08830","title":"Create a Form Element","videoUrl":"'https://scrimba.com/p/pVMPUv/cmQ3Kfa'","content":"\nYou can build web forms that actually submit data to a server using nothing more than pure HTML. You can do this by specifying an action on your <code>form</code> element.\nFor example:\n<code>&#60;form action=\"/url-where-you-want-to-submit-form-data\"&#62;&#60;/form&#62;</code>\n"},
"bad87fee1348bd9aedf08828" : {"id":"bad87fee1348bd9aedf08828","title":"Create an Ordered List","videoUrl":"'https://scrimba.com/p/pVMPUv/cQ3B8TM'","content":"\nHTML has another special element for creating <code>ordered lists</code>, or numbered lists.\nOrdered lists start with an opening <code>&#60;ol&#62;</code> element, followed by any number of <code>&#60;li&#62;</code> elements. Finally, ordered lists close with a <code>&#60;/ol&#62;</code>\nFor example:\n<blockquote>&#60;ol&#62;<br>&nbsp;&nbsp;&#60;li&#62;Garfield&#60;/li&#62;<br>&nbsp;&nbsp;&#60;li&#62;Sylvester&#60;/li&#62;<br>&#60;/ol&#62;</blockquote>\nwould create a numbered list of \"Garfield\" and \"Sylvester\".\n"},
"bad87fee1348bd9aedf08835" : {"id":"bad87fee1348bd9aedf08835","title":"Create a Set of Checkboxes","videoUrl":"'https://scrimba.com/p/pVMPUv/cqrkJsp'","content":"\nForms commonly use <code>checkboxes</code> for questions that may have more than one answer.\nCheckboxes are a type of <code>input</code>.\nEach of your checkboxes can be nested within its own <code>label</code> element. By wrapping an <code>input</code> element inside of a <code>label</code> element it will automatically associate the checkbox input with the label element surrounding it.\nAll related checkbox inputs should have the same <code>name</code> attribute.\nIt is considered best practice to explicitly define the relationship between a checkbox <code>input</code> and its corresponding <code>label</code> by setting the <code>for</code> attribute on the <code>label</code> element to match the <code>id</code> attribute of the associated <code>input</code> element.\nHere's an example of a checkbox:\n<code>&#60;label for=\"loving\"&#62;&#60;input id=\"loving\" type=\"checkbox\" name=\"personality\"&#62; Loving&#60;/label&#62;</code>\n"},
"bad87fee1348bd9aedf08834" : {"id":"bad87fee1348bd9aedf08834","title":"Create a Set of Radio Buttons","videoUrl":"'https://scrimba.com/p/pVMPUv/cNWKvuR'","content":"\nYou can use <code>radio button</code>s for questions where you want the user to only give you one answer out of multiple options.\nRadio buttons are a type of <code>input</code>.\nEach of your radio buttons can be nested within its own <code>label</code> element. By wrapping an <code>input</code> element inside of a <code>label</code> element it will automatically associate the radio button input with the label element surrounding it.\nAll related radio buttons should have the same <code>name</code> attribute to create a radio button group. By creating a radio group, selecting any single radio button will automatically deselect the other buttons within the same group ensuring only one answer is provided by the user.\nHere's an example of a radio button:\n<blockquote>&#60;label&#62; <br>&nbsp;&nbsp;&#60;input type=\"radio\" name=\"indoor-outdoor\"&#62;Indoor <br>&#60;/label&#62;</blockquote>\nIt is considered best practice to set a <code>for</code> attribute on the <code>label</code> element, with a value that matches the value of the <code>id</code> attribute of the <code>input</code> element. This allows assistive technologies to create a linked relationship between the label and the child <code>input</code> element. For example:\n<blockquote>&#60;label for=\"indoor\"&#62; <br>&nbsp;&nbsp;&#60;input id=\"indoor\" type=\"radio\" name=\"indoor-outdoor\"&#62;Indoor <br>&#60;/label&#62;</blockquote>\n"},
"bad87fee1348bd9aedf08829" : {"id":"bad87fee1348bd9aedf08829","title":"Create a Text Field","videoUrl":"'https://scrimba.com/p/pVMPUv/c2EVnf6'","content":"\nNow let's create a web form.\n<code>input</code> elements are a convenient way to get input from your user.\nYou can create a text input like this:\n<code>&#60;input type=\"text\"&#62;</code>\nNote that <code>input</code> elements are self-closing.\n"},
"587d78aa367417b2b2512aed" : {"id":"587d78aa367417b2b2512aed","title":"Declare the Doctype of an HTML Document","videoUrl":"'https://scrimba.com/p/pVMPUv/cra98AJ'","content":"\nThe challenges so far have covered specific HTML elements and their uses. However, there are a few elements that give overall structure to your page, and should be included in every HTML document.\nAt the top of your document, you need to tell the browser which version of HTML your page is using. HTML is an evolving language, and is updated regularly. Most major browsers support the latest specification, which is HTML5. However, older web pages may use previous versions of the language.\nYou tell the browser this information by adding the <code>&lt;!DOCTYPE ...&gt;</code> tag on the first line, where the \"<code>...</code>\" part is the version of HTML. For HTML5, you use <code>&lt;!DOCTYPE html&gt;</code>.\nThe <code>!</code> and uppercase <code>DOCTYPE</code> is important, especially for older browsers. The <code>html</code> is not case sensitive.\nNext, the rest of your HTML code needs to be wrapped in <code>html</code> tags. The opening <code>&lt;html&gt;</code> goes directly below the <code>&lt;!DOCTYPE html&gt;</code> line, and the closing <code>&lt;/html&gt;</code> goes at the end of the page.\nHere's an example of the page structure:\n<blockquote>&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&nbsp;&nbsp;&lt;!-- Your HTML code goes here --&gt;<br>&lt;/html&gt;</blockquote>\n"},
"587d78aa367417b2b2512aec" : {"id":"587d78aa367417b2b2512aec","title":"Define the Head and Body of an HTML Document","videoUrl":"'https://scrimba.com/p/pVMPUv/cra9bfP'","content":"\nYou can add another level of organization in your HTML document within the <code>html</code> tags with the <code>head</code> and <code>body</code> elements. Any markup with information about your page would go into the <code>head</code> tag. Then any markup with the content of the page (what displays for a user) would go into the <code>body</code> tag.\nMetadata elements, such as <code>link</code>, <code>meta</code>, <code>title</code>, and <code>style</code>, typically go inside the <code>head</code> element.\nHere's an example of a page's layout:\n<blockquote>&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&nbsp;&nbsp;&lt;head&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;!-- metadata elements --&gt;<br>&nbsp;&nbsp;&lt;/head&gt;<br>&nbsp;&nbsp;&lt;body&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;!-- page contents --&gt;<br>&nbsp;&nbsp;&lt;/body&gt;<br>&lt;/html&gt;</blockquote>\n"},
"bad87fed1348bd9aedf08833" : {"id":"bad87fed1348bd9aedf08833","title":"Delete HTML Elements","videoUrl":"'https://scrimba.com/p/pVMPUv/ckK73C9'","content":"\nOur phone doesn't have much vertical space.\nLet's remove the unnecessary elements so we can start building our CatPhotoApp.\n"},
"bad87fee1348bd9aedf08833" : {"id":"bad87fee1348bd9aedf08833","title":"Fill in the Blank with Placeholder Text","videoUrl":"'https://scrimba.com/p/pVMPUv/cgR7Dc7'","content":"\nWeb developers traditionally use <code>lorem ipsum text</code> as placeholder text. The 'lorem ipsum' text is randomly scraped from a famous passage by Cicero of Ancient Rome.\nLorem ipsum text has been used as placeholder text by typesetters since the 16th century, and this tradition continues on the web.\nWell, 5 centuries is long enough. Since we're building a CatPhotoApp, let's use something called <code>kitty ipsum text</code>.\n"},
"bad87fee1348bd9aedf0887a" : {"id":"bad87fee1348bd9aedf0887a","title":"Headline with the h2 Element","videoUrl":"'https://scrimba.com/p/pVMPUv/cE8Gqf3'","content":"\nOver the next few lessons, we'll build an HTML5 cat photo web app piece-by-piece.\nThe <code>h2</code> element you will be adding in this step will add a level two heading to the web page.\nThis element tells the browser about the structure of your website. <code>h1</code> elements are often used for main headings, while <code>h2</code> elements are generally used for subheadings. There are also <code>h3</code>, <code>h4</code>, <code>h5</code> and <code>h6</code> elements to indicate different levels of subheadings.\n"},
"bad87fee1348bd9aedf08801" : {"id":"bad87fee1348bd9aedf08801","title":"Inform with the Paragraph Element","videoUrl":"'https://scrimba.com/p/pVMPUv/ceZ7DtN'","content":"\n<code>p</code> elements are the preferred element for paragraph text on websites. <code>p</code> is short for \"paragraph\".\nYou can create a paragraph element like this:\n<code>&#60;p&#62;I'm a p tag!&#60;/p&#62;</code>\n"},
"bad87fee1348bd9aecf08801" : {"id":"bad87fee1348bd9aecf08801","title":"Introduction to HTML5 Elements","videoUrl":"'https://scrimba.com/p/pVMPUv/c4Ep9Am'","content":"\nHTML5 introduces more descriptive HTML tags. These include <code>header</code>, <code>footer</code>, <code>nav</code>, <code>video</code>, <code>article</code>, <code>section</code> and others.\nThese tags make your HTML easier to read, and also help with Search Engine Optimization (SEO) and accessibility.\nThe <code>main</code> HTML5 tag helps search engines and other developers find the main content of your page.\n<strong>Note</strong><br>Many of the new HTML5 tags and their benefits are covered in the Applied Accessibility section.\n"},
"bad87fee1348bd9aedf08816" : {"id":"bad87fee1348bd9aedf08816","title":"Link to External Pages with Anchor Elements","videoUrl":"'https://scrimba.com/p/pVMPUv/c8EkncB'","content":"\nYou can use <code>anchor</code> elements to link to content outside of your web page.\n<code>anchor</code> elements need a destination web address called an <code>href</code> attribute. They also need anchor text. Here's an example:\n<code>&#60;a href=\"https://freecodecamp.org\">this links to freecodecamp.org&#60;/a&#62;</code>\nThen your browser will display the text <strong>\"this links to freecodecamp.org\"</strong> as a link you can click. And that link will take you to the web address <strong>https://www.freecodecamp.org</strong>.\n"},
"bad88fee1348bd9aedf08816" : {"id":"bad88fee1348bd9aedf08816","title":"Link to Internal Sections of a Page with Anchor Elements","videoUrl":"'https://scrimba.com/p/pVMPUv/cyrDRUL'","content":"\n<code>anchor</code> elements can also be used to create internal links to jump to different sections within a webpage.\nTo create an internal link, you assign a link's <code>href</code> attribute to a hash symbol <code>#</code> plus the value of the <code>id</code> attribute for the element that you want to internally link to, usually further down the page. You then need to add the same <code>id</code> attribute to the element you are linking to. An <code>id</code> is an attribute that uniquely describes an element.\nBelow is an example of an internal anchor link and its target element:\n<blockquote>&lt;a href=\"#contacts-header\"&gt;Contacts&lt;/a&gt;<br>...<br>&lt;h2 id=\"contacts-header\"&gt;Contacts&lt;/h2&gt;</blockquote>\nWhen users click the Contacts link, they'll be taken to the section of the webpage with the <b>Contacts</b> header element.\n"},
"bad87fee1348bd9aedf08817" : {"id":"bad87fee1348bd9aedf08817","title":"Make Dead Links Using the Hash Symbol","videoUrl":"'https://scrimba.com/p/pVMPUv/cMdkytL'","content":"\nSometimes you want to add <code>a</code> elements to your website before you know where they will link.\nThis is also handy when you're changing the behavior of a link using <code>JavaScript</code>, which we'll learn about later.\n"},
"bad87fee1348bd9aede08817" : {"id":"bad87fee1348bd9aede08817","title":"Nest an Anchor Element within a Paragraph","videoUrl":"'https://scrimba.com/p/pVMPUv/cb6k8Cb'","content":"\nYou can nest links within other text elements.\n<blockquote>&#60;p&#62;<br> Here's a &#60;a target=\"_blank\" href=\"http://freecodecamp.org\"&#62; link to freecodecamp.org&#60;/a&#62; for you to follow.<br>&#60;/p&#62;</blockquote>\nLet's break down the example:\nNormal text is wrapped in the <code>p</code> element:<br> <code>&#60;p&#62; Here's a ... for you to follow. &#60;/p&#62;</code>\nNext is the <code>anchor</code> element <code>&#60;a&#62;</code> (which requires a closing tag <code>&#60;/a&#62;</code>):<br>  <code>&#60;a&#62; ... &#60;/a&#62;</code>\n<code>target</code> is an anchor tag attribute that specifies where to open the link and the value <code>\"_blank\"</code> specifies to open the link in a new tab\n<code>href</code> is an anchor tag attribute that contains the URL address of the link:<br>  <code>&#60;a href=\"http://freecodecamp.org\"> ... &#60;/a&#62;</code>\nThe text, <strong>\"link to freecodecamp.org\"</strong>, within the <code>anchor</code> element called <code>anchor text</code>, will display a link to click:<br>  <code>&#60;a href=\" ... \"&#62;link to freecodecamp.org&#60;/a&#62;</code>\nThe final output of the example will look like this:<br><p>Here's a <a target=\"_blank\" href=\"http://freecodecamp.org\"> link to freecodecamp.org</a> for you to follow.</p>\n"},
"bad87fee1348bd9aede08835" : {"id":"bad87fee1348bd9aede08835","title":"Nest Many Elements within a Single div Element","videoUrl":"'https://scrimba.com/p/pVMPUv/cNW4kC3'","content":"\nThe <code>div</code> element, also known as a division element, is a general purpose container for other elements.\nThe <code>div</code> element is probably the most commonly used HTML element of all.\nJust like any other non-self-closing element, you can open a <code>div</code> element with <code>&#60;div&#62;</code> and close it on another line with <code>&#60;/div&#62;</code>.\n"},
"bd7123c8c441eddfaeb5bdef" : {"id":"bd7123c8c441eddfaeb5bdef","title":"Say Hello to HTML Elements","videoUrl":"'https://scrimba.com/p/pVMPUv/cE8Gpt2'","content":"\nWelcome to freeCodeCamp's HTML coding challenges. These will walk you through web development step-by-step.\nFirst, you'll start by building a simple web page using HTML. You can edit <code>code</code> in your <code>code editor</code>, which is embedded into this web page.\nDo you see the code in your code editor that says <code>&#60;h1&#62;Hello&#60;/h1&#62;</code>? That's an HTML <code>element</code>.\nMost HTML elements have an <code>opening tag</code> and a <code>closing tag</code>.\nOpening tags look like this:\n<code>&#60;h1&#62;</code>\nClosing tags look like this:\n<code>&#60;/h1&#62;</code>\nThe only difference between opening and closing tags is the forward slash after the opening bracket of a closing tag.\nEach challenge has tests you can run at any time by clicking the \"Run tests\" button. When you pass all tests, you'll be prompted to submit your solution and go to the next coding challenge.\n"},
"bad87fee1348bd9aedf08820" : {"id":"bad87fee1348bd9aedf08820","title":"Turn an Image into a Link","videoUrl":"'https://scrimba.com/p/pVMPUv/cRdBnUr'","content":"\nYou can make elements into links by nesting them within an <code>a</code> element.\nNest your image within an <code>a</code> element. Here's an example:\n<code>&#60;a href=\"#\"&#62;&#60;img src=\"https://bit.ly/fcc-running-cats\" alt=\"Three kittens running towards the camera.\"&#62;&#60;/a&#62;</code>\nRemember to use <code>#</code> as your <code>a</code> element's <code>href</code> property in order to turn it into a dead link.\n"},
"bad87fee1348bd9aedf08802" : {"id":"bad87fee1348bd9aedf08802","title":"Uncomment HTML","videoUrl":"'https://scrimba.com/p/pVMPUv/cBmG9T7'","content":"\nCommenting is a way that you can leave comments for other developers within your code without affecting the resulting output that is displayed to the end user.\nCommenting is also a convenient way to make code inactive without having to delete it entirely.\nComments in HTML starts with <code>&#60;!--</code>, and ends with a <code>--&#62;</code>\n"},
"bad87fee1348bd9aedc08830" : {"id":"bad87fee1348bd9aedc08830","title":"Use HTML5 to Require a Field","videoUrl":"'https://scrimba.com/p/pVMPUv/cMd4EcQ'","content":"\nYou can require specific form fields so that your user will not be able to submit your form until he or she has filled them out.\nFor example, if you wanted to make a text input field required, you can just add the attribute <code>required</code> within your <code>input</code> element, like this: <code>&#60;input type=\"text\" required&#62;</code>\n"},
"587d78ab367417b2b2512af1" : {"id":"587d78ab367417b2b2512af1","title":"Add Flex Superpowers to the Tweet Embed","videoUrl":"'https://scrimba.com/p/pVaDAv/c9W7MhM'","content":"\nTo the right is the tweet embed that will be used as the practical example. Some of the elements would look better with a different layout. The last challenge demonstrated <code>display: flex</code>. Here you'll add it to several components in the tweet embed to start adjusting their positioning.\n"},
"587d78ad367417b2b2512af8" : {"id":"587d78ad367417b2b2512af8","title":"Align Elements Using the align-items Property","videoUrl":"'https://scrimba.com/p/pVaDAv/c8aggtk'","content":"\nThe <code>align-items</code> property is similar to <code>justify-content</code>. Recall that the <code>justify-content</code> property aligned flex items along the main axis. For rows, the main axis is a horizontal line and for columns it is a vertical line.\nFlex containers also have a <strong>cross axis</strong> which is the opposite of the main axis. For rows, the cross axis is vertical and for columns, the cross axis is horizontal.\nCSS offers the <code>align-items</code> property to align flex items along the cross axis. For a row, it tells CSS how to push the items in the entire row up or down within the container. And for a column, how to push all the items left or right within the container.\nThe different values available for <code>align-items</code> include:\n<ul><li><code>flex-start</code>: aligns items to the start of the flex container. For rows, this aligns items to the top of the container. For columns, this aligns items to the left of the container.</li><li><code>flex-end</code>: aligns items to the end of the flex container. For rows, this aligns items to the bottom of the container. For columns, this aligns items to the right of the container.</li><li><code>center</code>: align items to the center. For rows, this vertically aligns items (equal space above and below the items). For columns, this horizontally aligns them (equal space to the left and right of the items).</li><li><code>stretch</code>: stretch the items to fill the flex container. For example, rows items are stretched to fill the flex container top-to-bottom.</li><li><code>baseline</code>: align items to their baselines. Baseline is a text concept, think of it as the line that the letters sit on.</li></ul>\n"},
"587d78ac367417b2b2512af6" : {"id":"587d78ac367417b2b2512af6","title":"Align Elements Using the justify-content Property","videoUrl":"'https://scrimba.com/p/pVaDAv/c43gnHm'","content":"\nSometimes the flex items within a flex container do not fill all the space in the container. It is common to want to tell CSS how to align and space out the flex items a certain way. Fortunately, the <code>justify-content</code> property has several options to do this. But first, there is some important terminology to understand before reviewing those options.\n<a href=\"https://www.w3.org/TR/css-flexbox-1/images/flex-direction-terms.svg\" target=\"_blank\">Here is a useful image showing a row to illustrate the concepts below.</a>\nRecall that setting a flex container as a row places the flex items side-by-side from left-to-right. A flex container set as a column places the flex items in a vertical stack from top-to-bottom. For each, the direction the flex items are arranged is called the <strong>main axis</strong>. For a row, this is a horizontal line that cuts through each item. And for a column, the main axis is a vertical line through the items.\nThere are several options for how to space the flex items along the line that is the main axis. One of the most commonly used is <code>justify-content: center;</code>, which aligns all the flex items to the center inside the flex container. Others options include:\n<ul><li><code>flex-start</code>: aligns items to the start of the flex container. For a row, this pushes the items to the left of the container. For a column, this pushes the items to the top of the container.</li><li><code>flex-end</code>: aligns items to the end of the flex container. For a row, this pushes the items to the right of the container. For a column, this pushes the items to the bottom of the container.</li><li><code>space-between</code>: aligns items to the center of the main axis, with extra space placed between the items. The first and last items are pushed to the very edge of the flex container. For example, in a row the first item is against the left side of the container, the last item is against the right side of the container, then the other items between them are spaced evenly.</li><li><code>space-around</code>: similar to <code>space-between</code> but the first and last items are not locked to the edges of the container, the space is distributed around all the items</li></ul>\n"},
"587d78ac367417b2b2512af5" : {"id":"587d78ac367417b2b2512af5","title":"Apply the flex-direction Property to Create a Column in the Tweet Embed","videoUrl":"'https://scrimba.com/p/pVaDAv/cnzdVC9'","content":"\nThe tweet embed <code>header</code> and <code>footer</code> used the <code>flex-direction</code> property earlier with a row value. Similarly, the items inside the <code>.profile-name</code> element would work well stacked as a column.\n"},
"587d78ab367417b2b2512af3" : {"id":"587d78ab367417b2b2512af3","title":"Apply the flex-direction Property to Create Rows in the Tweet Embed","videoUrl":"'https://scrimba.com/p/pVaDAv/cJb8yuq'","content":"\nThe <code>header</code> and <code>footer</code> in the tweet embed example have child items that could be arranged as rows using the <code>flex-direction</code> property. This tells CSS to align the children horizontally.\n"},
"587d78ab367417b2b2512af0" : {"id":"587d78ab367417b2b2512af0","title":"'Use display","videoUrl":"'https://scrimba.com/p/pVaDAv/cgz3QS7'","content":"\nThis section uses alternating challenge styles to show how to use CSS to position elements in a flexible way. First, a challenge will explain theory, then a practical challenge using a simple tweet component will apply the flexbox concept.\nPlacing the CSS property <code>display: flex;</code> on an element allows you to use other flex properties to build a responsive page.\n"},
"587d78ad367417b2b2512af9" : {"id":"587d78ad367417b2b2512af9","title":"Use the align-items Property in the Tweet Embed","videoUrl":"'https://scrimba.com/p/pVaDAv/cd3PNfq'","content":"\nThe last challenge introduced the <code>align-items</code> property and gave an example. This property can be applied to a few tweet embed elements to align the flex items inside them.\n"},
"587d78af367417b2b2512b00" : {"id":"587d78af367417b2b2512b00","title":"Use the align-self Property","videoUrl":"'https://scrimba.com/p/pVaDAv/cMbvzfv'","content":"\nThe final property for flex items is <code>align-self</code>. This property allows you to adjust each item's alignment individually, instead of setting them all at once. This is useful since other common adjustment techniques using the CSS properties <code>float</code>, <code>clear</code>, and <code>vertical-align</code> do not work on flex items.\n<code>align-self</code> accepts the same values as <code>align-items</code> and will override any value set by the <code>align-items</code> property.\n"},
"587d78ae367417b2b2512afd" : {"id":"587d78ae367417b2b2512afd","title":"Use the flex-basis Property to Set the Initial Size of an Item","videoUrl":"'https://scrimba.com/p/pVaDAv/c3d9nCa'","content":"\nThe <code>flex-basis</code> property specifies the initial size of the item before CSS makes adjustments with <code>flex-shrink</code> or <code>flex-grow</code>.\nThe units used by the <code>flex-basis</code> property are the same as other size properties (<code>px</code>, <code>em</code>, <code>%</code>, etc.). The value <code>auto</code> sizes items based on the content.\n"},
"587d78ac367417b2b2512af4" : {"id":"587d78ac367417b2b2512af4","title":"Use the flex-direction Property to Make a Column","videoUrl":"'https://scrimba.com/p/pVaDAv/cZmWeA4'","content":"\nThe last two challenges used the <code>flex-direction</code> property set to row. This property can also create a column by vertically stacking the children of a flex container.\n"},
"587d78ab367417b2b2512af2" : {"id":"587d78ab367417b2b2512af2","title":"Use the flex-direction Property to Make a Row","videoUrl":"'https://scrimba.com/p/pVaDAv/cBEkbfJ'","content":"\nAdding <code>display: flex</code> to an element turns it into a flex container. This makes it possible to align any children of that element into rows or columns. You do this by adding the <code>flex-direction</code> property to the parent item and setting it to row or column. Creating a row will align the children horizontally, and creating a column will align the children vertically.\nOther options for <code>flex-direction</code> are row-reverse and column-reverse.\n<strong>Note</strong><br>The default value for the <code>flex-direction</code> property is row.\n"},
"587d78ae367417b2b2512afc" : {"id":"587d78ae367417b2b2512afc","title":"Use the flex-grow Property to Expand Items","videoUrl":"'https://scrimba.com/p/pVaDAv/c2p78cg'","content":"\nThe opposite of <code>flex-shrink</code> is the <code>flex-grow</code> property. Recall that <code>flex-shrink</code> controls the size of the items when the container shrinks. The <code>flex-grow</code> property controls the size of items when the parent container expands.\nUsing a similar example from the last challenge, if one item has a <code>flex-grow</code> value of 1 and the other has a <code>flex-grow</code> value of 3, the one with the value of 3 will grow three times as much as the other.\n"},
"587d78ae367417b2b2512afe" : {"id":"587d78ae367417b2b2512afe","title":"Use the flex Shorthand Property","videoUrl":"'https://scrimba.com/p/pVaDAv/cbpW2tE'","content":"\nThere is a shortcut available to set several flex properties at once. The <code>flex-grow</code>, <code>flex-shrink</code>, and <code>flex-basis</code> properties can all be set together by using the <code>flex</code> property.\nFor example, <code>flex: 1 0 10px;</code> will set the item to <code>flex-grow: 1;</code>, <code>flex-shrink: 0;</code>, and <code>flex-basis: 10px;</code>.\nThe default property settings are <code>flex: 0 1 auto;</code>.\n"},
"587d78ad367417b2b2512afb" : {"id":"587d78ad367417b2b2512afb","title":"Use the flex-shrink Property to Shrink Items","videoUrl":"'https://scrimba.com/p/pVaDAv/cd3PBfr'","content":"\nSo far, all the properties in the challenges apply to the flex container (the parent of the flex items). However, there are several useful properties for the flex items.\nThe first is the <code>flex-shrink</code> property. When it's used, it allows an item to shrink if the flex container is too small. Items shrink when the width of the parent container is smaller than the combined widths of all the flex items within it.\nThe <code>flex-shrink</code> property takes numbers as values. The higher the number, the more it will shrink compared to the other items in the container. For example, if one item has a <code>flex-shrink</code> value of 1 and the other has a <code>flex-shrink</code> value of 3, the one with the value of 3 will shrink three times as much as the other.\n"},
"587d78ad367417b2b2512afa" : {"id":"587d78ad367417b2b2512afa","title":"Use the flex-wrap Property to Wrap a Row or Column","videoUrl":"'https://scrimba.com/p/pVaDAv/cQv9ZtG'","content":"\nCSS flexbox has a feature to split a flex item into multiple rows (or columns). By default, a flex container will fit all flex items together. For example, a row will all be on one line.\nHowever, using the <code>flex-wrap</code> property tells CSS to wrap items. This means extra items move into a new row or column. The break point of where the wrapping happens depends on the size of the items and the size of the container.\nCSS also has options for the direction of the wrap:\n<ul><li><code>nowrap</code>: this is the default setting, and does not wrap items.</li><li><code>wrap</code>: wraps items from left-to-right if they are in a row, or top-to-bottom if they are in a column.</li><li><code>wrap-reverse</code>: wraps items from right-to-left if they are in a row, or bottom-to-top if they are in a column.</li></ul>\n"},
"587d78ac367417b2b2512af7" : {"id":"587d78ac367417b2b2512af7","title":"Use the justify-content Property in the Tweet Embed","videoUrl":"'https://scrimba.com/p/pVaDAv/c43GgTa'","content":"\nThe last challenge showed an example of the <code>justify-content</code> property. For the tweet embed, this property can be applied to align the items in the <code>.profile-name</code> element.\n"},
"587d78ae367417b2b2512aff" : {"id":"587d78ae367417b2b2512aff","title":"Use the order Property to Rearrange Items","videoUrl":"'https://scrimba.com/p/pVaDAv/cMbvNAG'","content":"\nThe <code>order</code> property is used to tell CSS the order of how flex items appear in the flex container. By default, items will appear in the same order they come in the source HTML. The property takes numbers as values, and negative numbers can be used.\n"},
"5a9036d038fddaf9a66b5d32" : {"id":"5a9036d038fddaf9a66b5d32","title":"Add Columns with grid-template-columns","videoUrl":"'https://scrimba.com/p/pByETK/c7NzDHv'","content":"\nSimply creating a grid element doesn't get you very far. You need to define the structure of the grid as well. To add some columns to the grid, use the <code>grid-template-columns</code> property on a grid container as demonstrated below:\n<blockquote>.container {<br>&nbsp;&nbsp;display: grid;<br>&nbsp;&nbsp;grid-template-columns: 50px 50px;<br>}</blockquote>\nThis will give your grid two columns that are 50px wide each.\nThe number of parameters given to the <code>grid-template-columns</code> property indicates the number of columns in the grid, and the value of each parameter indicates the width of each column.\n"},
"5a9036ee38fddaf9a66b5d37" : {"id":"5a9036ee38fddaf9a66b5d37","title":"Add Gaps Faster with grid-gap","videoUrl":"'https://scrimba.com/p/pByETK/ca2qVtv'","content":"\n<code>grid-gap</code> is a shorthand property for <code>grid-row-gap</code> and <code>grid-column-gap</code> from the previous two challenges that's more convenient to use. If <code>grid-gap</code> has one value, it will create a gap between all rows and columns. However, if there are two values, it will use the first one to set the gap between the rows and the second value for the columns.\n"},
"5a9036e138fddaf9a66b5d33" : {"id":"5a9036e138fddaf9a66b5d33","title":"Add Rows with grid-template-rows","videoUrl":"'https://scrimba.com/p/pByETK/cbp9Pua'","content":"\nThe grid you created in the last challenge will set the number of rows automatically. To adjust the rows manually, use the <code>grid-template-rows</code> property in the same way you used <code>grid-template-columns</code> in previous challenge.\n"},
"5a90376038fddaf9a66b5d3c" : {"id":"5a90376038fddaf9a66b5d3c","title":"Align All Items Horizontally using justify-items","videoUrl":"'https://scrimba.com/p/pByETK/cJbpECn'","content":"\nSometimes you want all the items in your CSS Grid to share the same alignment. You can use the previously learned properties and align them individually, or you can align them all at once horizontally by using <code>justify-items</code> on your grid container. This property can accept all the same values you learned about in the previous two challenges, the difference being that it will move <b>all</b> the items in our grid to the desired alignment.\n"},
"5a94fdf869fb03452672e45b" : {"id":"5a94fdf869fb03452672e45b","title":"Align All Items Vertically using align-items","videoUrl":"'https://scrimba.com/p/pByETK/ckzPeUv'","content":"\nUsing the <code>align-items</code> property on a grid container will set the vertical alignment for all the items in our grid.\n"},
"5a90374338fddaf9a66b5d3a" : {"id":"5a90374338fddaf9a66b5d3a","title":"Align an Item Horizontally using justify-self","videoUrl":"'https://scrimba.com/p/pByETK/cJbpKHq'","content":"\nIn CSS Grid, the content of each item is located in a box which is referred to as a <dfn>cell</dfn>. You can align the content's position within its cell horizontally using the <code>justify-self</code> property on a grid item. By default, this property has a value of <code>stretch</code>, which will make the content fill the whole width of the cell. This CSS Grid property accepts other values as well:\n<code>start</code>: aligns the content at the left of the cell,\n<code>center</code>: aligns the content in the center of the cell,\n<code>end</code>: aligns the content at the right of the cell.\n"},
"5a90375238fddaf9a66b5d3b" : {"id":"5a90375238fddaf9a66b5d3b","title":"Align an Item Vertically using align-self","videoUrl":"'https://scrimba.com/p/pByETK/cmzd4fz'","content":"\nJust as you can align an item horizontally, there's a way to align an item vertically as well. To do this, you use the <code>align-self</code> property on an item. This property accepts all of the same values as <code>justify-self</code> from the last challenge.\n"},
"5a9036ee38fddaf9a66b5d35" : {"id":"5a9036ee38fddaf9a66b5d35","title":"Create a Column Gap Using grid-column-gap","videoUrl":"'https://scrimba.com/p/pByETK/cVZ8vfD'","content":"\nSo far in the grids you have created, the columns have all been tight up against each other. Sometimes you want a gap in between the columns. To add a gap between the columns, use the <code>grid-column-gap</code> property like this:\n<blockquote>grid-column-gap: 10px;</blockquote>\nThis creates 10px of empty space between all of our columns.\n"},
"5a9036ee38fddaf9a66b5d36" : {"id":"5a9036ee38fddaf9a66b5d36","title":"Create a Row Gap using grid-row-gap","videoUrl":"'https://scrimba.com/p/pByETK/cPbJ2Cv'","content":"\nYou can add a gap in between the rows of a grid using <code>grid-row-gap</code> in the same way that you added a gap in between columns in the previous challenge.\n"},
"5a94fe5469fb03452672e461" : {"id":"5a94fe5469fb03452672e461","title":"Create Flexible Layouts Using auto-fill","videoUrl":"'https://scrimba.com/p/pByETK/cmzdycW'","content":"\nThe repeat function comes with an option called <dfn>auto-fill</dfn>. This allows you to automatically insert as many rows or columns of your desired size as possible depending on the size of the container. You can create flexible layouts when combining <code>auto-fill</code> with <code>minmax</code>.\nIn the preview, <code>grid-template-columns</code> is set to\n<blockquote>repeat(auto-fill, minmax(60px, 1fr));</blockquote>\nWhen the container changes size, this setup keeps inserting 60px columns and stretching them until it can insert another one.\n<strong>Note</strong><br>If your container can't fit all your items on one row, it will move them down to a new one.\n"},
"5a94fe6269fb03452672e462" : {"id":"5a94fe6269fb03452672e462","title":"Create Flexible Layouts Using auto-fit","videoUrl":"'https://scrimba.com/p/pByETK/c3dPph8'","content":"\n<code>auto-fit</code> works almost identically to <code>auto-fill</code>. The only difference is that when the container's size exceeds the size of all the items combined, <code>auto-fill</code> keeps inserting empty rows or columns and pushes your items to the side, while <code>auto-fit</code> collapses those empty rows or columns and stretches your items to fit the size of the container.\n<strong>Note</strong><br>If your container can't fit all your items on one row, it will move them down to a new one.\n"},
"5a94fe8569fb03452672e464" : {"id":"5a94fe8569fb03452672e464","title":"Create Grids within Grids","videoUrl":"'https://scrimba.com/p/pByETK/c6N78Ap'","content":"\nTurning an element into a grid only affects the behavior of its direct descendants. So by turning a direct descendant into a grid, you  have a grid within a grid.\nFor example, by setting the <code>display</code> and <code>grid-template-columns</code> properties of the element with the <code>item3</code> class, you create a grid within your grid.\n"},
"5a858944d96184f06fd60d61" : {"id":"5a858944d96184f06fd60d61","title":"Create Your First CSS Grid","videoUrl":"'https://scrimba.com/p/pByETK/cqwREC4'","content":"\nTurn any HTML element into a grid container by setting its <code>display</code> property to <code>grid</code>. This gives you the ability to use all the other properties associated with CSS Grid.\n<strong>Note</strong><br>In CSS Grid, the parent element is referred to as the <dfn>container</dfn> and its children are called <dfn>items</dfn>.\n"},
"5a94fe0569fb03452672e45c" : {"id":"5a94fe0569fb03452672e45c","title":"Divide the Grid Into an Area Template","videoUrl":"'https://scrimba.com/p/pByETK/cLLpGAy'","content":"\nYou can group cells of your grid together into an <dfn>area</dfn> and give the area a custom name. Do this by using <code>grid-template-areas</code> on the container like this:\n<blockquote>grid-template-areas:<br>&nbsp;&nbsp;\"header header header\"<br>&nbsp;&nbsp;\"advert content content\"<br>&nbsp;&nbsp;\"footer footer footer\";</blockquote>\nThe code above merges the top three cells together into an area named <code>header</code>, the bottom three cells into a <code>footer</code> area, and it makes two areas in the middle row; <code>advert</code> and <code>content</code>.\n<strong>Note</strong><br>Every word in the code represents a cell and every pair of quotation marks represent a row.\nIn addition to custom labels, you can use a period (<code>.</code>) to designate an empty cell in the grid.\n"},
"5a94fe4469fb03452672e460" : {"id":"5a94fe4469fb03452672e460","title":"Limit Item Size Using the minmax Function","videoUrl":"'https://scrimba.com/p/pByETK/cD97RTv'","content":"\nThere's another built-in function to use with <code>grid-template-columns</code> and <code>grid-template-rows</code> called <code>minmax</code>. It's used to limit the size of items when the grid container changes size. To do this you need to specify the acceptable size range for your item. Here is an example:\n<blockquote>grid-template-columns: 100px minmax(50px, 200px);</blockquote>\nIn the code above, <code>grid-template-columns</code> is set to create two columns; the first is 100px wide, and the second has the minimum width of 50px and the maximum width of 200px.\n"},
"5a94fe1369fb03452672e45d" : {"id":"5a94fe1369fb03452672e45d","title":"Place Items in Grid Areas Using the grid-area Property","videoUrl":"'https://scrimba.com/p/pByETK/cRrqmtV'","content":"\nAfter creating an areas template for your grid container, as shown in the previous challenge, you can place an item in your custom area by referencing the name you gave it. To do this, you use the <code>grid-area</code> property on an item like this:\n<blockquote>.item1 { grid-area: header; }</blockquote>\nThis lets the grid know that you want the <code>item1</code> class to go in the area named <code>header</code>. In this case, the item will use the entire top row because that whole row is named as the header area.\n"},
"5a94fe3669fb03452672e45f" : {"id":"5a94fe3669fb03452672e45f","title":"Reduce Repetition Using the repeat Function","videoUrl":"'https://scrimba.com/p/pByETK/cQvqyHR'","content":"\nWhen you used <code>grid-template-columns</code> and <code>grid-template-rows</code> to define the structure of a grid, you entered a value for each row or column you created.\nLets say you want a grid with 100 rows of the same height. It isn't very practical to insert 100 values individually. Fortunately, there's a better way - by using the <code>repeat</code> function to specify the number of times you want your column or row to be repeated, followed by a comma and the value you want to repeat.\nHere's an example that would create the 100 row grid, each row at 50px tall.\n<blockquote>grid-template-rows: repeat(100, 50px);</blockquote>\nYou can also repeat multiple values with the repeat function, and insert the function amongst other values when defining a grid structure. Here's what I mean:\n<blockquote>grid-template-columns: repeat(2, 1fr 50px) 20px;</blockquote>\nThis translates to:\n<blockquote>grid-template-columns: 1fr 50px 1fr 50px 20px;</blockquote>\n<strong>Note</strong><br><code>1fr 50px</code> is repeated twice followed by 20px.\n"},
"5a9036ee38fddaf9a66b5d34" : {"id":"5a9036ee38fddaf9a66b5d34","title":"Use CSS Grid units to Change the Size of Columns and Rows","videoUrl":"'https://scrimba.com/p/pByETK/cvE8phd'","content":"\nYou can use absolute and relative units like <code>px</code> and <code>em</code> in CSS Grid to define the size of rows and columns. You can use these as well:\n<code>fr</code>: sets the column or row to a fraction of the available space,\n<code>auto</code>: sets the column or row to the width or height of its content automatically,\n<code>%</code>: adjusts the column or row to the percent width of its container.\nHere's the code that generates the output in the preview:\n<blockquote>grid-template-columns: auto 50px 10% 2fr 1fr;</blockquote>\nThis snippet creates five columns. The first column is as wide as its content, the second column is 50px, the third column is 10% of its container, and for the last two columns; the remaining space is divided into three sections, two are allocated for the fourth column, and one for the fifth.\n"},
"5a94fe2669fb03452672e45e" : {"id":"5a94fe2669fb03452672e45e","title":"Use grid-area Without Creating an Areas Template","videoUrl":"'https://scrimba.com/p/pByETK/c6N7VhK'","content":"\nThe <code>grid-area</code> property you learned in the last challenge can be used in another way. If your grid doesn't have an areas template to reference, you can create an area on the fly for an item to be placed like this:\n<blockquote>item1 { grid-area: 1/1/2/4; }</blockquote>\nThis is using the line numbers you learned about earlier to define where the area for this item will be. The numbers in the example above represent these values:\n<blockquote>grid-area: horizontal line to start at / vertical line to start at / horizontal line to end at / vertical line to end at;</blockquote>\nSo the item in the example will consume the rows between lines 1 and 2, and the columns between lines 1 and 4.\n"},
"5a90372638fddaf9a66b5d38" : {"id":"5a90372638fddaf9a66b5d38","title":"Use grid-column to Control Spacing","videoUrl":"'https://scrimba.com/p/pByETK/cnzkDSr'","content":"\nUp to this point, all the properties that have been discussed are for grid containers. The <code>grid-column</code> property is the first one for use on the grid items themselves.\nThe hypothetical horizontal and vertical lines that create the grid are referred to as <dfn>lines</dfn>. These lines are numbered starting with 1 at the top left corner of the grid and move right for columns and down for rows, counting upward.\nThis is what the lines look like for  a 3x3 grid:\n<div style=\"position:relative;margin:auto;background:Gainsboro;display:block;margin-top:100px;margin-bottom:50px;width:200px;height:200px;\"><p style=\"left:25%;top:-30%;font-size:130%;position:absolute;color:RoyalBlue;\">column lines</p><p style=\"left:0%;top:-15%;font-size:130%;position:absolute;color:RoyalBlue;\">1</p><p style=\"left:30%;top:-15%;font-size:130%;position:absolute;color:RoyalBlue;\">2</p><p style=\"left:63%;top:-15%;font-size:130%;position:absolute;color:RoyalBlue;\">3</p><p style=\"left:95%;top:-15%;font-size:130%;position:absolute;color:RoyalBlue;\">4</p><p style=\"left:-40%;top:45%;font-size:130%;transform:rotateZ(-90deg);position:absolute;\">row lines</p><p style=\"left:-10%;top:-10%;font-size:130%;position:absolute;\">1</p><p style=\"left:-10%;top:21%;font-size:130%;position:absolute;\">2</p><p style=\"left:-10%;top:53%;font-size:130%;position:absolute;\">3</p><p style=\"left:-10%;top:85%;font-size:130%;position:absolute;\">4</p><div style=\"left:0%;top:0%;width:5%;height:100%;background:RoyalBlue;position:absolute;\"></div><div style=\"left:31%;top:0%;width:5%;height:100%;background:RoyalBlue;position:absolute;\"></div><div style=\"left:63%;top:0%;width:5%;height:100%;background:RoyalBlue;position:absolute;\"></div><div style=\"left:95%;top:0%;width:5%;height:100%;background:RoyalBlue;position:absolute;\"></div><div style=\"left:0%;top:0%;width:100%;height:5%;background:black;position:absolute;\"></div><div style=\"left:0%;top:31%;width:100%;height:5%;background:black;position:absolute;\"></div><div style=\"left:0%;top:63%;width:100%;height:5%;background:black;position:absolute;\"></div><div style=\"left:0%;top:95%;width:100%;height:5%;background:black;position:absolute;\"></div></div>\nTo control the amount of columns an item will consume, you can use the <code>grid-column</code> property in conjunction with the line numbers you want the item to start and stop at.\nHere's an example:\n<blockquote>grid-column: 1 / 3;</blockquote>\nThis will make the item start at the first vertical line of the grid on the left and span to the 3rd line of the grid, consuming two columns.\n"},
"5a90373638fddaf9a66b5d39" : {"id":"5a90373638fddaf9a66b5d39","title":"Use grid-row to Control Spacing","videoUrl":"'https://scrimba.com/p/pByETK/c9WBLU4'","content":"\nOf course, you can make items consume multiple rows just like you can with columns. You define the horizontal lines you want an item to start and stop at using the <code>grid-row</code> property on a grid item.\n"},
"5a94fe7769fb03452672e463" : {"id":"5a94fe7769fb03452672e463","title":"Use Media Queries to Create Responsive Layouts","videoUrl":"'https://scrimba.com/p/pByETK/cMbqeHk'","content":"\nCSS Grid can be an easy way to make your site more responsive by using media queries to rearrange grid areas, change dimensions of a grid, and rearrange the placement of items.\nIn the preview, when the viewport width is 300px or more, the number of columns changes from 1 to 2. The advertisement area then occupies the left column completely.\n"},
"587d78b0367417b2b2512b08" : {"id":"587d78b0367417b2b2512b08","title":"Create a Media Query","videoUrl":"'https://scrimba.com/p/pzrPu4/cqwKrtm'","content":"\nMedia Queries are a new technique introduced in CSS3 that change the presentation of content based on different viewport sizes. The viewport is a user's visible area of a web page, and is different depending on the device used to access the site.\nMedia Queries consist of a media type, and if that media type matches the type of device the document is displayed on, the styles are applied. You can have as many selectors and styles inside your media query as you want.\nHere's an example of a media query that returns the content when the device's width is less than or equal to 100px:\n<code>@media (max-width: 100px) { /* CSS Rules */ }</code>\nand the following media query returns the content when the device's height is more than or equal to 350px:\n<code>@media (min-height: 350px) { /* CSS Rules */ }</code>\nRemember, the CSS inside the media query is applied only if the media type matches that of the device being used.\n"},
"587d78b1367417b2b2512b09" : {"id":"587d78b1367417b2b2512b09","title":"Make an Image Responsive","videoUrl":"'https://scrimba.com/p/pzrPu4/cz763UD'","content":"\nMaking images responsive with CSS is actually very simple. Instead of applying an absolute width to an element:\n<code>img { width: 720px; }</code>\nYou can use:\n<blockquote>img {<br>&nbsp;&nbsp;max-width: 100%;<br>&nbsp;&nbsp;display: block;<br>&nbsp;&nbsp;height: auto;<br>}</blockquote>\nThe <code>max-width</code> property of 100% scales the image to fit the width of its container, but the image won't stretch wider than its original width. Setting the <code>display</code> property to block changes the image from an inline element (its default), to a block element on its own line. The <code>height</code> property of auto keeps the original aspect ratio of the image.\n"},
"587d78b1367417b2b2512b0c" : {"id":"587d78b1367417b2b2512b0c","title":"Make Typography Responsive","videoUrl":"'https://scrimba.com/p/pzrPu4/crzN7T8'","content":"\nInstead of using <code>em</code> or <code>px</code> to size text, you can use viewport units for responsive typography. Viewport units, like percentages, are relative units, but they are based off different items. Viewport units are relative to the viewport dimensions (width or height) of a device, and percentages are relative to the size of the parent container element.\nThe four different viewport units are:\n<ul><li><code>vw: 10vw</code> would be 10% of the viewport's width.</li><li><code>vh: 3vh</code> would be 3% of the viewport's height.</li><li><code>vmin: 70vmin</code> would be 70% of the viewport's smaller dimension (height vs. width).</li><li><code>vmax: 100vmax</code> would be 100% of the viewport's bigger dimension (height vs. width).</li></ul>\n"},
"587d78b1367417b2b2512b0a" : {"id":"587d78b1367417b2b2512b0a","title":"Use a Retina Image for Higher Resolution Displays","videoUrl":"'https://scrimba.com/p/pzrPu4/cVZ4Rfp'","content":"\nWith the increase of internet connected devices, their sizes and specifications vary, and the displays they use could be different externally and internally. Pixel density is an aspect that could be different on one device from others and this density is known as Pixel Per Inch(PPI) or Dots Per Inch(DPI). The most famous such display is the one known as a \"Retina Display\" on the latest Apple MacBook Pro notebooks, and recently iMac computers. Due to the difference in pixel density between a \"Retina\" and \"Non-Retina\" displays, some images who have not been made with a High-Resolution Display in mind could look \"pixelated\" when rendered on a High-Resolution display.\n\nThe simplest way to make your images properly appear on High-Resolution Displays, such as the MacBook Pros \"retina display\" is to define their <code>width</code> and <code>height</code> values as only half of what the original file is.\nHere is an example of an image that is only using half of the original height and width:\n<blockquote>&lt;style&gt;<br>&nbsp;&nbsp;img { height: 250px; width: 250px; }<br>&lt;/style&gt;<br>&lt;img src=&quot;coolPic500x500&quot; alt=&quot;A most excellent picture&quot;&gt;</blockquote>\n"},
"bd7158d8c242eddfaeb5bd13" : {"id":"bd7158d8c242eddfaeb5bd13","title":"Build a Personal Portfolio Webpage","videoUrl":"","content":"\n<strong>Objective:</strong> Build a <a href='https://codepen.io' target='_blank'>CodePen.io</a> app that is functionally similar to this: <a href='https://codepen.io/freeCodeCamp/full/zNBOYG' target='_blank'>https://codepen.io/freeCodeCamp/full/zNBOYG</a>.\nFulfill the below <a href='https://en.wikipedia.org/wiki/User_story' target='_blank'>user stories</a> and get all of the tests to pass. Give it your own personal style.\nYou can use HTML, JavaScript, and CSS to complete this project. Plain CSS is recommended because that is what the lessons have covered so far and you should get some practice with plain CSS. You can use Bootstrap or SASS if you choose. Additional technologies (just for example jQuery, React, Angular, or Vue) are not recommended for this project, and using them is at your own risk. Other projects will give you a chance to work with different technology stacks like React. We will accept and try to fix all issue reports that use the suggested technology stack for this project. Happy coding!\n<strong>User Story #1:</strong> My portfolio should have a welcome section with an id of <code>welcome-section</code>.\n<strong>User Story #2:</strong> The welcome section should have an <code>h1</code> element that contains text.\n<strong>User Story #3:</strong> My portfolio should have a projects section with an id of <code>projects</code>.\n<strong>User Story #4:</strong> The projects section should contain at least one element with a class of <code>project-tile</code> to hold a project.\n<strong>User Story #5:</strong> The projects section should contain at least one link to a project.\n<strong>User Story #6:</strong> My portfolio should have a navbar with an id of <code>navbar</code>.\n<strong>User Story #7:</strong> The navbar should contain at least one link that I can click on to navigate to different sections of the page.\n<strong>User Story #8:</strong> My portfolio should have a link with an id of <code>profile-link</code>, which opens my GitHub or FCC profile in a new tab.\n<strong>User Story #9:</strong> My portfolio should have at least one media query.\n<strong>User Story #10:</strong> The height of the welcome section should be equal to the height of the viewport.\n<strong>User Story #11:</strong> The navbar should always be at the top of the viewport.\nYou can build your project by forking <a href='http://codepen.io/freeCodeCamp/pen/MJjpwO' target='_blank'>this CodePen pen</a>. Or you can use this CDN link to run the tests in any environment you like: <code>https://cdn.freecodecamp.org/testable-projects-fcc/v1/bundle.js</code>\nOnce you're done, submit the URL to your working project with all its tests passing.\nRemember to use the <a href='https://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> method if you get stuck.\n"},
"587d78af367417b2b2512b04" : {"id":"587d78af367417b2b2512b04","title":"Build a Product Landing Page","videoUrl":"","content":"\n<strong>Objective:</strong> Build a <a href='https://codepen.io' target='_blank'>CodePen.io</a> app that is functionally similar to this: <a href='https://codepen.io/freeCodeCamp/full/RKRbwL' target='_blank'>https://codepen.io/freeCodeCamp/full/RKRbwL</a>.\nFulfill the below <a href='https://en.wikipedia.org/wiki/User_story' target='_blank'>user stories</a> and get all of the tests to pass. Give it your own personal style.\nYou can use HTML, JavaScript, and CSS to complete this project. Plain CSS is recommended because that is what the lessons have covered so far and you should get some practice with plain CSS. You can use Bootstrap or SASS if you choose. Additional technologies (just for example jQuery, React, Angular, or Vue) are not recommended for this project, and using them is at your own risk. Other projects will give you a chance to work with different technology stacks like React. We will accept and try to fix all issue reports that use the suggested technology stack for this project. Happy coding!\n<strong>User Story #1:</strong> My product landing page should have a <code>header</code> element with a corresponding <code>id=\"header\"</code>.\n<strong>User Story #2:</strong> I can see an image within the <code>header</code> element with a corresponding <code>id=\"header-img\"</code>. A company logo would make a good image here.\n<strong>User Story #3:</strong> Within the <code>#header</code> element I can see a <code>nav</code> element with a corresponding <code>id=\"nav-bar\"</code>.\n<strong>User Story #4:</strong> I can see at least three clickable elements inside the <code>nav</code> element, each with the class <code>nav-link</code>.\n<strong>User Story #5:</strong> When I click a <code>.nav-link</code> button in the <code>nav</code> element, I am taken to the corresponding section of the landing page.\n<strong>User Story #6:</strong> I can watch an embedded product video with <code>id=\"video\"</code>.\n<strong>User Story #7:</strong> My landing page has a <code>form</code> element with a corresponding <code>id=\"form\"</code>.\n<strong>User Story #8:</strong> Within the form, there is an <code>input</code> field with <code>id=\"email\"</code> where I can enter an email address.\n<strong>User Story #9:</strong> The <code>#email</code> input field should have placeholder text to let the user know what the field is for.\n<strong>User Story #10:</strong> The <code>#email</code> input field uses HTML5 validation to confirm that the entered text is an email address.\n<strong>User Story #11:</strong> Within the form, there is a submit <code>input</code> with a corresponding <code>id=\"submit\"</code>.\n<strong>User Story #12:</strong> When I click the <code>#submit</code> element, the email is submitted to a static page (use this mock URL: <a href='https://www.freecodecamp.com/email-submit' target='_blank'>https://www.freecodecamp.com/email-submit</a>) that confirms the email address was entered and that it posted successfully.\n<strong>User Story #13:</strong> The navbar should always be at the top of the viewport.\n<strong>User Story #14:</strong> My product landing page should have at least one media query.\n<strong>User Story #15:</strong> My product landing page should utilize CSS flexbox at least once.\nYou can build your project by forking <a href='http://codepen.io/freeCodeCamp/full/MJjpwO' target='_blank'>this CodePen pen</a>. Or you can use this CDN link to run the tests in any environment you like: <code>https://cdn.freecodecamp.org/testable-projects-fcc/v1/bundle.js</code>\nOnce you're done, submit the URL to your working project with all its tests passing.\nRemember to use the <a href='https://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> method if you get stuck.\n"},
"587d78af367417b2b2512b03" : {"id":"587d78af367417b2b2512b03","title":"Build a Survey Form","videoUrl":"","content":"\n<strong>Objective:</strong> Build a <a href='https://codepen.io' target='_blank'>CodePen.io</a> app that is functionally similar to this: <a href='https://codepen.io/freeCodeCamp/full/VPaoNP' target='_blank'>https://codepen.io/freeCodeCamp/full/VPaoNP</a>.\nFulfill the below <a href='https://en.wikipedia.org/wiki/User_story' target='_blank'>user stories</a> and get all of the tests to pass. Give it your own personal style.\nYou can use HTML, JavaScript, and CSS to complete this project. Plain CSS is recommended because that is what the lessons have covered so far and you should get some practice with plain CSS. You can use Bootstrap or SASS if you choose. Additional technologies (just for example jQuery, React, Angular, or Vue) are not recommended for this project, and using them is at your own risk. Other projects will give you a chance to work with different technology stacks like React. We will accept and try to fix all issue reports that use the suggested technology stack for this project. Happy coding!\n<strong>User Story #1:</strong> I can see a title with <code>id=\"title\"</code> in H1 sized text.\n<strong>User Story #2:</strong> I can see a short explanation with <code>id=\"description\"</code> in P sized text.\n<strong>User Story #3:</strong> I can see a <code>form</code> with <code>id=\"survey-form\"</code>.\n<strong>User Story #4:</strong> Inside the form element, I am required to enter my name in a field with <code>id=\"name\"</code>.\n<strong>User Story #5:</strong> Inside the form element, I am required to enter an email in a field with <code>id=\"email\"</code>.\n<strong>User Story #6:</strong> If I enter an email that is not formatted correctly, I will see an HTML5 validation error.\n<strong>User Story #7:</strong> Inside the form, I can enter a number in a field with <code>id=\"number\"</code>.\n<strong>User Story #8:</strong> If I enter non-numbers in the number input, I will see an HTML5 validation error.\n<strong>User Story #9:</strong> If I enter numbers outside the range of the number input, which are defined by the <code>min</code> and <code>max</code> attributes, I will see an HTML5 validation error.\n<strong>User Story #10:</strong> For the name, email, and number input fields inside the form I can see corresponding labels that describe the purpose of each field with the following ids: <code>id=\"name-label\"</code>, <code>id=\"email-label\"</code>, and <code>id=\"number-label\"</code>.\n<strong>User Story #11:</strong> For the name, email, and number input fields, I can see placeholder text that gives me a description or instructions for each field.\n<strong>User Story #12:</strong> Inside the form element, I can select an option from a dropdown that has a corresponding <code>id=\"dropdown\"</code>.\n<strong>User Story #13:</strong> Inside the form element, I can select a field from one or more groups of radio buttons. Each group should be grouped using the <code>name</code> attribute.\n<strong>User Story #14:</strong> Inside the form element, I can select several fields from a series of checkboxes, each of which must have a <code>value</code> attribute.\n<strong>User Story #15:</strong> Inside the form element, I am presented with a <code>textarea</code> at the end for additional comments.\n<strong>User Story #16:</strong> Inside the form element, I am presented with a button with <code>id=\"submit\"</code> to submit all my inputs.\nYou can build your project by forking <a href='http://codepen.io/freeCodeCamp/pen/MJjpwO' target='_blank'>this CodePen pen</a>. Or you can use this CDN link to run the tests in any environment you like: <code>https://cdn.freecodecamp.org/testable-projects-fcc/v1/bundle.js</code>\nOnce you're done, submit the URL to your working project with all its tests passing.\nRemember to use the <a href='https://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> method if you get stuck.\n"},
"587d78b0367417b2b2512b05" : {"id":"587d78b0367417b2b2512b05","title":"Build a Technical Documentation Page","videoUrl":"","content":"\n<strong>Objective:</strong> Build a <a href='https://codepen.io' target='_blank'>CodePen.io</a> app that is functionally similar to this: <a href='https://codepen.io/freeCodeCamp/full/NdrKKL' target='_blank'>https://codepen.io/freeCodeCamp/full/NdrKKL</a>.\nFulfill the below <a href='https://en.wikipedia.org/wiki/User_story' target='_blank'>user stories</a> and get all of the tests to pass. Give it your own personal style.\nYou can use HTML, JavaScript, and CSS to complete this project. Plain CSS is recommended because that is what the lessons have covered so far and you should get some practice with plain CSS. You can use Bootstrap or SASS if you choose. Additional technologies (just for example jQuery, React, Angular, or Vue) are not recommended for this project, and using them is at your own risk. Other projects will give you a chance to work with different technology stacks like React. We will accept and try to fix all issue reports that use the suggested technology stack for this project. Happy coding!\n<strong>User Story #1:</strong> I can see a <code>main</code> element with a corresponding <code>id=\"main-doc\"</code>, which contains the page's main content (technical documentation).\n<strong>User Story #2:</strong> Within the <code>#main-doc</code> element, I can see several <code>section</code> elements, each with a class of <code>main-section</code>. There should be a minimum of 5.\n<strong>User Story #3:</strong> The first element within each <code>.main-section</code> should be a <code>header</code> element which contains text that describes the topic of that section.\n<strong>User Story #4:</strong> Each <code>section</code> element with the class of <code>main-section</code> should also have an id that corresponds with the text of each <code>header</code> contained within it. Any spaces should be replaced with underscores (e.g. The <code>section</code> that contains the header \"Javascript and Java\" should have a corresponding <code>id=\"Javascript_and_Java\"</code>).\n<strong>User Story #5:</strong> The <code>.main-section</code> elements should contain at least 10 <code>p</code> elements total (not each).\n<strong>User Story #6:</strong> The <code>.main-section</code> elements should contain at least 5 <code>code</code> elements total (not each).\n<strong>User Story #7:</strong> The <code>.main-section</code> elements should contain at least 5 <code>li</code> items total (not each).\n<strong>User Story #8:</strong> I can see a <code>nav</code> element with a corresponding <code>id=\"navbar\"</code>.\n<strong>User Story #9:</strong> The navbar element should contain one <code>header</code> element which contains text that describes the topic of the technical documentation.\n<strong>User Story #10:</strong> Additionally, the navbar should contain link (<code>a</code>) elements with the class of <code>nav-link</code>. There should be one for every element with the class <code>main-section</code>.\n<strong>User Story #11:</strong> The <code>header</code> element in the navbar must come before any link (<code>a</code>) elements in the navbar.\n<strong>User Story #12:</strong> Each element with the class of <code>nav-link</code> should contain text that corresponds to the <code>header</code> text within each <code>section</code> (e.g. if you have a \"Hello world\" section/header, your navbar should have an element which contains the text \"Hello world\").\n<strong>User Story #13:</strong> When I click on a navbar element, the page should navigate to the corresponding section of the <code>main-doc</code> element (e.g. If I click on a <code>nav-link</code> element that contains the text \"Hello world\", the page navigates to a <code>section</code> element that has that id and contains the corresponding <code>header</code>.\n<strong>User Story #14:</strong> On regular sized devices (laptops, desktops), the element with <code>id=\"navbar\"</code> should be shown on the left side of the screen and should always be visible to the user.\n<strong>User Story #15:</strong> My Technical Documentation page should use at least one media query.\nYou can build your project by forking <a href='http://codepen.io/freeCodeCamp/pen/MJjpwO' target='_blank'>this CodePen pen</a>. Or you can use this CDN link to run the tests in any environment you like: <code>https://cdn.freecodecamp.org/testable-projects-fcc/v1/bundle.js</code>\nOnce you're done, submit the URL to your working project with all its tests passing.\nRemember to use the <a href='https://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> method if you get stuck.\n"},
"bd7158d8c442eddfaeb5bd18" : {"id":"bd7158d8c442eddfaeb5bd18","title":"Build a Tribute Page","videoUrl":"","content":"\n<strong>Objective:</strong> Build a <a href='https://codepen.io' target='_blank'>CodePen.io</a> app that is functionally similar to this: <a href='https://codepen.io/freeCodeCamp/full/zNqgVx' target='_blank'>https://codepen.io/freeCodeCamp/full/zNqgVx</a>.\nFulfill the below <a href='https://en.wikipedia.org/wiki/User_story' target='_blank'>user stories</a> and get all of the tests to pass. Give it your own personal style.\nYou can use HTML, JavaScript, and CSS to complete this project. Plain CSS is recommended because that is what the lessons have covered so far and you should get some practice with plain CSS. You can use Bootstrap or SASS if you choose. Additional technologies (just for example jQuery, React, Angular, or Vue) are not recommended for this project, and using them is at your own risk. Other projects will give you a chance to work with different technology stacks like React. We will accept and try to fix all issue reports that use the suggested technology stack for this project. Happy coding!\n<strong>User Story #1:</strong> My tribute page should have an element with a corresponding <code>id=\"main\"</code>, which contains all other elements.\n<strong>User Story #2:</strong> I should see an element with a corresponding <code>id=\"title\"</code>, which contains a string (i.e. text) that describes the subject of the tribute page (e.g. \"Dr. Norman Borlaug\").\n<strong>User Story #3:</strong> I should see a <code>div</code> element with a corresponding <code>id=\"img-div\"</code>.\n<strong>User Story #4:</strong> Within the <code>img-div</code> element, I should see an <code>img</code> element with a corresponding <code>id=\"image\"</code>.\n<strong>User Story #5:</strong> Within the <code>img-div</code> element, I should see an element with a corresponding <code>id=\"img-caption\"</code> that contains textual content describing the image shown in <code>img-div</code>.\n<strong>User Story #6:</strong> I should see an element with a corresponding <code>id=\"tribute-info\"</code>, which contains textual content describing the subject of the tribute page.\n<strong>User Story #7:</strong> I  should see an <code>a</code> element with a corresponding <code>id=\"tribute-link\"</code>, which links to an outside site that contains additional information about the subject of the tribute page. HINT: You must give your element an attribute of <code>target</code> and set it to <code>_blank</code> in order for your link to open in a new tab (i.e. <code>target=\"_blank\"</code>).\n<strong>User Story #8:</strong> The <code>img</code> element should responsively resize, relative to the width of its parent element, without exceeding its original size.\n<strong>User Story #9:</strong> The <code>img</code> element should be centered within its parent element.\nYou can build your project by forking <a href='http://codepen.io/freeCodeCamp/pen/MJjpwO' target='_blank'>this CodePen pen</a>. Or you can use this CDN link to run the tests in any environment you like: <code>https://cdn.freecodecamp.org/testable-projects-fcc/v1/bundle.js</code>.\nOnce you're done, submit the URL to your working project with all its tests passing.\nRemember to use the <a href='https://forum.freecodecamp.org/t/how-to-get-help-when-you-are-stuck/19514' target='_blank'>Read-Search-Ask</a> method if you get stuck.\n"}}}
